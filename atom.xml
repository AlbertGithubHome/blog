<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Albert World</title>
  <icon>https://www.gravatar.com/avatar/8ccc6291d5bfd34e7aaf601c4ebec7e1</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://AlbertGithubHome.github.io/blog/"/>
  <updated>2022-07-17T15:38:39.290Z</updated>
  <id>http://AlbertGithubHome.github.io/blog/</id>
  
  <author>
    <name>Albert Shi</name>
    <email>347070901@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++17使用std::optional表示一个可能存在的值</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/07/17/C-17%E4%BD%BF%E7%94%A8std-optional%E8%A1%A8%E7%A4%BA%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%83%BD%E5%AD%98%E5%9C%A8%E7%9A%84%E5%80%BC/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/07/17/C-17使用std-optional表示一个可能存在的值/</id>
    <published>2022-07-17T12:33:58.000Z</published>
    <updated>2022-07-17T15:38:39.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时写代码会遇到一种传递参数<code>特殊值</code>标记特殊流程，或者函数返回值存在魔法数的情况，很需要一种标记参数或返回值状态的结构，那么在 C++17 标准下提供了 <code>std::optional</code> 这个模板类，可以表示一个值不存在的状态，一起来看看用法吧。</p><a id="more"></a><h1 id="返回一个bool值"><a href="#返回一个bool值" class="headerlink" title="返回一个bool值"></a>返回一个bool值</h1><p>以下例子纯属虚构，只为说明问题，无实际意义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getBoolVal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* n = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    *n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a + *n &gt; b)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (getBoolVal(<span class="number">10</span>, <span class="number">9</span>))</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子中的函数 <code>getBoolVal</code> 本意是想返回一个 bool 类型的判断结果，但是函数中有一些异常情况时，比如申请内存异常时，也会返回一个bool值，这是与原判断结果语义不同的，所以需要单独返回这种情况，如果也放到同一个返回值中会导致含义模糊，这时可以考虑使用引用变量参数来返回实际比较结果。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">getBoolVal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">bool</span>&amp; ret)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* n = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    *n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a + *n &gt; b)</span><br><span class="line">        ret = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ret = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (getBoolVal(<span class="number">10</span>, <span class="number">9</span>, ret))</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个引用参数 <code>ret</code> 使用起来有点不方便，那把两个值都返回怎么样，虽然C++不允许有多个返回值，但可以把它们包装成 <code>std::pair</code> 或者 <code>std::tuple</code> 来返回，再来改写一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">bool</span>, <span class="keyword">bool</span>&gt; getBoolVal3(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>* n = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="literal">false</span>, <span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line">    *n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a + *n &gt; b)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="literal">true</span>, <span class="literal">true</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="literal">true</span>, <span class="literal">false</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> [err, ret] = getBoolVal(<span class="number">10</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">if</span> (err)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方法把实际的返回值，搭配一个表示状态的 bool 变量，组成 <code>std::pair</code> 进行返回，基本上得到而来语义明确的目的，但是看起来还是不太优雅，而 <code>std::optional</code> 可以帮助我们实现类似的需求，并且代码看起来能更简洁一点。</p><h1 id="使用-std-optional-改写"><a href="#使用-std-optional-改写" class="headerlink" title="使用 std::optional 改写"></a>使用 std::optional 改写</h1><p><code>std::optional</code> 本身是一个模板类：会有一个 <code>std::nullopt</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">optional</span>;</span></span><br></pre></td></tr></table></figure><p>它内部有两种状态，要么有一个T类型的值，要么用 <code>std::nullopt</code> 表示没有值，查看一个 <code>std::optional</code> 对象是否有值，可以用 <code>has_value()</code> 进行判断，当一个 <code>std::optional</code> 有值时，可以通过用指针的方式(<code>*</code>号和<code>-&gt;</code>号)来使用它，或者用 <code>value()</code>函数取它的值，下面我们用它来改写一下之前的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::optional&lt;<span class="keyword">bool</span>&gt; getBoolVal4(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>* n = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">    <span class="keyword">if</span> (!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::nullopt;</span><br><span class="line"></span><br><span class="line">    *n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a + *n &gt; b)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::optional&lt;<span class="keyword">bool</span>&gt; ret = getBoolVal(<span class="number">10</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret.has_value())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"error"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ret.value())</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了 <code>std::optional</code> 之后就把 <code>bool</code> 类型之前的两态变成了三态，很多类似的逻辑也被封装成了函数，使用它之后代码更清晰了，从此可以告别一些烦人的魔法数了，一些函数参数也可以使用 <code>std::optional</code> 来包装，用法类似，在此就不展开说了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>std::optional</code> 是一个模板类，可以表示一个可能存在的值</li><li><code>std::optional</code> 的内部有两种状态，要么表示一个T类型的值，要么用 <code>std::nullopt</code> 表示没有值</li><li>可以用 <code>has_value()</code> 判断一个 <code>std::optional</code> 是否有值，然后用 <code>value()</code> 函数取它表示的值</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/125581553" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>子未经历过，安知此文是鸡汤，子非我，安知我不知此文是鸡汤。意见向左的人往往在内心互道傻X，而现实生活中哪有什么绝对的对错，只是出发点和眼界不同罢了，即使是真理也有适用的环境，“两点之间线段最短”，这一定是对的吗？</p><p>2022-7-17 23:26:03</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平时写代码会遇到一种传递参数&lt;code&gt;特殊值&lt;/code&gt;标记特殊流程，或者函数返回值存在魔法数的情况，很需要一种标记参数或返回值状态的结构，那么在 C++17 标准下提供了 &lt;code&gt;std::optional&lt;/code&gt; 这个模板类，可以表示一个值不存在的状态，一起来看看用法吧。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="optional" scheme="http://AlbertGithubHome.github.io/blog/tags/optional/"/>
    
      <category term="可选值" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8F%AF%E9%80%89%E5%80%BC/"/>
    
      <category term="魔法数" scheme="http://AlbertGithubHome.github.io/blog/tags/%E9%AD%94%E6%B3%95%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>偶然在github开源项目中发现了.travis.yml这货</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/07/02/%E5%81%B6%E7%84%B6%E5%9C%A8github%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%8F%91%E7%8E%B0%E4%BA%86-travis-yml%E8%BF%99%E8%B4%A7/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/07/02/偶然在github开源项目中发现了-travis-yml这货/</id>
    <published>2022-07-02T15:34:45.000Z</published>
    <updated>2022-07-03T02:46:53.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>偶然在一个github开源项目中发现了.travis.yml这货，然后一发不可收拾，翻了翻之前看的几个开源库都有这个文件，并且最近经常看到它，这被称为“巴德尔-迈因霍夫现象”，是一种认知偏见，即在第一次注意到某一事物后，有一种更频繁地注意到它的倾向，导致某人相信它有很高的频率，既然这样索性就深入研究了一下这个文件，发现它原来是用于持续集成的。</p><a id="more"></a><h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><p>持续集成是一种 DevOps（Development和Operations的组合词）软件开发实践。采用持续集成时，开发人员会定期将代码变更合并到一个中央存储库中，之后系统会自动运行构建和测试操作。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来进行验证，从而尽早地发现集成错误，提高软件质量，并减少验证和发布新软件更新所需的时间。</p><p>持续集成是将构建并测试的过程自动化，在你提交代码时，持续集成服务能够自动触发构建与测试过程，并反馈结果，加快开发周期，同时减少脏代码的引入，而持续集成工具有很多，常见的包括 <code>Jenkins</code>、<code>Gitlab-CI</code>、<code>Travis CI</code> 和 <code>AppVeyor</code>，github上项目的持续集成可以选择使用 <code>Travis CI</code>，也有项目使用 <code>AppVeyor</code>，它们都是开源持续集成云服务。</p><h1 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h1><p><code>.travis.yml</code> 是 github 用于说明持续集成步骤配置文件，使用的语言是 <code>YAML</code>。它是一种可读性非常高，与程序语言数据结构非常接近，同时具备丰富的表达能力和可扩展性，并且易于使用的数据标记语言。经常会拿它和 <code>XML</code> 和 <code>JSON</code> 进行对比，<code>YAML</code> 比 <code>XML</code> 语法简洁得多，但是没有 <code>XML</code> 的标签概念，而 <code>JSON</code> 语法是 <code>YAML 1.2</code> 的子集，非常接近 <code>YAML1.0</code> 与 <code>YAML1.1</code> 的子集。</p><p><code>YAML</code> 可以简单表达清单、散列表，标量等数据结构。它使用空白符号缩进，适合用来表达或编辑数据结构、各种配置文件、倾印调试内容、文件大纲等，配置文件后缀为通常为 <code>.yml</code>，比如：<code>.travis.yml</code>。</p><p>关于具体的语法本文就不展开说了，网上自行搜索一下，不同类型的项目的配置通常有自己的规范，可以参照<a href="https://docs.travis-ci.com/user/languages/" target="_blank" rel="noopener">travis官方</a>配置说明，下面展示一个 <code>.travis.yml</code> 文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">cpp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">os:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">linux</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">osx</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compiler:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">gcc</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">clang</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$CC</span> <span class="string">ccronexpr.c</span> <span class="string">ccronexpr_test.c</span> <span class="bullet">-I.</span> <span class="bullet">-Wall</span> <span class="bullet">-Wextra</span> <span class="bullet">-std=c89</span> <span class="bullet">-DCRON_TEST_MALLOC</span> <span class="bullet">-o</span> <span class="string">a.out</span> <span class="string">&amp;&amp;</span> <span class="string">./a.out</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$CXX</span> <span class="string">ccronexpr.c</span> <span class="string">ccronexpr_test.c</span> <span class="bullet">-I.</span> <span class="bullet">-Wall</span> <span class="bullet">-Wextra</span> <span class="bullet">-std=c++11</span> <span class="bullet">-DCRON_TEST_MALLOC</span> <span class="bullet">-o</span> <span class="string">a.out</span> <span class="string">&amp;&amp;</span> <span class="string">./a.out</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="attr">    on_success:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><h1 id="第一次使用-travis-yml"><a href="#第一次使用-travis-yml" class="headerlink" title="第一次使用 .travis.yml"></a>第一次使用 .travis.yml</h1><p>要想学会一件事必须反复强化记忆，所以我决定自己写个<code>.travis.yml</code>来使用一次，刚开始语法还不太熟悉，所以我打算在一些开源项目的文件基础上来修改，需求也比较简单，只要能实现我上传到github的代码能自动编译就可以了。</p><h2 id="注册登录travis"><a href="#注册登录travis" class="headerlink" title="注册登录travis"></a>注册登录travis</h2><p>登陆 <a href="http://www.travis-ci.com/" target="_blank" rel="noopener">travis</a> 官网，直接用github账号登陆即可，这样 travis 可以直接关联登录的github账号，自动获取你的仓库信息。</p><p><img src="https://img-blog.csdnimg.cn/0bc3c9354ef9427891f0530202c4ae6d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="travis-ci-1"></p><p>登陆之后，点击settings，然后激活 <code>Travis CI</code> 勾选需要持续集成的仓库。</p><p><img src="https://img-blog.csdnimg.cn/5b498cb0518b47d4a0a03db5cf758c51.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="travis-ci2"></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p>为了方便测试，我们只编写一个简单的 <code>HelloWolrd.cpp</code> 测试文件好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编写-travis-yml"><a href="#编写-travis-yml" class="headerlink" title="编写.travis.yml"></a>编写.travis.yml</h2><p>我只写了一个文件，要求只要编译 <code>gcc</code> 通过就行了，暂时也不需要邮件通知</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">cpp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sudo:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">os:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">linux</span></span><br><span class="line"></span><br><span class="line"><span class="attr">compiler:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">gcc</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">$CXX</span> <span class="string">wolrd/code/c++/HelloWorld.cpp</span> <span class="bullet">-o</span> <span class="string">a.out</span> <span class="string">&amp;&amp;</span> <span class="string">./a.out</span></span><br></pre></td></tr></table></figure><h2 id="推送代码启动Travis-CI"><a href="#推送代码启动Travis-CI" class="headerlink" title="推送代码启动Travis CI"></a>推送代码启动Travis CI</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Albert@home-pc MINGW64 /d/data/maingit/HelloWorld (master)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line">Albert@home-pc MINGW64 /d/data/maingit/HelloWorld (master)</span><br><span class="line">$ git commit -m&quot;test travis ci&quot;</span><br><span class="line">[master 8e92384] test travis ci</span><br><span class="line"> 2 files changed, 2 insertions(+), 2 deletions(-)</span><br><span class="line">Albert@home-pc MINGW64 /d/data/maingit/HelloWorld (master)</span><br><span class="line">$ git push</span><br><span class="line">Enumerating objects: 13, done.</span><br><span class="line">Counting objects: 100% (13/13), done.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (6/6), done.</span><br><span class="line">Writing objects: 100% (7/7), 604 bytes | 302.00 KiB/s, done.</span><br><span class="line">Total 7 (delta 3), reused 0 (delta 0)</span><br><span class="line">remote: Resolving deltas: 100% (3/3), completed with 3 local objects.</span><br><span class="line">To github.com:AlbertGithubHome/HelloWorld.git</span><br><span class="line">   af45c67..8e92384  master -&gt; master</span><br></pre></td></tr></table></figure><p>推送之后travis-ci网站会自动启动，构建过程和结果如下：</p><p><img src="https://img-blog.csdnimg.cn/fe6b6fa985ca4c15a6cde637ea6b7a7d.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="travis-ci-3"></p><p>第一次尝试失败，检查发现编译文件的路径写错了，修改后再次推送，成功构建的界面如下：</p><p><img src="https://img-blog.csdnimg.cn/b24395840e414c41b3c17e84a64de06e.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="travis-ci4"></p><p>然后就可以在编译状态按钮后面领取这样一个标签，它可以根据项目构建状态实时变化，快把它加到项目的README文件里吧。</p><blockquote><p><code>[![Build Status](https://app.travis-ci.com/AlbertGithubHome/HelloWorld.svg?branch=master)](https://app.travis-ci.com/AlbertGithubHome/HelloWorld)</code></p></blockquote><p><img src="https://img-blog.csdnimg.cn/0b7885e61e294b74919b8015c9bf0fdd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="travis-ci5"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>.travis.yml</code> 是使用 <code>Travis CI</code> 持续集成服务的配置文件，使用 <code>YAML</code> 语言编写</li><li><code>YAML</code> 比 <code>XML</code> 语法简洁得多，但是没有 <code>XML</code> 的标签概念，而 <code>JSON</code> 语法是 <code>YAML 1.2</code> 的子集</li><li><code>GitHub</code> 和 <code>Travis CI</code> 是一对好基友，几乎不用额外的配置，只要按照<a href="https://docs.travis-ci.com/user/languages/cpp/" target="_blank" rel="noopener">官方语法</a>写好 <code>.travis.yml</code> 文件即可</li><li>可以把<code>Travis CI</code> 看成一个机器人，每当我们 push 代码时，这个机器人会按照既定流程帮我们自动构建和检测</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/125472083" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>卅是一个阶段，更是一个开始~</p><p>2022-7-3 01:08:33</p></blockquote><!--Worker informationhostname: 169a91ed-3bb1-48d9-8497-63b441cbeace@1.worker-com-54588667bc-zl94w.gce-production-1version: 6.2.22 https://github.com/travis-ci/worker/tree/858cb91994a513269f2fe9782c15fc113e966231instance: travis-job-744f0f48-566f-4629-864a-f4f36a446ae0 travis-ci-sardonyx-xenial-1647862066-c38d3375 (via amqp)startup: 6.008688253s0.12s0.01s0.00s0.01ssystem_infoBuild system informationBuild language: cppBuild dist: xenialBuild id: 252700359Job id: 575450900Runtime kernel version: 4.15.0-1098-gcptravis-build version: ac64d3c6Build image provisioning date and timeMon Mar 21 11:50:29 UTC 2022Operating System DetailsDistributor ID: UbuntuDescription:    Ubuntu 16.04.7 LTSRelease:    16.04Codename:   xenialSystemd Versionsystemd 229Cookbooks Version187d986 https://github.com/travis-ci/travis-cookbooks/tree/187d986git versiongit version 2.35.1bash versionGNU bash, version 4.3.48(1)-release (x86_64-pc-linux-gnu)gcc versiongcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609docker versionClient: Docker Engine - Community Version:           20.10.7 API version:       1.41 Go version:        go1.13.15 Git commit:        f0df350 Built:             Wed Jun  2 11:56:47 2021 OS/Arch:           linux/amd64 Context:           default Experimental:      trueServer: Docker Engine - Community Engine:  Version:          20.10.7  API version:      1.41 (minimum version 1.12)  Go version:       go1.13.15  Git commit:       b0f5bc3  Built:            Wed Jun  2 11:54:58 2021  OS/Arch:          linux/amd64  Experimental:     false containerd:  Version:          1.4.6  GitCommit:        d71fcd7d8303cbf684402823e425e9dd2e99285d runc:  Version:          1.0.0-rc95  GitCommit:        b9ee9c6314599f1b4a7f497e1f1f856fe433d3b7 docker-init:  Version:          0.19.0  GitCommit:        de40ad0clang versionclang version 7.0.0 (tags/RELEASE_700/final)jq versionjq-1.6bats versionBats 0.4.0shellcheck version0.7.2shfmt versionv3.2.1ccache version3.2.4cmake versioncmake version 3.12.4heroku versionheroku/7.59.4 linux-x64 node-v12.21.0imagemagick versionVersion: ImageMagick 6.8.9-9 Q16 x86_64 2020-12-04 http://www.imagemagick.orgmd5deep version4.4mercurial versionversion 4.8mysql versionmysql  Ver 14.14 Distrib 5.7.33, for Linux (x86_64) using  EditLine wrapperopenssl versionOpenSSL 1.0.2g  1 Mar 2016packer version1.7.5postgresql client versionpsql (PostgreSQL) 10.17 (Ubuntu 10.17-1.pgdg16.04+1)ragel versionRagel State Machine Compiler version 6.8 Feb 2013sudo version1.8.16gzip versiongzip 1.6zip versionZip 3.0vim versionVIM - Vi IMproved 7.4 (2013 Aug 10, compiled Oct 13 2020 16:04:38)4miptables versioniptables v1.6.0curl versioncurl 7.47.0 (x86_64-pc-linux-gnu) libcurl/7.47.0 GnuTLS/3.4.10 zlib/1.2.8 libidn/1.32 librtmp/2.3wget versionGNU Wget 1.17.1 built on linux-gnu.rsync versionrsync  version 3.1.1  protocol version 31gimme versionv1.5.4nvm version0.39.1perlbrew version/home/travis/perl5/perlbrew/bin/perlbrew  - App::perlbrew/0.94phpenv versionrbenv 1.2.0-14-gc6cc0a1rvm versionrvm 1.29.12 (latest) by Michal Papis, Piotr Kuczynski, Wayne E. Seguin [https://rvm.io]default ruby versionruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-linux]CouchDB versioncouchdb 1.6.1ElasticSearch version7.16.3Installed Firefox versionfirefox 63.0.1MongoDB versionMongoDB 4.0.28PhantomJS version2.1.1Pre-installed PostgreSQL versions9.4.269.5.259.6.22Redis versionredis-server 6.0.6Pre-installed Go versions1.11.1ant versionApache Ant(TM) version 1.9.6 compiled on July 20 2018mvn versionApache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)gradle versionGradle 5.1.1!lein versionLeiningen 2.9.8 on Java 11.0.2 OpenJDK 64-Bit Server VMPre-installed Node.js versionsv10.24.1v11.0.0v12.22.11v14.19.1v16.14.2v4.9.1v6.17.1v8.12.0v8.17.0v8.9phpenv versions  system  5.6  5.6.40  7.1  7.1.27  7.2* 7.2.15 (set by /home/travis/.phpenv/version)  hhvm-stable  hhvmcomposer --versionComposer version 1.8.4 2019-02-11 10:52:10Pre-installed Ruby versionsruby-2.3.8ruby-2.4.5ruby-2.5.30.01s0.00s0.67s0.24s0.05s0.00s0.03s0.00s0.01s0.01s0.01s0.01s0.01s0.00s0.00s0.02s0.00s0.01s0.29s0.00s0.00s0.00s0.01s0.00s0.09s0.00s0.90s0.00s0.00s6.03s0.00s3.25s0.00s2.48sdocker_mtu_and_registry_mirrorsresolvconfgit.checkout0.54s$ git clone --depth=50 --branch=master https://github.com/AlbertGithubHome/HelloWorld.git AlbertGithubHome/HelloWorldCloning into 'AlbertGithubHome/HelloWorld'...remote: Enumerating objects: 159, done.remote: Counting objects: 100% (31/31), done.remote: Compressing objects: 100% (21/21), done.remote: Total 159 (delta 10), reused 25 (delta 6), pack-reused 128Receiving objects: 100% (159/159), 102.32 KiB | 1.76 MiB/s, done.Resolving deltas: 100% (49/49), done.$ cd AlbertGithubHome/HelloWorld$ git checkout -qf 8e92384a17051bbaf41d039e4f4c736464d953a40.00s$ export TRAVIS_COMPILER=gcc$ export CXX=${CXX:-g++}$ export CXX_FOR_BUILD=${CXX_FOR_BUILD:-g++}$ export CC=${CC:-gcc}$ export CC_FOR_BUILD=${CC_FOR_BUILD:-gcc}$ gcc --versiongcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609Copyright (C) 2015 Free Software Foundation, Inc.This is free software; see the source for copying conditions.  There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.0.35s$ $CXX world/code/c++/HelloWorld.cpp -o a.out && ./a.outThe command "$CXX world/code/c++/HelloWorld.cpp -o a.out && ./a.out" exited with 0.Done. Your build exited with 0.-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;偶然在一个github开源项目中发现了.travis.yml这货，然后一发不可收拾，翻了翻之前看的几个开源库都有这个文件，并且最近经常看到它，这被称为“巴德尔-迈因霍夫现象”，是一种认知偏见，即在第一次注意到某一事物后，有一种更频繁地注意到它的倾向，导致某人相信它有很高的频率，既然这样索性就深入研究了一下这个文件，发现它原来是用于持续集成的。&lt;/p&gt;
    
    </summary>
    
      <category term="CI/CD" scheme="http://AlbertGithubHome.github.io/blog/categories/CI-CD/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="CI" scheme="http://AlbertGithubHome.github.io/blog/tags/CI/"/>
    
      <category term="CD" scheme="http://AlbertGithubHome.github.io/blog/tags/CD/"/>
    
      <category term="YAML" scheme="http://AlbertGithubHome.github.io/blog/tags/YAML/"/>
    
      <category term="travis" scheme="http://AlbertGithubHome.github.io/blog/tags/travis/"/>
    
  </entry>
  
  <entry>
    <title>C++11中的noexcept说明符和操作符</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/06/26/C-11%E4%B8%AD%E7%9A%84noexceptno%E7%9A%84%E8%AF%B4%E6%98%8E%E7%AC%A6%E5%92%8C%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/06/26/C-11中的noexceptno的说明符和操作符/</id>
    <published>2022-06-25T16:47:36.000Z</published>
    <updated>2022-06-26T09:28:03.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>noexcept</code> 这个说明符看起来很厉害的样子，给人一种函数加上它就可以不产生异常的感觉，但事实真的如此吗？它真的能消除一切异常吗？答案是不能！它只是函数的一种说明，作为开发者我们需要自己保证标记了 <code>noexcept</code> 的函数不产生异常。啥？这不是没事找事吗？</p><a id="more"></a><h1 id="为什么要用-noexcept"><a href="#为什么要用-noexcept" class="headerlink" title="为什么要用 noexcept"></a>为什么要用 noexcept</h1><p>既然给函数添加了 <code>noexcept</code> 说明符并不能杜绝异常的产生，那我们为什么还要用它呢？我个人的理解是为了优化，因为异常存在的意义就是用来干脏活累活的，为了实现异常的处理，我们编写逻辑的每一次函数调用，编译器都会生成一堆外围的处理代码，而当我们把一个函数标记为 <code>noexcept</code> 时，表示开发者向运行时保证调用这个函数不会抛出异常，这意味着这些脏活累活都不用干了，如果声明了 <code>noexcept</code> 的函数还试图抛出异常，C++会调用std::terminate函数终止程序运行。</p><p>添加 <code>noexcept</code> 说明符后编译器是否会进行优化，我们可以通过生成的汇编代码来看一下，编译器是 <code>gcc 12.1</code>，先看下面这段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ~Obj();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">entrance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Obj instance;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数 <code>entrance()</code> 先定义一个<code>Obj</code>类型的对象，然后调用一个 <code>inner()</code> 函数，假如 <code>inner()</code> 在执行过程中抛出了异常，我们需要在保证对象实例 <code>instance</code> 被正确析构后才能退出 <code>entrance()</code> 函数，为了实现了这个保证，编译器真的是操碎了心，可以看一下生成汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">entrance():</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        push    rbx</span><br><span class="line">        sub     rsp, 24</span><br><span class="line">        call    inner()</span><br><span class="line">        lea     rax, [rbp-17]</span><br><span class="line">        mov     rdi, rax</span><br><span class="line">        call    Obj::~Obj() [complete object destructor]</span><br><span class="line">        jmp     .L4</span><br><span class="line">        mov     rbx, rax</span><br><span class="line">        lea     rax, [rbp-17]</span><br><span class="line">        mov     rdi, rax</span><br><span class="line">        call    Obj::~Obj() [complete object destructor]</span><br><span class="line">        mov     rax, rbx</span><br><span class="line">        mov     rdi, rax</span><br><span class="line">        call    _Unwind_Resume</span><br><span class="line">.L4:</span><br><span class="line">        mov     rbx, QWORD PTR [rbp-8]</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><p>从这段汇编代码中可以发现，有两句是调用了析构函数 <code>Obj::~Obj()</code>，其中第二次就是为了异常发生时准备的，接下来我们加上 <code>noexcept</code> 后代码变成了下面这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ~Obj();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">entrance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Obj o;</span><br><span class="line">    inner();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源代码几乎没有变化，而生成的汇编代码清爽了太多：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">entrance():</span><br><span class="line">        push    rbp</span><br><span class="line">        mov     rbp, rsp</span><br><span class="line">        sub     rsp, 16</span><br><span class="line">        call    inner()</span><br><span class="line">        lea     rax, [rbp-1]</span><br><span class="line">        mov     rdi, rax</span><br><span class="line">        call    Obj::~Obj() [complete object destructor]</span><br><span class="line">        leave</span><br><span class="line">        ret</span><br></pre></td></tr></table></figure><p>对比来看，以下这部分代码一直都是编译器在默默付出，现在你可以通过 <code>noexcept</code> 帮它减负了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">        jmp     .L4</span><br><span class="line">        mov     rbx, rax</span><br><span class="line">        lea     rax, [rbp-17]</span><br><span class="line">        mov     rdi, rax</span><br><span class="line">        call    Obj::~Obj() [complete object destructor]</span><br><span class="line">        mov     rax, rbx</span><br><span class="line">        mov     rdi, rax</span><br><span class="line">        call    _Unwind_Resume</span><br><span class="line">.L4:</span><br><span class="line">        mov     rbx, QWORD PTR [rbp-8]</span><br></pre></td></tr></table></figure><h1 id="实际测试-noexcept"><a href="#实际测试-noexcept" class="headerlink" title="实际测试 noexcept"></a>实际测试 noexcept</h1><h2 id="不处理异常"><a href="#不处理异常" class="headerlink" title="不处理异常"></a>不处理异常</h2><p>首先实验一下不处理异常时的情景：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ~Obj()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"~Obj"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Obj o;</span><br><span class="line">    inner();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ g++ testexcept.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ ./a.out</span><br><span class="line">terminate called after throwing an instance of <span class="string">'int'</span></span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>可以看到程序直接崩溃了，在抛出一个异常之后被终止了。</p><h2 id="正常捕获异常"><a href="#正常捕获异常" class="headerlink" title="正常捕获异常"></a>正常捕获异常</h2><p>再实验一次不加 noexcept 时常规处理异常的方式，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ~Obj()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"~Obj"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Obj o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        inner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"catch exception."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ g++ testexcept.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ ./a.out</span><br><span class="line">catch exception.</span><br><span class="line">~Obj</span><br></pre></td></tr></table></figure><p>异常被捕获，Obj对象被正常析构，程序正常退出了</p><h2 id="添加noexcept标记"><a href="#添加noexcept标记" class="headerlink" title="添加noexcept标记"></a>添加noexcept标记</h2><p>给函数加上noexcept标记，再测试一次：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Obj</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ~Obj()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"~Obj"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Obj o;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        inner();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(<span class="keyword">int</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"catch exception."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ g++ testexcept.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ ./a.out</span><br><span class="line">terminate called after throwing an instance of <span class="string">'int'</span></span><br><span class="line">Aborted (core dumped)</span><br></pre></td></tr></table></figure><p>我们看到加了noexcept如果抛出异常，程序会被直接终止，<code>try...catch</code> 语句就不起作用了，所以 <code>noexcept</code> 不能随便加，一定得保证确实没有异常才可以应用此优化。</p><h1 id="noexcept操作符"><a href="#noexcept操作符" class="headerlink" title="noexcept操作符"></a>noexcept操作符</h1><p>noexcept本身后面可以加一个表达式，返回一个bool值，用来判定一个函数是否会抛出异常，可以看一下这个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inner</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::boolalpha</span><br><span class="line">        &lt;&lt; <span class="string">"Is inner() noexcept? "</span> &lt;&lt; <span class="keyword">noexcept</span>(inner()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">        &lt;&lt; <span class="string">"Is test() noexcept? "</span> &lt;&lt; <span class="keyword">noexcept</span>(test()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span></span><br><span class="line">        &lt;&lt; <span class="string">"Is tes2() noexcept? "</span> &lt;&lt; <span class="keyword">noexcept</span>(test2()) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行后的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ g++ testexcept.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testExcept$ ./a.out</span><br><span class="line">Is inner() noexcept? <span class="literal">true</span></span><br><span class="line">Is <span class="built_in">test</span>() noexcept? <span class="literal">false</span></span><br><span class="line">Is tes2() noexcept? <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>test()</code> 和 <code>test2()</code> 函数的判断应该没有什么疑问，而 <code>inner()</code>明明会抛出异常，而 <code>noexcept</code>操作符却返回了false，这是因为我们在函数后面加上了 <code>noexcept</code> 说明符，这时就需要我们自己保证函数不会抛出异常了，如果你硬要抛出异常那编译器也没有办法了。</p><h1 id="noexcept的优缺点"><a href="#noexcept的优缺点" class="headerlink" title="noexcept的优缺点"></a>noexcept的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>调用标记为 <code>noexcept</code> 的函数时不需要额外记录exception handler，所以编译器拥有更高的自由度，便于生成更加高效的执行代码。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p><code>noexcept</code>关键字啊会影响接口的灵活性，如果基类某个虚函数设置为<code>noexcept</code>，派生类重写虚函数时也必须遵守，派生类中只要有一个函数遗漏了noexcept约定，就可能会导致整个程序在发生异常时被终止。</p><p>如果标记为<code>noexcept</code>的函数调用了第三方库的函数，就需要对这些第三方库都做一层封装，保证处理了第三方库所有可能抛出的异常，增大了工作量。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>noexcept</code> 是一个说明符同时也是一个操作符</li><li><code>noexcept</code> 作为说明符放在函数名后面，表明次函数不会抛出异常，等同于 <code>noexcept(true)</code></li><li><code>noexcept</code> 作为操作符时，可以用来判断一个函数是否会抛出异常，用法为 <code>noexcept(funcName)</code></li><li>当使用 <code>noexcept</code> 标记函数时，我们需要自己保证函数不会抛出异常，这样可以生成更高效的代码</li><li>如果标记了 <code>noexcept</code>函数还是抛出了异常，那么程序会直接调用 <code>std::abort()</code> 终止程序，<code>try...catch</code>都没用</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/125354000" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>曾经接受教育努力学习是打破阶级固化的长矛，如今教育更多表现为阻碍阶级跨越的护盾，不能否认好好学习可以让我们的生活变得更好，但寒门再难出贵子确实是摆在我们面前的现实，马太效应，强者愈强、弱者愈弱。条条大路通罗马，而有些人就生在罗马，我们只能靠自己微弱的锋利，去尝试突破那一层层禁锢。</p><p>2022-6-26 17:23:42</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;noexcept&lt;/code&gt; 这个说明符看起来很厉害的样子，给人一种函数加上它就可以不产生异常的感觉，但事实真的如此吗？它真的能消除一切异常吗？答案是不能！它只是函数的一种说明，作为开发者我们需要自己保证标记了 &lt;code&gt;noexcept&lt;/code&gt; 的函数不产生异常。啥？这不是没事找事吗？&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="noexcept" scheme="http://AlbertGithubHome.github.io/blog/tags/noexcept/"/>
    
      <category term="terminate" scheme="http://AlbertGithubHome.github.io/blog/tags/terminate/"/>
    
      <category term="try-catch" scheme="http://AlbertGithubHome.github.io/blog/tags/try-catch/"/>
    
  </entry>
  
  <entry>
    <title>C++17新语法之if和switch语句中可以初始化变量啦</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/06/18/C-17%E6%96%B0%E8%AF%AD%E6%B3%95%E4%B9%8Bif%E5%92%8Cswitch%E8%AF%AD%E5%8F%A5%E4%B8%AD%E5%8F%AF%E4%BB%A5%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%98%E9%87%8F%E5%95%A6/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/06/18/C-17新语法之if和switch语句中可以初始化变量啦/</id>
    <published>2022-06-18T14:16:40.000Z</published>
    <updated>2022-06-18T17:55:55.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在看一些c++代码时偶然间发现一些示例，在if语句的小括号内居然出现了分号，难道这一段是伪代码吗？之前从来没见过这种写法，然后写了一个例子，用最新的编译器编译后发现真的是正常的代码，并且可以成功运行，然后脑袋有个声音一闪而过，是不是一直就支持这种写法，只是我不知道而已，后来几经周折，终于发现真相，原来这其实是C++17新的语法。</p><a id="more"></a><h1 id="if-语句本来的样子"><a href="#if-语句本来的样子" class="headerlink" title="if 语句本来的样子"></a>if 语句本来的样子</h1><p>C++17之前 <code>if</code> 语句的小括号内只能放判断逻辑，<code>if (condition) { /* ... */ }</code> 也就是这样，所以如果想使用一个变量进行判断，那么这个变量必须在if语句之前进行定义，比如我们常常使用的查找map元素的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = mp.find(<span class="string">"key"</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != mp.end())</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="if-语句新能力"><a href="#if-语句新能力" class="headerlink" title="if 语句新能力"></a>if 语句新能力</h1><p>从C++17开始，<code>if</code> 语句的小括号之中也可以初始化变量了，语法为 <code>if (initializer; condition) { /* ... */ }</code>，这样做的好处就是可以更加精细的控制变量的作用域，使代码看起来更加紧凑，比如上面的例子可以改写为：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> it = mp.find(<span class="string">"key"</span>); it != mp.end())</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> defaultValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最直观的感受就是少了一行代码，但是更重要的特点还是他把变量 <code>it</code> 的作用域限制在了 <code>if</code> 语句之内。</p><p>另外就是能一定程度上解决代码缩进层数太多的问题，这也是实际开发过程中遇到的问题，比如下面这段代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">auto</span> it = mp.find(<span class="string">"key"</span>);</span><br><span class="line">    <span class="keyword">if</span> (it != mp.end())</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cfg = GetConfig();</span><br><span class="line">        <span class="keyword">if</span> (cfg)</span><br><span class="line">            <span class="keyword">return</span> defaultValue1;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> defaultValue2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在C++17之前的代码中，因为 <code>if</code> 语句中不能包含初始化变量的逻辑，所以会造成 <code>if</code> 嵌套层层递进，当这种条件太多时，缩进层数太多导致代码可读性变差，使用C++17的语法再改进一下就变成了下面这样，逻辑更加清晰了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">auto</span> it = mp.find(<span class="string">"key"</span>); it != mp.end())</span><br><span class="line">        <span class="keyword">return</span> it-&gt;second;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">int</span> cfg = GetConfig(); cfg)</span><br><span class="line">        <span class="keyword">return</span> defaultValue1;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> defaultValue2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>switch</code> 语句也是相同的能力扩展，就不再展开说了，这里贴一个 <a href="https://en.cppreference.com/w/cpp/language/switch" target="_blank" rel="noopener">cppreference - switch</a> 上的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Device</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">enum</span> State &#123; SLEEP, READY, BAD &#125;;</span><br><span class="line">        <span class="function"><span class="keyword">auto</span> <span class="title">state</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> m_state; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        State m_state&#123;&#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">auto</span> dev = Device&#123;&#125;; dev.state())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> Device::SLEEP:</span><br><span class="line">            <span class="comment">/*...*/</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Device::READY:</span><br><span class="line">            <span class="comment">/*...*/</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Device::BAD:</span><br><span class="line">            <span class="comment">/*...*/</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="似曾相识在go中"><a href="#似曾相识在go中" class="headerlink" title="似曾相识在go中"></a>似曾相识在go中</h1><p>这个在if中既初始化又进行判断的语法，之前在go中也用过，类似的需求在go中的写法是：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xxx</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> value := mp[<span class="string">"key"</span>]; value != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很像？其实在golang中更规范的用法是使用map查找的第二个返回值来判断元素是否存在，就像下面这样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xxx</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> value, ok := mp[<span class="string">"key"</span>]; ok &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defaultValue</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于语言的思考"><a href="#关于语言的思考" class="headerlink" title="关于语言的思考"></a>关于语言的思考</h1><p>看到上面这种golang和c++17的对比，会发现语言之间都在相互促进，这些所谓的高级语言，总能在其中一种语言中发现另一种语言的影子，也就是说在某些方面上他们是“趋同”的，可能在不久的将来会出现一种“超高级语言”，类似于C++模板机制，<code>C++</code>、<code>Golang</code>、<code>Python</code> 这些语言作为一种类型，传递到超高级语言之中，编写或者描述完功能逻辑后，自动生成对应语言的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SuperLanguageTemplate&lt;C++/Golang/Python&gt;</span><br><span class="line">[AutoGenerateByFollowingDescription]</span><br><span class="line">&#123;</span><br><span class="line">    / * ... * /</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>if</code> 和 <code>switch</code> 语句都可以在逻辑判断前初始化变量，变量的定义域可以更精细的控制</li><li>编程语言之间相互“借鉴”，部分语法长得越来越像，最后不知道会不会归于统一</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/125249573" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>人生并不是不断失去，反过来看，其实人生应该是不断拥有，1秒，2秒，3秒，这些本就不一定属于你的时间，作为馈赠出现在了你的生命里~</p><p>2022-6-19 01:44:55</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天在看一些c++代码时偶然间发现一些示例，在if语句的小括号内居然出现了分号，难道这一段是伪代码吗？之前从来没见过这种写法，然后写了一个例子，用最新的编译器编译后发现真的是正常的代码，并且可以成功运行，然后脑袋有个声音一闪而过，是不是一直就支持这种写法，只是我不知道而已，后来几经周折，终于发现真相，原来这其实是C++17新的语法。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="if" scheme="http://AlbertGithubHome.github.io/blog/tags/if/"/>
    
      <category term="switch" scheme="http://AlbertGithubHome.github.io/blog/tags/switch/"/>
    
      <category term="initializer" scheme="http://AlbertGithubHome.github.io/blog/tags/initializer/"/>
    
  </entry>
  
  <entry>
    <title>了解git裸仓库并利用post-receive自动化部署</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/06/12/%E4%BA%86%E8%A7%A3git%E8%A3%B8%E4%BB%93%E5%BA%93%E5%B9%B6%E5%88%A9%E7%94%A8post-receive%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/06/12/了解git裸仓库并利用post-receive自动化部署/</id>
    <published>2022-06-12T07:23:08.000Z</published>
    <updated>2022-06-12T14:01:34.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>【裸仓库】指的是使用 <code>git init --bare</code> 命令得到的仓库，是对这种操作结果的一种直译，这个词对于刚接触 git 软件的小伙伴来说可能是第一次听说，而我也是最近实际操作了几次才渐渐理解，下面解释一下什么是裸仓库，以及为什么要使用它，有理解不对的地方还请大家指正。</p><a id="more"></a><h1 id="普通库和裸仓库"><a href="#普通库和裸仓库" class="headerlink" title="普通库和裸仓库"></a>普通库和裸仓库</h1><h2 id="普通库"><a href="#普通库" class="headerlink" title="普通库"></a>普通库</h2><p>在解释裸仓库之前，还是先来看看 <code>git init</code>命令创建一个普通仓库的目录结构:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos data]<span class="comment"># git init simple</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /data/simple/.git/</span><br><span class="line">[root@VM-0-3-centos data]<span class="comment"># cd simple/</span></span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment"># touch README.md</span></span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment"># cd ..</span></span><br><span class="line">[root@VM-0-3-centos data]<span class="comment"># tree -a simple/</span></span><br><span class="line">simple/</span><br><span class="line">|-- .git</span><br><span class="line">|   |-- branches</span><br><span class="line">|   |-- config</span><br><span class="line">|   |-- description</span><br><span class="line">|   |-- HEAD</span><br><span class="line">|   |-- hooks</span><br><span class="line">|   |   |-- applypatch-msg.sample</span><br><span class="line">|   |   |-- commit-msg.sample</span><br><span class="line">|   |   |-- post-update.sample</span><br><span class="line">|   |   |-- pre-applypatch.sample</span><br><span class="line">|   |   |-- pre-commit.sample</span><br><span class="line">|   |   |-- prepare-commit-msg.sample</span><br><span class="line">|   |   |-- pre-push.sample</span><br><span class="line">|   |   |-- pre-rebase.sample</span><br><span class="line">|   |   `-- update.sample</span><br><span class="line">|   |-- info</span><br><span class="line">|   |   `-- exclude</span><br><span class="line">|   |-- objects</span><br><span class="line">|   |   |-- info</span><br><span class="line">|   |   `-- pack</span><br><span class="line">|   `-- refs</span><br><span class="line">|       |-- heads</span><br><span class="line">|       `-- tags</span><br><span class="line">`-- README.md</span><br><span class="line"></span><br><span class="line">10 directories, 14 files</span><br></pre></td></tr></table></figure><p>通过上述命令操作后可以看到，<code>git init simple</code> 操作之后，创建了一个名为 <code>simple</code> 的库，<code>simple</code> 目录下还有一个 <code>.git</code> 子目录，其中包含了git系统常用的文件，在 <code>.git</code> 目录外是我们的工作区，可以存放我们库中待更新的文件，修改之后可以通过 <code>git add</code>，<code>git commit</code> 等命令更新 <code>.git</code> 中的内容，简单来说普通库就是在工作目录 <code>simple</code> 中还包括一个 <code>.git</code> 目录，下面添加一个文件试试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos simple]<span class="comment"># git add README.md</span></span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment"># git commit -m"add readme file"</span></span><br><span class="line">[master (root-commit) 9a9b255] add readme file</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment"># tree . -a</span></span><br><span class="line">.</span><br><span class="line">|-- .git</span><br><span class="line">|   |-- branches</span><br><span class="line">|   |-- COMMIT_EDITMSG</span><br><span class="line">|   |-- config</span><br><span class="line">|   |-- description</span><br><span class="line">|   |-- HEAD</span><br><span class="line">|   |-- hooks</span><br><span class="line">|   |   |-- applypatch-msg.sample</span><br><span class="line">|   |   |-- commit-msg.sample</span><br><span class="line">|   |   |-- post-update.sample</span><br><span class="line">|   |   |-- pre-applypatch.sample</span><br><span class="line">|   |   |-- pre-commit.sample</span><br><span class="line">|   |   |-- prepare-commit-msg.sample</span><br><span class="line">|   |   |-- pre-push.sample</span><br><span class="line">|   |   |-- pre-rebase.sample</span><br><span class="line">|   |   `-- update.sample</span><br><span class="line">|   |-- index</span><br><span class="line">|   |-- info</span><br><span class="line">|   |   `-- exclude</span><br><span class="line">|   |-- logs</span><br><span class="line">|   |   |-- HEAD</span><br><span class="line">|   |   `-- refs</span><br><span class="line">|   |       `-- heads</span><br><span class="line">|   |           `-- master</span><br><span class="line">|   |-- objects</span><br><span class="line">|   |   |-- 9a</span><br><span class="line">|   |   |   `-- 9b255b81e994fa9af2b9c7ecbd852eb716ad6c</span><br><span class="line">|   |   |-- e6</span><br><span class="line">|   |   |   `-- 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br><span class="line">|   |   |-- f9</span><br><span class="line">|   |   |   `-- 3e3a1a1525fb5b91020da86e44810c87a2d7bc</span><br><span class="line">|   |   |-- info</span><br><span class="line">|   |   `-- pack</span><br><span class="line">|   `-- refs</span><br><span class="line">|       |-- heads</span><br><span class="line">|       |   `-- master</span><br><span class="line">|       `-- tags</span><br><span class="line">`-- README.md</span><br><span class="line"></span><br><span class="line">16 directories, 22 files</span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>添加文件之后，<code>.git</code> 目录中的内容发生了变化，多了3个新的object。</p><h2 id="裸仓库"><a href="#裸仓库" class="headerlink" title="裸仓库"></a>裸仓库</h2><p>还是先从目录结构入手，我们使用 <code>git init --bare</code> 命令创建一个裸仓库，目录结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos data]<span class="comment"># git init --bare bare.git</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /data/bare.git/</span><br><span class="line">[root@VM-0-3-centos data]<span class="comment"># tree bare.git/ -a</span></span><br><span class="line">bare.git/</span><br><span class="line">|-- branches</span><br><span class="line">|-- config</span><br><span class="line">|-- description</span><br><span class="line">|-- HEAD</span><br><span class="line">|-- hooks</span><br><span class="line">|   |-- applypatch-msg.sample</span><br><span class="line">|   |-- commit-msg.sample</span><br><span class="line">|   |-- post-update.sample</span><br><span class="line">|   |-- pre-applypatch.sample</span><br><span class="line">|   |-- pre-commit.sample</span><br><span class="line">|   |-- prepare-commit-msg.sample</span><br><span class="line">|   |-- pre-push.sample</span><br><span class="line">|   |-- pre-rebase.sample</span><br><span class="line">|   `-- update.sample</span><br><span class="line">|-- info</span><br><span class="line">|   `-- exclude</span><br><span class="line">|-- objects</span><br><span class="line">|   |-- info</span><br><span class="line">|   `-- pack</span><br><span class="line">`-- refs</span><br><span class="line">    |-- heads</span><br><span class="line">    `-- tags</span><br><span class="line"></span><br><span class="line">9 directories, 13 files</span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>从目录结构来看裸仓库和普通库很像，但是仔细对比你会发现，这个裸仓库相比普通库少了一层目录，库目录 <code>bare.git</code> 内直接就是之前普通库 <code>.git</code> 目录下的内容，也就是说在 <code>git</code> 目录外层没有了工作目录来进行文件的增删改操作，那么我们仿照普通库操作在这个目录下提交一个文件会怎样呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos data]<span class="comment"># cd bare.git/</span></span><br><span class="line">[root@VM-0-3-centos bare.git]<span class="comment"># touch README.md</span></span><br><span class="line">[root@VM-0-3-centos bare.git]<span class="comment"># git add README.md</span></span><br><span class="line">fatal: This operation must be run <span class="keyword">in</span> a work tree</span><br><span class="line">[root@VM-0-3-centos bare.git]<span class="comment"># git status</span></span><br><span class="line">fatal: This operation must be run <span class="keyword">in</span> a work tree</span><br><span class="line">[root@VM-0-3-centos bare.git]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>通过操作发现这个裸仓库不允许增删改库内的文件，甚至连 <code>git status</code> 这种命令都无法使用，统一提示了 <code>fatal: This operation must be run in a work tree</code> 这句话，告诉用户这些命令都必须在工作区内操作，既然不能修改，那么这个裸仓库就是“只读”的，那么它还有什么用呢？</p><p>虽然裸仓库不允许直接修改，但是可以作为服务端远程仓库，在本地克隆这个远程仓库之后再进行修改，这也是最常见的应用方式，总结来说，普通库和裸仓库的区别就是：普通库拥有工作目录，并且工作目录中可以存放正常编辑和提交的文件，而裸库只存放这些文件的commit记录，不允许用户直接在上面进行各种git操作。</p><h1 id="使用裸仓库"><a href="#使用裸仓库" class="headerlink" title="使用裸仓库"></a>使用裸仓库</h1><p>前面提到裸仓库不能直接修改，但是我们可以采取修改克隆后库文件的方式达到更新的目的，下面列举两种常见的方式：</p><h2 id="使用-git-remote-add-方式关联"><a href="#使用-git-remote-add-方式关联" class="headerlink" title="使用 git remote add 方式关联"></a>使用 git remote add 方式关联</h2><p>这种方式需要我们先在本地初始化一个普通库，再使用 <code>git remote add</code> 命令建立关联（PowerShell命令行操作，git命令是相同的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>&gt; git init barebyremote</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> D:/data/maingit/<span class="built_in">test</span>/barebyremote/.git/</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>&gt; <span class="built_in">cd</span> .\barebyremote\</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt; git remote add origin root@82.156.125.196:/data/bare.git</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt; new-item README.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\data\maingit\<span class="built_in">test</span>\barebyremote</span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">-a----        2022/6/12     16:51              0 README.md</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt; git add .\README.md</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt; git commit -m<span class="string">"add readme file"</span></span><br><span class="line">[master (root-commit) f1c41db] add readme file</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 README.md</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt; git push -u origin master</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (3/3), 223 bytes | 223.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To 82.156.125.196:/data/bare.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt; git <span class="built_in">log</span> -3</span><br><span class="line">commit f1c41db4699f71e9750d8d6aa2c01875ac6d4a14 (HEAD -&gt; master, origin/master)</span><br><span class="line">Author: albert &lt;albert@163.com&gt;</span><br><span class="line">Date:   Sun Jun 12 16:51:34 2022 +0800</span><br><span class="line"></span><br><span class="line">    add readme file</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyremote&gt;</span><br></pre></td></tr></table></figure><h2 id="使用-git-clone-直接克隆"><a href="#使用-git-clone-直接克隆" class="headerlink" title="使用 git clone 直接克隆"></a>使用 git clone 直接克隆</h2><p>使用克隆方式时，按照普通库来操作就可以（PowerShell命令行操作，git命令是相同的）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>&gt; git <span class="built_in">clone</span> root@82.156.125.196:/data/bare.git barebyclone</span><br><span class="line">Cloning into <span class="string">'barebyclone'</span>...</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>&gt; <span class="built_in">cd</span> .\barebyclone\</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyclone&gt; git <span class="built_in">log</span> -3</span><br><span class="line">commit f1c41db4699f71e9750d8d6aa2c01875ac6d4a14 (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: albert &lt;albert@163.com&gt;</span><br><span class="line">Date:   Sun Jun 12 16:51:34 2022 +0800</span><br><span class="line"></span><br><span class="line">    add readme file</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\barebyclone&gt; ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\data\maingit\<span class="built_in">test</span>\barebyclone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">-a----        2022/6/12     16:57              0 README.md</span><br></pre></td></tr></table></figure><h1 id="为什么要使用裸仓库"><a href="#为什么要使用裸仓库" class="headerlink" title="为什么要使用裸仓库"></a>为什么要使用裸仓库</h1><p>既然裸仓库相比于普通库只是少了工作目录，那么我们直接用普通库作为远程仓库可不可以呢？结论是可以，但是不建议，我们来实际操作一下，利用刚刚的建立的 <code>simple</code> 作为远端库，我们在本地clone后修改，再上传看看会遇到什么问题。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>&gt; git <span class="built_in">clone</span> root@82.156.125.196:/data/simple simple</span><br><span class="line">remote: Counting objects: 3, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>&gt; <span class="built_in">cd</span> .\simple\</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; git <span class="built_in">log</span> -3</span><br><span class="line">commit 9a9b255b81e994fa9af2b9c7ecbd852eb716ad6c (HEAD -&gt; master, origin/master, origin/HEAD)</span><br><span class="line">Author: albert &lt;albert@example.com&gt;</span><br><span class="line">Date:   Sun Jun 12 15:53:30 2022 +0800</span><br><span class="line"></span><br><span class="line">    add readme file</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; new-item .gitignore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\data\maingit\<span class="built_in">test</span>\simple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">-a----        2022/6/12     17:20              0 .gitignore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; git add .\.gitignore</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; git commit -m<span class="string">"add gitignore file"</span></span><br><span class="line">[master b5a679f] add gitignore file</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 .gitignore</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; git push</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (2/2), 263 bytes | 263.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 2 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: error: refusing to update checked out branch: refs/heads/master</span><br><span class="line">remote: error: By default, updating the current branch <span class="keyword">in</span> a non-bare repository</span><br><span class="line">remote: error: is denied, because it will make the index and work tree inconsistent</span><br><span class="line">remote: error: with what you pushed, and will require <span class="string">'git reset --hard'</span> to match</span><br><span class="line">remote: error: the work tree to HEAD.</span><br><span class="line">remote: error:</span><br><span class="line">remote: error: You can <span class="built_in">set</span> <span class="string">'receive.denyCurrentBranch'</span> configuration variable to</span><br><span class="line">remote: error: <span class="string">'ignore'</span> or <span class="string">'warn'</span> <span class="keyword">in</span> the remote repository to allow pushing into</span><br><span class="line">remote: error: its current branch; however, this is not recommended unless you</span><br><span class="line">remote: error: arranged to update its work tree to match what you pushed <span class="keyword">in</span> some</span><br><span class="line">remote: error: other way.</span><br><span class="line">remote: error:</span><br><span class="line">remote: error: To squelch this message and still keep the default behaviour, <span class="built_in">set</span></span><br><span class="line">remote: error: <span class="string">'receive.denyCurrentBranch'</span> configuration variable to <span class="string">'refuse'</span>.</span><br><span class="line">To 82.156.125.196:/data/simple</span><br><span class="line"> ! [remote rejected] master -&gt; master (branch is currently checked out)</span><br><span class="line">error: failed to push some refs to <span class="string">'root@82.156.125.196:/data/simple'</span></span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt;</span><br></pre></td></tr></table></figure><p>克隆之后正常的修改和提交都没有问题，但是 <code>git push</code>的时候报错，原因提示 <code>! [remote rejected] master -&gt; master (branch is currently checked out)</code>，提示当前的 <code>master</code> 分支是检出状态，不允许直接推送。</p><p>仔细想想就会有些思路，普通库实际上包含两份数据的，一份在 <code>.git</code> 目录中以object形式存在，一份在工作目录中以源文件形式存在，我们每次使用 <code>git</code> 命令，可以保证工作目录内文件和 <code>.git</code> 目录数据是一致的，但是如果将普通库作为远端时，在下游提交数据时，远端库中的 <code>.git</code> 目录会直接更新，但是工作区却不知道此时谁在用，不能直接更新覆盖，这就造成了数据不一致的情况。</p><p>如果非得使用普通库作为服务端仓库，那么可以参照上面报错的建议，在采用额外方式保证一致性的同时，修改服务端库的 <code>receive.denyCurrentBranch</code> 这个git配置项，或者将服务端分支切换到一个无人使用的分支上，这样下游端就可以直接推送了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos data]<span class="comment"># cd simple/</span></span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment"># git checkout -b unless</span></span><br><span class="line">Switched to a new branch <span class="string">'unless'</span></span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment"># git branch -a</span></span><br><span class="line">  master</span><br><span class="line">* unless</span><br><span class="line">[root@VM-0-3-centos simple]<span class="comment">#</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; <span class="built_in">pwd</span></span><br><span class="line"></span><br><span class="line">Path</span><br><span class="line">----</span><br><span class="line">D:\data\maingit\<span class="built_in">test</span>\simple</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt; git push</span><br><span class="line">Enumerating objects: 3, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (3/3), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (2/2), 263 bytes | 263.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 2 (delta 0), reused 0 (delta 0)</span><br><span class="line">To 82.156.125.196:/data/simple</span><br><span class="line">   9a9b255..b5a679f  master -&gt; master</span><br><span class="line">PS-Win D:\data\maingit\<span class="built_in">test</span>\simple&gt;</span><br></pre></td></tr></table></figure><h1 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h1><p>利用 <code>post-receive</code> 进行自动化部署的原理就是，<code>git</code> 本身提供了一些脚本接口，在某些 <code>git</code> 操作发生时，会调用预定脚本执行命令，相当于给 <code>git</code> 用户开放了接口，我们可以修改 <code>post-receive</code> 脚本，在修改提交后自动部署最新内容，进一步实现自动化集成。</p><p>因为前面已经介绍了很多有关裸仓库的知识，接下来我只叙述操作步骤，看了之前的介绍，这部分内容应该没什么难度了。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>服务端建立裸仓库，在接收到新的提交时，自动将项目部署到<code>/data/publish/game</code> 目录下</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="服务端远端操作"><a href="#服务端远端操作" class="headerlink" title="服务端远端操作"></a>服务端远端操作</h3><p>建立裸仓库 <code>/data/repo/game.git</code>，对应部署目录是 <code>/data/publish/game</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos data]<span class="comment"># mkdir -p /data/repo</span></span><br><span class="line">[root@VM-0-3-centos data]<span class="comment"># mkdir -p /data/publish/game</span></span><br><span class="line">[root@VM-0-3-centos data]<span class="comment"># cd repo/</span></span><br><span class="line">[root@VM-0-3-centos repo]<span class="comment"># git init --bare game.git</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /data/repo/game.git/</span><br><span class="line">[root@VM-0-3-centos repo]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>新建 <code>/data/repo/game.git/hooks/post-receive</code> 脚本，可以拷贝 <code>post-receive.sample</code> 进行修改，脚本内编写内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定部署目录</span></span><br><span class="line">DIR=/data/publish/game</span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> clean -fd</span><br><span class="line"><span class="comment"># 强制检出</span></span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> checkout --force</span><br><span class="line"><span class="comment"># 运行启动脚本</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span></span><br><span class="line">chmod 755 start.sh</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure><h3 id="客户端本地操作"><a href="#客户端本地操作" class="headerlink" title="客户端本地操作"></a>客户端本地操作</h3><p>本地项目普通库目录结构如下，启动脚本为 <code>start.sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc MINGW64 /d/data/maingit/<span class="built_in">test</span>/game (master)</span><br><span class="line">$ tree game/ -a</span><br><span class="line">game/</span><br><span class="line">├── .git</span><br><span class="line">│   ├── COMMIT_EDITMSG</span><br><span class="line">│   ├── config</span><br><span class="line">│   ├── description</span><br><span class="line">│   ├── HEAD</span><br><span class="line">│   ├── hooks</span><br><span class="line">│   │   ├── applypatch-msg.sample</span><br><span class="line">│   │   ├── commit-msg.sample</span><br><span class="line">│   │   ├── fsmonitor-watchman.sample</span><br><span class="line">│   │   ├── post-update.sample</span><br><span class="line">│   │   ├── pre-applypatch.sample</span><br><span class="line">│   │   ├── pre-commit.sample</span><br><span class="line">│   │   ├── pre-merge-commit.sample</span><br><span class="line">│   │   ├── prepare-commit-msg.sample</span><br><span class="line">│   │   ├── pre-push.sample</span><br><span class="line">│   │   ├── pre-rebase.sample</span><br><span class="line">│   │   ├── pre-receive.sample</span><br><span class="line">│   │   └── update.sample</span><br><span class="line">│   ├── index</span><br><span class="line">│   ├── info</span><br><span class="line">│   │   └── exclude</span><br><span class="line">│   ├── logs</span><br><span class="line">│   │   ├── HEAD</span><br><span class="line">│   │   └── refs</span><br><span class="line">│   │       └── heads</span><br><span class="line">│   │           └── master</span><br><span class="line">│   ├── objects</span><br><span class="line">│   │   ├── 53</span><br><span class="line">│   │   │   └── dd8b65afe02329eb73cbe142b9359ffd2c4c70</span><br><span class="line">│   │   ├── 68</span><br><span class="line">│   │   │   └── 31f81503989c192a10b47ecf48bc6bfe7c2cf4</span><br><span class="line">│   │   ├── 81</span><br><span class="line">│   │   │   └── aaa9093e1d32996c53766fa5f943e3ea6c79b0</span><br><span class="line">│   │   ├── e6</span><br><span class="line">│   │   │   └── 9de29bb2d1d6434b8b29ae775ad8c2e48c5391</span><br><span class="line">│   │   ├── info</span><br><span class="line">│   │   └── pack</span><br><span class="line">│   └── refs</span><br><span class="line">│       ├── heads</span><br><span class="line">│       │   └── master</span><br><span class="line">│       └── tags</span><br><span class="line">├── README.md</span><br><span class="line">└── start.sh</span><br><span class="line"></span><br><span class="line">16 directories, 27 files</span><br><span class="line">albert@home-pc MINGW64 /d/data/maingit/<span class="built_in">test</span>/game (master)</span><br><span class="line">$ cat start.sh</span><br><span class="line">cp README.md test.txt</span><br></pre></td></tr></table></figure><h3 id="与远端裸仓库建立关联"><a href="#与远端裸仓库建立关联" class="headerlink" title="与远端裸仓库建立关联"></a>与远端裸仓库建立关联</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc MINGW64 /d/data/maingit/<span class="built_in">test</span>/game (master)</span><br><span class="line">$ git remote add origin root@82.156.125.196:/data/repo/game.git</span><br><span class="line"></span><br><span class="line">albert@home-pc MINGW64 /d/data/maingit/<span class="built_in">test</span>/game (master)</span><br><span class="line">$ git push -u origin master</span><br><span class="line">Enumerating objects: 4, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads</span><br><span class="line">Compressing objects: 100% (2/2), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (4/4), 286 bytes | 286.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 4 (delta 0), reused 0 (delta 0)</span><br><span class="line">To 82.156.125.196:/data/repo/game.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch <span class="string">'master'</span> <span class="built_in">set</span> up to track remote branch <span class="string">'master'</span> from <span class="string">'origin'</span>.</span><br></pre></td></tr></table></figure><p>至此自动化部署环境已建立，当本地 game 仓库推送更新时，远端服务器会自动更新部署</p><h1 id="快速回顾"><a href="#快速回顾" class="headerlink" title="快速回顾"></a>快速回顾</h1><p>文中主要命令收于此节，方便自己后期快速查找操作</p><ul><li>服务端远程新建裸仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/repo</span><br><span class="line">git init --bare game.git</span><br></pre></td></tr></table></figure><ul><li>本地库与远端库建立关联</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin root@82.156.125.196:/data/repo/game.git</span><br></pre></td></tr></table></figure><ul><li>新建或修改 <code>hooks</code> 目录下 <code>post-receive</code> 脚本</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DIR=/data/publish/game</span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> clean -fd</span><br><span class="line">git --work-tree=<span class="variable">$&#123;DIR&#125;</span> checkout --force</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DIR&#125;</span></span><br><span class="line">chmod 755 start.sh</span><br><span class="line">./start.sh</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>裸仓库是一个只包含提交记录，没有工作目录的仓库，适合用来做服务端远程仓库</li><li>裸仓库不能直接在仓库中执行修改文件的git命令，可以在客户端克隆之后修改之后再进行提交</li><li>自动化部署利用了git服务器提供的脚本接口，当新的推送达到时会调用 <code>post-receive</code> 脚本</li><li>配置自动化部署环境时需要注意，如果没有配置ssh免密码登陆，需要在push代码的时候输入密码</li><li>另外自动化部署时要注意各个文件及目录的权限，因为要运行脚本，要保证推送用户有足够的运行权限</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/125157732" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>每个人都有自己的选择，很多看似突如其来的决定，往往都是深思熟虑后的结果，每个人在自己的旅途中不断的分类、选择、分类、选择，无法逃离的坚持到最后一刻~</p><p>2022-6-12 20:19:30</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;【裸仓库】指的是使用 &lt;code&gt;git init --bare&lt;/code&gt; 命令得到的仓库，是对这种操作结果的一种直译，这个词对于刚接触 git 软件的小伙伴来说可能是第一次听说，而我也是最近实际操作了几次才渐渐理解，下面解释一下什么是裸仓库，以及为什么要使用它，有理解不对的地方还请大家指正。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/categories/Git/"/>
    
    
      <category term="bare" scheme="http://AlbertGithubHome.github.io/blog/tags/bare/"/>
    
      <category term="clone" scheme="http://AlbertGithubHome.github.io/blog/tags/clone/"/>
    
      <category term="post_receive" scheme="http://AlbertGithubHome.github.io/blog/tags/post-receive/"/>
    
      <category term="deploy" scheme="http://AlbertGithubHome.github.io/blog/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下常用的查找命令find、which、grep</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/06/05/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E5%91%BD%E4%BB%A4find%E3%80%81which%E3%80%81grep/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/06/05/linux环境下常用的查找命令find、which、grep/</id>
    <published>2022-06-05T15:07:29.000Z</published>
    <updated>2022-06-06T17:38:33.750Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>查找是运维工作的很重要的一部分，不管是文件查找，还是内容查找，在日常开发维护过程中都常常用到，本文把一些日常用到的查找命令总结到一起，通过对比来学习异同点，进而达到 增强记忆的目的。</p><a id="more"></a><p>本文只是想对常用命令进行一个罗列，并不会对每个命令进行详细的解释，如果想看更详细的用法，直接查询 <code>man</code> 手册是一个不错的选择，我们接下来会说到通用文件查找的 <code>find</code> 命令，快速定位文件的 <code>locate</code> 命令，仅用于搜索程序和文档的 <code>whereis</code> 命令，用于查找系统命令的 <code>which</code> 命令，最后是用于文件内容查找的 <code>grep</code> 命令。</p><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find [指定目录] 搜索条件 [指定动作]</span><br></pre></td></tr></table></figure><h2 id="具体示例"><a href="#具体示例" class="headerlink" title="具体示例"></a>具体示例</h2><ul><li>全局查找tendis文件所在目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># find / -name tendis</span></span><br><span class="line">/root/tendis</span><br></pre></td></tr></table></figure><ul><li>当前目录按指定名找到tendis并打印文件信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># find . -name tendis -ls</span></span><br><span class="line">918146    4 drwxr-xr-x   4 root     root         4096 May  1  2021 ./tendis</span><br></pre></td></tr></table></figure><ul><li>全局查找test开头的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># find / -name 'test*'</span></span><br><span class="line">/boot/grub2/i386-pc/testspeed.mod</span><br><span class="line">/boot/grub2/i386-pc/test.mod</span><br><span class="line">/boot/grub2/i386-pc/test_blockarg.mod</span><br><span class="line">/boot/grub2/i386-pc/testload.mod</span><br><span class="line">/usr/lib/modules/3.10.0-1127.19.1.el7.x86_64/kernel/drivers/ntb/<span class="built_in">test</span></span><br><span class="line">/usr/lib/python2.7/site-packages/jinja2/tests.pyc</span><br><span class="line">/usr/lib/python2.7/site-packages/jinja2/tests.py</span><br><span class="line">/usr/lib/python2.7/site-packages/jinja2/testsuite</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>当前目录下查找所有的目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># find . -type d</span></span><br><span class="line">.</span><br><span class="line">./tendis</span><br><span class="line">./tendis/scripts</span><br><span class="line">./tendis/bin</span><br><span class="line">./tendis/bin/deps</span><br><span class="line">./extundelete-0.2.4</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>查找大于1M的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># find . -size +1M -ls</span></span><br><span class="line">918152 164712 -rwxr-xr-x   1 root     root     168663910 Dec 17  2020 ./tendis/bin/tendisplus_static</span><br><span class="line">918151 18036 -rwxr-xr-x   1 root     root     18464898 Dec 17  2020 ./tendis/bin/binlog_tool</span><br><span class="line">918148 2576 -rwxr-xr-x   1 root     root      2635759 Dec 17  2020 ./tendis/bin/redis-cli</span><br><span class="line">918150 10896 -rwxr-xr-x   1 root     root     11154937 Dec 17  2020 ./tendis/bin/deps/libstdc++.so.6</span><br><span class="line">918145 165076 -rwxr-xr-x   1 root     root     169036319 Dec 17  2020 ./tendis/bin/tendisplus</span><br><span class="line">1311915 1860 -rw-r--r--   1 root     root      1904320 Nov 28  2021 ./extundelete-0.2.4/src/extundelete-extundelete.o</span><br><span class="line">1311926 1296 -rwxr-xr-x   1 root     root      1323360 Nov 28  2021 ./extundelete-0.2.4/src/extundelete</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>查找10分钟内修改的普通文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># find . -type f -mmin -10</span></span><br><span class="line">./b.txt</span><br><span class="line">./.bash_history</span><br></pre></td></tr></table></figure><h1 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h1><p>locate 也是用来查找文件的，只不过它不是通过文件系统来找，而是通过自己的数据库来找，默认在 <code>/var/lib/mlocate/mlocate.db</code>，每天自动更新一次，所以查不到最新变动的文件，可以手动通过 <code>updatedb</code> 来更新数据库（我查了一下才2M很小的）。</p><h2 id="命令格式-1"><a href="#命令格式-1" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">locate [选项] [匹配串]</span><br></pre></td></tr></table></figure><h2 id="具体示例-1"><a href="#具体示例-1" class="headerlink" title="具体示例"></a>具体示例</h2><ul><li>查找家目录下包含te的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># locate ~/te</span></span><br><span class="line">/root/tendis</span><br><span class="line">/root/test.iso</span><br><span class="line">/root/tendis/bin</span><br><span class="line">/root/tendis/file.xml</span><br><span class="line">/root/tendis/scripts</span><br><span class="line">/root/tendis/bin/binlog_tool</span><br><span class="line">/root/tendis/bin/deps</span><br><span class="line">/root/tendis/bin/redis-cli</span><br><span class="line">/root/tendis/bin/tendisplus</span><br><span class="line">/root/tendis/bin/tendisplus_static</span><br><span class="line">/root/tendis/bin/deps/libstdc++.so.6</span><br><span class="line">/root/tendis/scripts/start.sh</span><br><span class="line">/root/tendis/scripts/stop.sh</span><br><span class="line">/root/tendis/scripts/tendisplus.conf</span><br></pre></td></tr></table></figure><ul><li>不区分大小写查找</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># locate -i ~/tE</span></span><br><span class="line">/root/TE.txt</span><br><span class="line">/root/tendis</span><br><span class="line">/root/test.iso</span><br><span class="line">/root/tendis/bin</span><br><span class="line">/root/tendis/file.xml</span><br><span class="line">/root/tendis/scripts</span><br><span class="line">/root/tendis/bin/binlog_tool</span><br><span class="line">/root/tendis/bin/deps</span><br><span class="line">/root/tendis/bin/redis-cli</span><br><span class="line">/root/tendis/bin/tendisplus</span><br><span class="line">/root/tendis/bin/tendisplus_static</span><br><span class="line">/root/tendis/bin/deps/libstdc++.so.6</span><br><span class="line">/root/tendis/scripts/start.sh</span><br><span class="line">/root/tendis/scripts/stop.sh</span><br><span class="line">/root/tendis/scripts/tendisplus.conf</span><br></pre></td></tr></table></figure><h1 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h1><p>whereis 只能用于二进制文件、man手册和源代码文件的搜索，默认返回所有信息。</p><h2 id="命令格式-2"><a href="#命令格式-2" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis [-bmsBMS] 匹配串</span><br></pre></td></tr></table></figure><h2 id="具体示例-2"><a href="#具体示例-2" class="headerlink" title="具体示例"></a>具体示例</h2><ul><li>查找二进制程序 <code>ls</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># whereis -b ls</span></span><br><span class="line">ls: /usr/bin/ls</span><br></pre></td></tr></table></figure><ul><li>查找 <code>grep</code> 所有信息</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># whereis grep</span></span><br><span class="line">grep: /usr/bin/grep /usr/share/man/man1/grep.1.gz</span><br></pre></td></tr></table></figure><h1 id="which"><a href="#which" class="headerlink" title="which"></a>which</h1><p>which 是在 PATH 变量中找到第一个匹配的命令并返回，这能帮助我们确认多个相同命令时用的是哪一个。</p><h2 id="命令格式-3"><a href="#命令格式-3" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which [选项] 匹配串</span><br></pre></td></tr></table></figure><h2 id="具体示例-3"><a href="#具体示例-3" class="headerlink" title="具体示例"></a>具体示例</h2><ul><li>打印当前使用的gcc程序，打印所有可加 <code>-a</code> 参数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># which gcc</span></span><br><span class="line">/usr/bin/gcc</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># which gcc -a</span></span><br><span class="line">/usr/bin/gcc</span><br></pre></td></tr></table></figure><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p>grep 不算是单纯查找文件的命令，更多的是用于从文件中过滤指定内容。</p><h2 id="命令格式-4"><a href="#命令格式-4" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [选项] 匹配串 [指定文件]</span><br></pre></td></tr></table></figure><h2 id="具体示例-4"><a href="#具体示例-4" class="headerlink" title="具体示例"></a>具体示例</h2><ul><li>过滤包含指定字符串的行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># grep "which" w.txt</span></span><br><span class="line">       <span class="built_in">which</span> - shows the full path of (shell) commands.</span><br><span class="line">       <span class="built_in">which</span> [options] [--] programname [...]</span><br><span class="line">       This man page is generated from the file which.texinfo.</span><br></pre></td></tr></table></figure><ul><li>显示匹配行之后的2行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># grep "which" w.txt -A 2</span></span><br><span class="line">       <span class="built_in">which</span> - shows the full path of (shell) commands.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       <span class="built_in">which</span> [options] [--] programname [...]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">--</span><br><span class="line">       This man page is generated from the file which.texinfo.</span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">--</span><br></pre></td></tr></table></figure><ul><li>当前目录下查找包含 <code>wonderful</code> 的文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># grep -r "wonderful" .</span></span><br><span class="line">./.rediscli_history:hset life family wonderful</span><br><span class="line">./.bash_history:grep -r <span class="string">"wonderful"</span> . | head</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>find</code>命令查找文件最全面 <code>find . -name tendis -ls</code></li><li><code>locate</code> 命令查找最快，<code>locate -i /etc/redis</code>，可用 <code>updatedb</code> 命令更新数据库</li><li><code>whereis</code> 命令可以查找二进制、man手册、源码，<code>whereis -b grep</code></li><li><code>which</code> 可以从PATH路径下找到第一个匹配的二进制程序</li><li><code>grep</code> 一个强大的过滤命令，也可用于找文件 <code>grep -r &quot;wonderful&quot; .</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/124790386" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>幸福感从比较中诞生，亦从比较中消亡，并且与比较双方的关系紧密程度高度相关。我有一块糖，而你没有，我就很幸福，转身发现他有10块糖，然后嘴里的糖瞬间就不甜了~</p><p>2022-6-5 23:21:58</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;查找是运维工作的很重要的一部分，不管是文件查找，还是内容查找，在日常开发维护过程中都常常用到，本文把一些日常用到的查找命令总结到一起，通过对比来学习异同点，进而达到 增强记忆的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="find" scheme="http://AlbertGithubHome.github.io/blog/tags/find/"/>
    
      <category term="查找" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="locate" scheme="http://AlbertGithubHome.github.io/blog/tags/locate/"/>
    
      <category term="which" scheme="http://AlbertGithubHome.github.io/blog/tags/which/"/>
    
      <category term="grep" scheme="http://AlbertGithubHome.github.io/blog/tags/grep/"/>
    
  </entry>
  
  <entry>
    <title>.bat批处理（十一）：替换字符串中包含百分号%的子串</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/05/15/bat%E6%89%B9%E5%A4%84%E7%90%86%EF%BC%88%E5%8D%81%E4%B8%80%EF%BC%89%EF%BC%9A%E6%9B%BF%E6%8D%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%8C%85%E5%90%AB%E7%99%BE%E5%88%86%E5%8F%B7-%E7%9A%84%E5%AD%90%E4%B8%B2/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/05/15/bat批处理（十一）：替换字符串中包含百分号-的子串/</id>
    <published>2022-05-15T14:28:46.000Z</published>
    <updated>2022-05-15T15:21:16.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天这篇总结是之前批处理替换字符串的延伸问题，同样来源于读者的提问，要处理的问题是被替换的子串中如果有百分号 <code>%</code> 要怎样替换，因为 <code>%</code> 在批处理脚本中也比较特殊，如果要想表示一个 <code>%</code> 字符，那么在给变量赋值时需要写成 <code>%%</code> 的样子，用两个表示一个，类似于进行转义，因为在批处理中， <code>%</code>开头的内容通常表示一个变量。</p><p>之前也处理过一些替换问题，列举如下，不过今天的问题需要新的解法。</p><a id="more"></a><ul><li><a href="https://blog.csdn.net/albertsh/article/details/79919465" target="_blank" rel="noopener">《.bat批处理（六）：替换字符串中匹配的子串》</a></li><li><a href="https://blog.csdn.net/albertsh/article/details/105611277" target="_blank" rel="noopener">《.bat批处理（九）：替换带有等号=的字符串的子串》</a></li></ul><h1 id="问题示例"><a href="#问题示例" class="headerlink" title="问题示例"></a>问题示例</h1><blockquote><p>将字符串 <code>https://blog.csdn.net/alb%3crtsh/articl%3c/d%3ctails/124760925</code> 中的 <code>%3c</code> 替换成字母 <code>e</code></p></blockquote><p>问题比较明确，就是因为被替换的子串中包含了 <code>%</code> 导致常规的替换写法 <code>%a:b=c%</code> 的写法失效了。</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>既然子串中包含 <code>%</code> 会影响变量替换字符串的写法，我们就可以考虑换一种变量写法，用 <code>!</code> 代替 <code>%</code>，看到这很多人应该反应过来了，那就是启用延迟变量扩展，这个我就不展开说了，之前总结过，可以看一下这篇文章<a href="https://blog.csdn.net/albertsh/article/details/102985590" target="_blank" rel="noopener">《.bat批处理（八）：各种形式的变量%0、%i、%%i、var、%var%、!var!的含义和区别》</a>。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">rem 将输入字符串中的%3c替换成字母e</span><br><span class="line"></span><br><span class="line">SET INPUT_PARAM=%1</span><br><span class="line">setlocal EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -</span><br><span class="line"><span class="built_in">echo</span> replace result is !INPUT_PARAM:%%3c=e!</span><br><span class="line"><span class="built_in">echo</span> -</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D:\data\bat&gt;replace%.bat https://blog.csdn.net/alb%3crtsh/articl%3c/d%3ctails/124760925</span><br><span class="line">-</span><br><span class="line">replace result is https://blog.csdn.net/albertsh/article/details/124760925</span><br><span class="line">-</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>批处理脚本中的替换语法不仅可以写成 <code>%a:b=c%</code>，还可以写成 <code>!a:b=c!</code>的形式</li><li>批处理脚本执行机制是会按行执行，在执行之前会先预处理</li><li>开启延迟环境变量扩展<code>setlocal enabledelayedexpansion</code>，变量会在用到时再估值，不会预处理了</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/124760925" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>公平不一定平等，平等也不代表公平。究竟什么是秩序，往往强者指定规则，弱者小心遵守，达到一个稳态，那就是秩序~</p><p>2022-5-15 23:02:49</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;今天这篇总结是之前批处理替换字符串的延伸问题，同样来源于读者的提问，要处理的问题是被替换的子串中如果有百分号 &lt;code&gt;%&lt;/code&gt; 要怎样替换，因为 &lt;code&gt;%&lt;/code&gt; 在批处理脚本中也比较特殊，如果要想表示一个 &lt;code&gt;%&lt;/code&gt; 字符，那么在给变量赋值时需要写成 &lt;code&gt;%%&lt;/code&gt; 的样子，用两个表示一个，类似于进行转义，因为在批处理中， &lt;code&gt;%&lt;/code&gt;开头的内容通常表示一个变量。&lt;/p&gt;
&lt;p&gt;之前也处理过一些替换问题，列举如下，不过今天的问题需要新的解法。&lt;/p&gt;
    
    </summary>
    
      <category term="bat" scheme="http://AlbertGithubHome.github.io/blog/categories/bat/"/>
    
    
      <category term="实用工具" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
      <category term="bat" scheme="http://AlbertGithubHome.github.io/blog/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下常用的网络命令ping、telnet、traceroute、tcpdump</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/05/10/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4ping%E3%80%81telnet%E3%80%81traceroute%E3%80%81tcpdump/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/05/10/linux环境下常用的网络命令ping、telnet、traceroute、tcpdump/</id>
    <published>2022-05-10T13:11:20.000Z</published>
    <updated>2022-05-15T14:30:43.178Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因特网(Internet)的前身是美国国防部高级研究计划局(ARPA)用于军事目的的通信网络，真的就是一个内部的工具出圈成了改变世界的事物。网这个词用的很形象也很贴切，如今的世界任何事情都离不开这个大网了，特别是之前炒的非常火爆的万物互联概念，更是把所有事物都挂在了“网”上，虽然这张大网某些节点偶尔会不太通畅，但这并不能阻断消息的往来。之前都在讲全球化，谁能想到短短几年“逆全球化”居然越来越热。</p><a id="more"></a><p>1983年1月1日被认为是互联网的官方生日，在此之前，各种计算机网络没有相互通信的标准方式。但从这一天开始，用于军事目的的阿帕网和国防数据网络正式定义为TCP/IP标准，建立了一种统一的通信协议，它允许不同网络上不同类型的计算机相互”交谈”，互联网就此诞生了。</p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>如今人们已经离不开网络了，不管是每天工作，还是日常娱乐，网络无处不在，连两岁的宝宝看到动画片转圈圈都知道是网卡了，而进行应用开发和游戏开发的搬砖小哥儿们更是无人能逃脱网络问题，遇到网络问题不可怕，重启电脑、重启路由器，重启光猫，问题很可能就解决了。</p><p>但，总有那么几个问题是重启解决不了的，所以我们还是得掌握一些正常的工具来排查问题，那么接下来就列举几个常用的命令，真的很常见，大神请绕路~</p><h1 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h1><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>这应该是用的最多的一个网络命令了吧，“ping一下通不通”，这句话经常在日常开发调试中被提及，<code>ping</code> 命令常常用来测试，指定的两台机器之间的网络是否可以连通，命令格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping [OPTIONS] 域名或IP地址</span><br></pre></td></tr></table></figure><p>一些常用的选项：</p><ul><li><code>-4</code>：只使用 IPv4</li><li><code>-6</code>：只使用 IPv6</li><li><code>-c count</code>：发送多少个测试包之后停止，linux环境下如果不加这个参数会一直发包</li><li><code>-i interval</code>：指定发包的的间隔时间</li></ul><p>用常用网站测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ping -c 5 -i 2 www.baidu.com</span></span><br><span class="line">PING www.a.shifen.com (110.242.68.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=1 ttl=251 time=10.3 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=2 ttl=251 time=10.2 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=3 ttl=251 time=10.2 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=4 ttl=251 time=10.2 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=5 ttl=251 time=10.2 ms</span><br><span class="line"></span><br><span class="line">--- www.a.shifen.com ping statistics ---</span><br><span class="line">5 packets transmitted, 5 received, 0% packet loss, time 8007ms</span><br><span class="line">rtt min/avg/max/mdev = 10.217/10.243/10.311/0.132 ms</span><br></pre></td></tr></table></figure><p>测试信息的含义：</p><table><thead><tr><th style="text-align:left">数据</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">-c 5</td><td style="text-align:left">发送5个测试包</td></tr><tr><td style="text-align:left">-i 2</td><td style="text-align:left">每个测试包发送间隔2s</td></tr><tr><td style="text-align:left">www.baidu.com</td><td style="text-align:left">指定的目标地址</td></tr><tr><td style="text-align:left">www.a.shifen.com (110.242.68.3)</td><td style="text-align:left">实际的目标主机的主机名和IP地址</td></tr><tr><td style="text-align:left">56(84) bytes</td><td style="text-align:left">ICMP数据部分的大小56字节，加上8字节的ICMP头，则ICMP包大小为64字节，再加上20字节的IP头，IP包大小为84字节</td></tr><tr><td style="text-align:left">64 bytes</td><td style="text-align:left">ICMP数据包大小</td></tr><tr><td style="text-align:left">icmp_seq=1</td><td style="text-align:left">ICMP包序号</td></tr><tr><td style="text-align:left">ttl=251</td><td style="text-align:left">剩余生存时间，生存时间是指数据包被路由器丢弃之前允许通过的网段数量，由发送主机设置的，以防止数据包在互联网络上永不终止的循环，每经过一个路由器至少将TTL减 1</td></tr><tr><td style="text-align:left">time=10.3 ms</td><td style="text-align:left">响应时间，这个时间越小，连接速度越快</td></tr><tr><td style="text-align:left">— www.a.shifen.com ping statistics —</td><td style="text-align:left">统计信息分割线，以下为统计信息</td></tr><tr><td style="text-align:left">5 packets transmitted</td><td style="text-align:left">发送数据包的数量</td></tr><tr><td style="text-align:left">5 received</td><td style="text-align:left">接收到的数据包的数量</td></tr><tr><td style="text-align:left">0% packet loss</td><td style="text-align:left">数据包的丢失率</td></tr><tr><td style="text-align:left">time 8007ms</td><td style="text-align:left">整个过程消耗的总时间</td></tr><tr><td style="text-align:left">rtt min/avg/max/mdev = 10.217/10.243/10.311/0.132 ms</td><td style="text-align:left">最小响应时间/平均响应时间/最大响应时间/响应时间的平均差</td></tr></tbody></table><p>ping 命令全称 Packe InterNet Groper， 翻译为因特网包探索器，是一个用于测试网络连接状况的程序。该令会使用ICMP（Internet Control Message Protocol）传输协议，向特定的目标主机发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><p>ICMP协议是IP层的附属协议，是介于IP层和TCP层之间的协议，一般认为属于IP层协议，也就是网络层协议。ICMP用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p><blockquote><p>注意：在Windows命令行中执行ping命令，默认只发送4个数据包就停止，这个行为和Linux环境下是不同的</p></blockquote><h2 id="telnet"><a href="#telnet" class="headerlink" title="telnet"></a>telnet</h2><p>telnet是电信(telecommunications)和网络(networks)的联合缩写，是Internet远程登陆服务的标准协议，为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用telnet程序，可以连接到服务器，直接在telnet程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样，进而可以在本地就能控制远端的服务器。</p><p>telnet位于OSI模型的第7层，属于应用层上的一种协议，使用端口23，底层基于TCP协议。传输的数据和口令是明文形式，相对来说不安全，存在很大的安全隐患，不再用于通过公共网络访问网络设备和服务器。</p><p>现在使用更加安全的ssh代替telnet进行远程管理终端，ssh传输方式是以加密形式传输，并且功能比telnet更齐全，而telnet主要作用变成了查看某个端口是否可访问，常用命令格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet IP或域名 端口</span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># telnet www.baidu.com 80</span></span><br><span class="line">Trying 110.242.68.4...</span><br><span class="line">Connected to www.baidu.com.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">^]</span><br><span class="line">telnet&gt; send ?</span><br><span class="line">ao              Send Telnet Abort output</span><br><span class="line">ayt             Send Telnet <span class="string">'Are You There'</span></span><br><span class="line">brk             Send Telnet Break</span><br><span class="line">ec              Send Telnet Erase Character</span><br><span class="line">el              Send Telnet Erase Line</span><br><span class="line">escape          Send current escape character</span><br><span class="line">ga              Send Telnet <span class="string">'Go Ahead'</span> sequence</span><br><span class="line">ip              Send Telnet Interrupt Process</span><br><span class="line">nop             Send Telnet <span class="string">'No operation'</span></span><br><span class="line">eor             Send Telnet <span class="string">'End of Record'</span></span><br><span class="line">abort           Send Telnet <span class="string">'Abort Process'</span></span><br><span class="line">susp            Send Telnet <span class="string">'Suspend Process'</span></span><br><span class="line">eof             Send Telnet End of File Character</span><br><span class="line">synch           Perform Telnet <span class="string">'Synch operation'</span></span><br><span class="line">getstatus       Send request <span class="keyword">for</span> STATUS</span><br><span class="line">?               Display send options</span><br><span class="line">telnet&gt; ?</span><br><span class="line">Commands may be abbreviated.  Commands are:</span><br><span class="line"></span><br><span class="line">close       close current connection</span><br><span class="line"><span class="built_in">logout</span>      forcibly <span class="built_in">logout</span> remote user and close the connection</span><br><span class="line">display     display operating parameters</span><br><span class="line">mode        try to enter line or character mode (<span class="string">'mode ?'</span> <span class="keyword">for</span> more)</span><br><span class="line">open        connect to a site</span><br><span class="line">quit        <span class="built_in">exit</span> telnet</span><br><span class="line">send        transmit special characters (<span class="string">'send ?'</span> <span class="keyword">for</span> more)</span><br><span class="line"><span class="built_in">set</span>         <span class="built_in">set</span> operating parameters (<span class="string">'set ?'</span> <span class="keyword">for</span> more)</span><br><span class="line"><span class="built_in">unset</span>       <span class="built_in">unset</span> operating parameters (<span class="string">'unset ?'</span> <span class="keyword">for</span> more)</span><br><span class="line">status      <span class="built_in">print</span> status information</span><br><span class="line">toggle      toggle operating parameters (<span class="string">'toggle ?'</span> <span class="keyword">for</span> more)</span><br><span class="line">slc         change state of special charaters (<span class="string">'slc ?'</span> <span class="keyword">for</span> more)</span><br><span class="line">z           <span class="built_in">suspend</span> telnet</span><br><span class="line">!           invoke a subshell</span><br><span class="line">environ     change environment variables (<span class="string">'environ ?'</span> <span class="keyword">for</span> more)</span><br><span class="line">?           <span class="built_in">print</span> <span class="built_in">help</span> information</span><br><span class="line">telnet&gt; q</span><br><span class="line">Connection closed.</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>一般情况下测试80端口是否可用，看到第3行的 <code>Connected to www.baidu.com.</code> 就够了，如果想使用telnet工具发送数据，可以按组合键 <code>Ctrl+]</code>进入输入命令的模式，按字母 <code>q</code> 可以退出。</p><blockquote><p>注意：在Windows环境下如果端口可以连通会显示一个无任何信息的黑框，按组合键 <code>Ctrl+]</code>才会有反应，如果端口不通则会提示超时</p></blockquote><h2 id="nc"><a href="#nc" class="headerlink" title="nc"></a>nc</h2><p>上一小节说过，telnet是基于TCP的应用层协议，所以只能检测TCP端口是否正常，如果想检测一个UDP端口是否可用，使用telnet命令是办不到的，这时候就可以使用 <code>nc</code> 命令来实现，详细的用法可以参考之前的文章<a href="https://blog.csdn.net/albertsh/article/details/121896012" target="_blank" rel="noopener">《网络工具nc的常见功能和用法》</a>，下面只列举一下检查UDP端口的命令参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ nc -nvuz 82.156.125.169 666</span><br><span class="line">Connection to 82.156.125.169 666 port [udp/*] succeeded!</span><br></pre></td></tr></table></figure><h2 id="traceroute"><a href="#traceroute" class="headerlink" title="traceroute"></a>traceroute</h2><p>traceroute是一个路由跟踪命令，用于追踪数据包在网络上的传输时的全部路径，IPv4是发送的探测包大小是60字节，而IPv6默认是80字节，这个可以通过查询 <code>man</code> 手册来查询。</p><p>通过traceroute我们可以探测出数据从当前计算机到另一台主机是走了什么样网络路径，不过相同的数据包每次由从相同的出发点到相同目的地走的路径可能并相同，但大部分时候所走的路由是一样的，所以可以帮助我们了解网络状况。</p><p>traceroute的原理是利用逐步设置 <code>ttl</code> 参数进行参数，这个参数全称<code>time-to-live</code>, 指当前数据包在网络中存在的是时间，而时间不是我们平常所说的时间，指的是数据包在网络环境中最多可以被中转的次数，每经过一个路由设备就要减1，减到0则说明数据包超时，要给原地址一个包含自身信息的回应。</p><p>既然这样就可以利用 <code>ttl</code> 的特点来探测出路径，先将第一个数据包的 <code>ttl</code> 设置为 1，到达第一个路由设备后 <code>ttl</code> 减为0，返回给发送数据的起始设备，这样我们就找到了网络路径中的第一个点。然后将下一个数据包的 <code>ttl</code> 设置为2，就可以探测出路径上的第二个路由设备，直到找到目的地址，整个探测过程结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute [OPTIONS] IP或域名</span><br></pre></td></tr></table></figure><p>一些常用的选项：</p><ul><li><code>-4</code>：强制使用 IPv4 追踪，默认自动选择</li><li><code>-6</code>：强制使用 IPv6 追踪，默认自动选择</li><li><code>-I</code>：使用 ICMP 回应进行探测</li><li><code>-T</code>：使用 TCP 同步进行探测</li><li><code>-m max_ttl</code>：指定 <code>time-to-live</code> 的最大值，默认是30</li></ul><p>测试如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># traceroute www.baidu.com -T</span></span><br><span class="line">traceroute to www.baidu.com (110.242.68.4), 30 hops max, 60 byte packets</span><br><span class="line"> 1  9.61.26.129 (9.61.26.129)  0.464 ms  0.626 ms  0.788 ms</span><br><span class="line"> 2  9.61.119.152 (9.61.119.152)  0.843 ms  1.085 ms  1.282 ms</span><br><span class="line"> 3  * * *</span><br><span class="line"> 4  10.200.44.221 (10.200.44.221)  1.130 ms 10.162.5.252 (10.162.5.252)  1.089 ms 10.200.44.205 (10.200.44.205)  1.385 ms</span><br><span class="line"> 5  61.49.142.157 (61.49.142.157)  2.842 ms 61.49.142.153 (61.49.142.153)  0.923 ms 61.49.142.149 (61.49.142.149)  1.467 ms</span><br><span class="line"> 6  123.126.0.217 (123.126.0.217)  2.031 ms 61.148.7.157 (61.148.7.157)  2.057 ms 202.96.13.5 (202.96.13.5)  5.015 ms</span><br><span class="line"> 7  125.33.186.17 (125.33.186.17)  2.499 ms 124.65.194.161 (124.65.194.161)  6.422 ms 124.65.194.157 (124.65.194.157)  3.125 ms</span><br><span class="line"> 8  * * *</span><br><span class="line"> 9  110.242.66.190 (110.242.66.190)  10.030 ms 110.242.66.166 (110.242.66.166)  10.261 ms 110.242.66.162 (110.242.66.162)  10.751 ms</span><br><span class="line">10  * * *</span><br><span class="line">11  * * *</span><br><span class="line">12  * * *</span><br><span class="line">13  * * *</span><br><span class="line">14  * * 110.242.68.4 (110.242.68.4)  9.245 ms</span><br></pre></td></tr></table></figure><p>从上面的测试结果来看，每一行都是一个记录，每个纪录表示一跳，从我的机器到 <code>www.baidu.com</code> 一共经过了14个设备才到达，不过并不是每次探测的结果都一样，这个是会变化的，可以看到每行有3个以ms为单位时间，是因为该命令每次默认发送3个探测数据包，这3个时间就是网关响应后返回的时间。</p><p>另外在输出信息中部分节点显示 <code>* * *</code>，关于这种现象，我找到几种说法，遇到了需要针对具体情况进行分析：</p><ul><li>设备防火墙封掉了ICMP的返回信息，我们得不到什么相关的数据包返回数据</li><li>由于回送TTL超时信息的时候，CPU生成这个返回包必须被打断，为保证其它工作的正常进行，每隔一秒才会处理traceroute，所以可能会看到中间一路 <code>* * *</code>，但却看得到最后的destination. 这时往往是路由设备CPU太忙或者中间路由器不回送TTL超时包的原因（感觉不太靠谱）。</li><li>虚拟机nat路由器，默认丢弃port&gt;32767的包，导致看不到中间路由的信息</li></ul><blockquote><p>注意：在Windows环境下，相同功能的命令为Tracert，而不是traceroute</p></blockquote><h2 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h2><p>tcpdump命令是一个网络嗅探，它可以打印所有经过该设备网卡的数据包的信息，也可以使用-w选项将数据包保存到文件中，方便以后分析，功能与Windows平台上的Wiresh相同，生成的数据文件也可以传送到Windows平台，使用 Wireshark 软件进行分析。</p><p>命令格式非常简单，必要时加一些参数就可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tcpdump [OPTIONS]</span><br></pre></td></tr></table></figure><p>一些常用的选项：</p><ul><li><code>-c count</code>：接受count个数据包之后退出</li><li><code>-i</code>：指定网卡</li><li><code>-v</code>：打印较详细的信息用于分析</li><li><code>-w</code>：结果写到文件之中</li><li><code>tcp</code>：过滤出tcp数据</li><li><code>port xxxx</code>：仅打印指定端口的数据</li></ul><p>测试一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># tcpdump -c 6 -v</span></span><br><span class="line">tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">10:30:45.344349 IP (tos 0x10, ttl 64, id 47149, offset 0, flags [DF], proto TCP (6), length 188)</span><br><span class="line">    VM-0-3-centos.ssh &gt; 68.128.126.124.broad.bjtelecom.net.6183: Flags [P.], cksum 0x9127 (correct), seq 14744777:14744925, ack 1170924064, win 340, length 148</span><br><span class="line">10:30:45.344782 IP (tos 0x0, ttl 64, id 39263, offset 0, flags [DF], proto UDP (17), length 73)</span><br><span class="line">    VM-0-3-centos.35281 &gt; 183.60.83.19.domain: 48669+ PTR? 68.128.126.124.in-addr.arpa. (45)</span><br><span class="line">10:30:45.344826 IP (tos 0x10, ttl 64, id 47150, offset 0, flags [DF], proto TCP (6), length 188)</span><br><span class="line">    VM-0-3-centos.ssh &gt; 68.128.126.124.broad.bjtelecom.net.6183: Flags [P.], cksum 0x5e8b (correct), seq 148:296, ack 1, win 340, length 148</span><br><span class="line">10:30:45.353844 IP (tos 0xa0, ttl 251, id 62658, offset 0, flags [DF], proto TCP (6), length 40)</span><br><span class="line">    68.128.126.124.broad.bjtelecom.net.6183 &gt; VM-0-3-centos.ssh: Flags [.], cksum 0x6909 (correct), ack 296, win 258, length 0</span><br><span class="line">10:30:45.424218 IP (tos 0x0, ttl 56, id 9062, offset 0, flags [DF], proto UDP (17), length 121)</span><br><span class="line">    183.60.83.19.domain &gt; VM-0-3-centos.35281: 48669 1/0/0 68.128.126.124.in-addr.arpa. PTR 68.128.126.124.broad.bjtelecom.net. (93)</span><br><span class="line">10:30:45.424327 IP (tos 0x0, ttl 64, id 17697, offset 0, flags [DF], proto UDP (17), length 68)</span><br><span class="line">    VM-0-3-centos.40741 &gt; 183.60.82.98.domain: 15078+ PTR? 3.0.10.10.in-addr.arpa. (40)</span><br><span class="line">6 packets captured</span><br><span class="line">13 packets received by filter</span><br><span class="line">0 packets dropped by kernel</span><br></pre></td></tr></table></figure><p>因为不能一直盯着某个设备的网络情况，所以会将数据打印到文件中便于日后分析，常常将tcpdump命令后台运行，比如可以写成下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup tcpdump -i eth0 tcp port 8080 -v -w dm8080.cap &amp;</span><br></pre></td></tr></table></figure><blockquote><p>在Windows平台一般就直接使用Wiresh软件啦，非常方便</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>设备一旦接入网络很难“独善其身”</li><li><code>ping</code> 命令可以测试目的IP是否可达 <code>ping www.baidu.com</code></li><li><code>telnet</code> 命令可以测试指定的tcp端口是否可达 <code>telnet 110.242.68.4 80</code></li><li><code>nc</code> 命令可以测试指定udp端口是否可达 <code>nc -nvuz 110.242.68.4 666</code></li><li><code>tracerout</code> 命令可以探测网络路径 <code>traceroute www.baidu.com</code></li><li><code>tcpdump</code> 命令可以收集所有经过网卡的数据包 <code>tcpdump -i eth0 tcp port 8080 -v</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/124562399" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>“王侯将相，宁有种乎？”讲的是权利；<br>“天下兴亡，匹夫有责！”说的是义务；<br>权力和义务的辩证关系体现于此，二者统一，不可分离~</p><p>2022-5-13 20:59:38</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因特网(Internet)的前身是美国国防部高级研究计划局(ARPA)用于军事目的的通信网络，真的就是一个内部的工具出圈成了改变世界的事物。网这个词用的很形象也很贴切，如今的世界任何事情都离不开这个大网了，特别是之前炒的非常火爆的万物互联概念，更是把所有事物都挂在了“网”上，虽然这张大网某些节点偶尔会不太通畅，但这并不能阻断消息的往来。之前都在讲全球化，谁能想到短短几年“逆全球化”居然越来越热。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="网络" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="ping" scheme="http://AlbertGithubHome.github.io/blog/tags/ping/"/>
    
      <category term="telnet" scheme="http://AlbertGithubHome.github.io/blog/tags/telnet/"/>
    
      <category term="traceroute" scheme="http://AlbertGithubHome.github.io/blog/tags/traceroute/"/>
    
      <category term="tcpdump" scheme="http://AlbertGithubHome.github.io/blog/tags/tcpdump/"/>
    
  </entry>
  
  <entry>
    <title>C++11新式洗牌std::shuffle与老式洗牌函数std::random_shuffle的区别</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/05/03/C-11%E6%96%B0%E5%BC%8F%E6%B4%97%E7%89%8Cstd-shuffle%E4%B8%8E%E8%80%81%E5%BC%8F%E6%B4%97%E7%89%8C%E5%87%BD%E6%95%B0std-random-shuffle%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/05/03/C-11新式洗牌std-shuffle与老式洗牌函数std-random-shuffle的区别/</id>
    <published>2022-05-03T04:14:45.000Z</published>
    <updated>2022-05-03T14:31:38.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>洗牌算法是项目开发中常用的一种算法，它和随机数有着密不可分的关系，比如我们从报名参与活动的前10个用户中选取一个人发放幸运奖，这时可以从[1, 10] 范围内随机一个数来确定幸运儿；如果是抽取两个人呢？那就随机两次！是的，确实可以这样做，但是随着随机次数的增多，后面随机的数字很可能和前面一样，这时就要重复随机才能解决。</p><a id="more"></a><p>想想现实生活中我们可以怎么做，取红桃A-红桃10一共10张扑克牌，然后把它们随机洗一洗牌，如果需要取3个幸运儿，那么只需取扑克牌的前三张就可以了，这样很容易就取到了不重复的3个数字，当然你从中间随机抽取也是可以的，这样操作在逻辑实现上要复杂一点点。</p><h1 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h1><p>其实洗牌利用的是一个排列的概念，学过排列组合的知识以后我们很清楚，n个元素排列的种类数一共是:</p><p>$$<br>A^n_n<br>$$</p><p>也就是n!，这是个恐怖的数字，比如打印N个数字的全排列，它的是时间复杂度就是O(N!)，这个谁也没办法优化，因为打印这些排列情况就需要O(N!)这么多的时间，而洗牌就是保证从这些元素组成的全排列中等概率的选取一种排列。</p><p>把所有的排列情况列举出来，然后从中选择一个所需时间是O(N!)，这显然是不现实的，所以很多大神们进行了优化，出现了多种洗牌算法，下面我只列举一种比较好理解的 <code>Knuth-Durstenfeld Shuffle</code> 算法。</p><p>改洗牌算法可简单表述为：一个拥有n个元素的初始序列，将最后一个数和该序列的前 <code>n</code> 个数中的随机一个数进行交换（如果随机结果是和第n个数交换，相当于没换），然后倒数第二个数和该序列的前 <code>n - 1</code> 个数中的随机一个数进行交换，以此类推，直到将该序列第一个数操作完，就完成了洗牌，该算法保证了每个元素在每个位置的概率都是相等的，时间复杂度为O(N)。</p><p>举个例子就像下面这样：</p><p>初始序列是 <code>A</code>、<code>B</code>、<code>C</code>、<code>D</code>、<code>E</code>、<code>F</code>，为了便于和刚才的算法思路对应描述，索引从1开始</p><p>第一轮从1-6个位置中随机一个和最后的 <code>F</code> 交换，假如随机到位置3，也就是和 <code>C</code> 交换，结果为：</p><blockquote><p>A B F D E C</p></blockquote><p>概率是P=1/6，也就是随机一个数字的概率</p><p>第二轮从1-5个位置中随机一个和倒数第二个元素 <code>E</code> 交换，假如随机到的是位置2，也就是和 <code>B</code> 交换，结果为：</p><blockquote><p>A E F D B C</p></blockquote><p>概率是P=(5/6)*(1/5)=1/6，为什么这么算呢？要想和 <code>B</code> 交换必须第一轮随机不到<code>B</code>才可以，所以要在前面乘以 5/6</p><p>第三轮从1-2个位置中随机一个和倒数第二个元素 <code>D</code> 交换，假如随机到的还是位置2，也就是和 <code>E</code> 交换，结果为</p><blockquote><p>A D F E B C</p></blockquote><p>概率是P=(5/6)*(4/5)*(1/4)=1/6，有了第二轮这个就应该明白了吧</p><p>依次类推，直到操作完第五次随机交换，整个洗牌算法也就完成了，伪代码也就几行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = vec.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::swap(vec[i], vec[<span class="built_in">std</span>::rand() % (i + <span class="number">1</span>)]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="std-random-shuffle"><a href="#std-random-shuffle" class="headerlink" title="std::random_shuffle"></a>std::random_shuffle</h1><p>使用这个函数需要引用头文件 <code>&lt;algorithm&gt;</code>，共有以下几个重载函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">RandomIt</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">random_shuffle</span>( <span class="title">RandomIt</span> <span class="title">first</span>, <span class="title">RandomIt</span> <span class="title">last</span> );</span> <span class="comment">//(deprecated in C++14)(removed in C++17)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">RandomIt</span>, <span class="title">class</span> <span class="title">RandomFunc</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">random_shuffle</span>( <span class="title">RandomIt</span> <span class="title">first</span>, <span class="title">RandomIt</span> <span class="title">last</span>, <span class="title">RandomFunc</span>&amp; <span class="title">r</span> );</span>  <span class="comment">//(until C++11)</span></span><br><span class="line">                                            <span class="comment">//(deprecated in C++14)(removed in C++17)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt; <span class="class"><span class="keyword">class</span> <span class="title">RandomIt</span>, <span class="title">class</span> <span class="title">RandomFunc</span> &gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">random_shuffle</span>( <span class="title">RandomIt</span> <span class="title">first</span>, <span class="title">RandomIt</span> <span class="title">last</span>, <span class="title">RandomFunc</span>&amp;&amp; <span class="title">r</span> );</span> <span class="comment">//(since C++11)</span></span><br><span class="line">                                            <span class="comment">//(deprecated in C++14)(removed in C++17)</span></span><br></pre></td></tr></table></figure><p>从文档来看 <code>std::random_shuffle</code> 这个函数的实现在C++14标准中已经不推荐使用，在C++17中已经被移除了，函数定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  @brief Randomly shuffle the elements of a sequence.</span></span><br><span class="line"><span class="comment">   *  @ingroup mutating_algorithms</span></span><br><span class="line"><span class="comment">   *  @param  __first   A forward iterator.</span></span><br><span class="line"><span class="comment">   *  @param  __last    A forward iterator.</span></span><br><span class="line"><span class="comment">   *  @return  Nothing.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  Reorder the elements in the range @p [__first,__last) using a random</span></span><br><span class="line"><span class="comment">   *  distribution, so that every possible ordering of the sequence is</span></span><br><span class="line"><span class="comment">   *  equally likely.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _RandomAccessIterator&gt;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">void</span></span><br><span class="line">    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// concept requirements</span></span><br><span class="line">      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept&lt;</span><br><span class="line">        _RandomAccessIterator&gt;)</span><br><span class="line">      __glibcxx_requires_valid_range(__first, __last);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__first != __last)</span><br><span class="line">      <span class="keyword">for</span> (_RandomAccessIterator __i = __first + <span class="number">1</span>; __i != __last; ++__i)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// XXX rand() % N is not uniformly distributed</span></span><br><span class="line">        _RandomAccessIterator __j = __first</span><br><span class="line">                    + <span class="built_in">std</span>::rand() % ((__i - __first) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (__i != __j)</span><br><span class="line">          <span class="built_in">std</span>::iter_swap(__i, __j);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  @brief Shuffle the elements of a sequence using a random number</span></span><br><span class="line"><span class="comment">   *         generator.</span></span><br><span class="line"><span class="comment">   *  @ingroup mutating_algorithms</span></span><br><span class="line"><span class="comment">   *  @param  __first   A forward iterator.</span></span><br><span class="line"><span class="comment">   *  @param  __last    A forward iterator.</span></span><br><span class="line"><span class="comment">   *  @param  __rand    The RNG functor or function.</span></span><br><span class="line"><span class="comment">   *  @return  Nothing.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   *  Reorders the elements in the range @p [__first,__last) using @p __rand to</span></span><br><span class="line"><span class="comment">   *  provide a random distribution. Calling @p __rand(N) for a positive</span></span><br><span class="line"><span class="comment">   *  integer @p N should return a randomly chosen integer from the</span></span><br><span class="line"><span class="comment">   *  range [0,N).</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> _RandomAccessIterator, <span class="keyword">typename</span> _RandomNumberGenerator&gt;</span><br><span class="line">    <span class="keyword">void</span></span><br><span class="line">    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,</span><br><span class="line">#<span class="keyword">if</span> __cplusplus &gt;= <span class="number">201103L</span></span><br><span class="line">           _RandomNumberGenerator&amp;&amp; __rand)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">           _RandomNumberGenerator&amp; __rand)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// concept requirements</span></span><br><span class="line">      __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept&lt;</span><br><span class="line">        _RandomAccessIterator&gt;)</span><br><span class="line">      __glibcxx_requires_valid_range(__first, __last);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (__first == __last)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">for</span> (_RandomAccessIterator __i = __first + <span class="number">1</span>; __i != __last; ++__i)</span><br><span class="line">        &#123;</span><br><span class="line">            _RandomAccessIterator __j = __first + __rand((__i - __first) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (__i != __j)</span><br><span class="line">                <span class="built_in">std</span>::iter_swap(__i, __j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以上函数实现来源于文件 <code>/usr/include/c++/5/bits/stl_algo.h</code>，看源码时发现一个问题，原来标准库中的代码也是空格和Tab混用，复制过来的时候我还专门整理了一下。</p><p>第一个仅两个参数的函数中首先验证了迭代器的类型和范围的有效性，同时使用了 <code>std::rand()</code> 函数来随机选择了一个需要交换的元素，而拥有三个参数的函数逻辑几乎一样，只是使用了自定义传入的随机函数来选择需要交换的元素，所以洗牌算法的核心逻辑就是这个随机函数。</p><h1 id="rand-和-srand"><a href="#rand-和-srand" class="headerlink" title="rand 和 srand"></a>rand 和 srand</h1><p>这两个是C标准函数，在C++中被放在头文件 <code>&lt;cstdlib&gt;</code> 之中，搜索到的函数声明如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__BEGIN_NAMESPACE_STD</span><br><span class="line"><span class="comment">/* Return a random integer between 0 and RAND_MAX inclusive.  */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">rand</span> <span class="params">(<span class="keyword">void</span>)</span> __THROW</span>;</span><br><span class="line"><span class="comment">/* Seed the random number generator with the given number.  */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">srand</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> __seed)</span> __THROW</span>;</span><br><span class="line">__END_NAMESPACE_STD</span><br></pre></td></tr></table></figure><p>其中 <code>std::rand()</code> 是用于返回一个介于[0, RAND_MAX] 范围的伪随机整型值，<code>RAND_MAX</code> 的值最小为 32767，也就是有符号short的最大值，我查到的版本库中的值是2147483647，即有符号int的最大值。</p><p><code>std::srand()</code> 的作用是为 <code>st::rand()</code> 这个伪随机数生成器设置种子，如果在调用 <code>std::srand()</code> 之前使用了 <code>std::rand()</code>，种子默认为1，相当于调用了 <code>std::srand(1)</code>，rand通常不是线程安全的函数，依赖于具体的实现。</p><p>另外你可能还见过 <code>random</code> 和 <code>srandom</code> 等函数，他们通常是另一个标准（BSD）的随机函数，比如下面这段描述：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* These are the functions that actually do things.  The `random', `srandom',</span></span><br><span class="line"><span class="comment">   `initstate' and `setstate' functions are those from BSD Unices.</span></span><br><span class="line"><span class="comment">   The `rand' and `srand' functions are required by the ANSI standard.</span></span><br><span class="line"><span class="comment">   We provide both interfaces to the same random number generator.  */</span></span><br><span class="line"><span class="comment">/* Return a random long integer between 0 and RAND_MAX inclusive.  */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">random</span> <span class="params">(<span class="keyword">void</span>)</span> __THROW</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Seed the random number generator with the given number.  */</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">srandom</span> <span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> __seed)</span> __THROW</span>;</span><br></pre></td></tr></table></figure><p>如果是在 <code>POSIX</code> 平台你可能还会遇到 <code>rand_r(int *seed)</code> 函数。</p><p>需要注意的是， <code>std::rand()</code> 生成的是一个伪随机序列，如果随机种子相同，则得到的序列也是相同的，这也是 <code>std::rand</code> 不建议使用的原因，建议是使用C++11随机数生成工具来替换它。</p><p>伪随机序列也并不是“一无是处”，两个进程可以通过设置相同的随机数种子来产生相同的序列，比如可以用于服务器和客户端做帧同步时产生随机数，这样的随机数产生是同步可控的。</p><p>下面举个 <code>std::rand()</code> 使用的例子</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::srand(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::rand() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::srand(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::rand() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::srand(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::rand() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ g++ testrandom.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ ./a.out</span><br><span class="line">1804289383</span><br><span class="line">1804289383</span><br><span class="line">1804289383</span><br></pre></td></tr></table></figure><p>我们可以看到因为随机种子相同，生成的随机数都是同一个，为了使的生成的序列更随机，通常使用当前时间戳 <code>std::time(nullptr)</code> 作为随机种子，然后再生成随机序列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::srand(<span class="built_in">std</span>::time(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::rand() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::srand(<span class="built_in">std</span>::time(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::rand() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::srand(<span class="built_in">std</span>::time(<span class="literal">nullptr</span>));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::rand() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ g++ testrandom.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ ./a.out</span><br><span class="line">1777572541</span><br><span class="line">1777572541</span><br><span class="line">1777572541</span><br></pre></td></tr></table></figure><p>怎么还是相同的呢？那是因为 <code>std::time(nullptr)</code> 函数返回的时间戳单位是秒，在一秒中内的时间种子是相同的，所以返回的序列也是相同的，通常的使用方法是在程序启动时设置一次时间种子就可以了，并不需要每次都进行设置，而 <code>random_shuffle</code> 中使用了 <code>std::rand()</code> 函数，如果不手动设置时间种子，每次同一时间洗同一副牌，得到的结果也是相同的，所以这也是random_shuffle被后续版本移除的一个原因。</p><h1 id="随机数生成器和分布器"><a href="#随机数生成器和分布器" class="headerlink" title="随机数生成器和分布器"></a>随机数生成器和分布器</h1><p>random是C++11提供的一个头文件，其中包含多个随机数生成工具，可以使用生成器和分布器的组合产生随机数，其中包含随机数生成器和分布器的多个类实现，分为以下两种：</p><p>Uniform random bit generators (URBGs)：均匀随机位生成器，也就是生成均匀分布随机数的对象，可以生成伪随机序列，也可生成真正的随机数序列<br>Random number distributions：随机数分布器，用于将URBGs产生的随机数转换为某种特定数学概率分布的序列，如均匀分布、正态分布、泊松分布等</p><p>常见的生成器：</p><ul><li><strong>linear_congruential_engine</strong>: 线性同余生成算法，是最常用也是速度最快的，随机效果一般</li><li><strong>mersenne_twister_engine</strong>: 梅森旋转算法，随机效果最好</li><li><strong>subtract_with_carry_engine</strong>: 滞后Fibonacci算法</li></ul><p>常见的适配器，我理解的它的作用是生成器的二次加工厂，对生成器结果进行特定操作</p><ul><li><strong>discard_block_engine</strong>: 丢弃一些数</li><li><strong>independent_bits_engine</strong>: 将序列打包成指定位数的块</li><li><strong>shuffle_order_engine</strong>: 调整序列顺序</li></ul><p>预定义的随机数生成器，利用通用生成器和适配器组合出的流行特定生成器：</p><ul><li><strong>minstd_rand</strong></li><li><strong>minstd_rand0</strong></li><li><strong>mt19937</strong>: mt是因为这个伪随机数产生器基于Mersenne Twister算法，19937来源于产生随的机数的周期长可达到2^19937-1。</li><li><strong>mt19937_64</strong></li><li><strong>ranlux24_base</strong></li><li><strong>ranlux48_base</strong></li><li><strong>ranlux24</strong></li><li><strong>ranlux48</strong></li><li><strong>knuth_b</strong></li><li><strong>default_random_engine</strong>: 编译器可以自行实现</li></ul><p>以上随机数引擎需要一个整型参数作为种子，对于给定的随机数种子，伪随机数生成器总会生成相同的序列，这在测试的时候是相当有用的。而在实际使用时，需要设置随机树作为种子来产出不同的随机数，推荐使用 <code>std::random_device</code> 的值作为随机数种子。</p><p><code>std::random_device</code> 是一个使用硬件熵源的非确定性随机数发生器，不可预测。</p><p>常见的分布器：</p><ul><li><strong>uniform_int_distribution</strong>: 均匀离散分布</li><li><strong>uniform_real_distribution</strong>: 均匀实数分布</li><li><strong>bernoulli_distribution</strong>: 伯努利分布</li><li><strong>binomial_distribution</strong>: 二项式分布</li><li><strong>geometric_distribution</strong>: 几何分布</li><li><strong>negative_binomial_distribution</strong>: 负二项式分布</li><li><strong>poisson_distribution</strong>: 泊松分布</li><li><strong>exponential_distribution</strong>: 指数分布</li><li><strong>gamma_distribution</strong>: 伽玛分布</li><li><strong>weibull_distribution</strong>: 威布尔分布</li><li><strong>extreme_value_distribution</strong>: 极值分配</li><li><strong>normal_distribution</strong>: 正态分布</li><li><strong>lognormal_distribution</strong>: 对数正态分布</li><li><strong>chi_squared_distribution</strong>: 卡方分布</li><li><strong>cauchy_distribution</strong>: 柯西分布</li><li><strong>fisher_f_distribution</strong>: Fisher F分布</li><li><strong>student_t_distribution</strong>: 学生T分布</li><li><strong>discrete_distribution</strong>: 离散分布</li><li><strong>piecewise_constant_distribution</strong>: 分段常数分布</li><li><strong>piecewise_linear_distribution</strong>: 分段线性分布</li></ul><p>下面举个生成器和分布器组合生成随机常用例子，以下为模拟掷骰子生成点数的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::mt19937 gen(std::random_device&#123;&#125;());</span><br><span class="line">    <span class="built_in">std</span>::uniform_int_distribution&lt;&gt; dist(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dist(gen) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ g++ testrandom.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ ./a.out</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h1 id="std-shuffle"><a href="#std-shuffle" class="headerlink" title="std::shuffle"></a>std::shuffle</h1><p>终于又转回来了，去随机数那一块儿溜了半天，终于回到了洗牌函数，这个函数是C++11版本才加入的，函数定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  @brief Shuffle the elements of a sequence using a uniform random</span></span><br><span class="line"><span class="comment"> *         number generator.</span></span><br><span class="line"><span class="comment"> *  @ingroup mutating_algorithms</span></span><br><span class="line"><span class="comment"> *  @param  __first   A forward iterator.</span></span><br><span class="line"><span class="comment"> *  @param  __last    A forward iterator.</span></span><br><span class="line"><span class="comment"> *  @param  __g       A UniformRandomNumberGenerator (26.5.1.3).</span></span><br><span class="line"><span class="comment"> *  @return  Nothing.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  Reorders the elements in the range @p [__first,__last) using @p __g to</span></span><br><span class="line"><span class="comment"> *  provide random numbers.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _RandomAccessIterator,</span><br><span class="line">     <span class="keyword">typename</span> _UniformRandomNumberGenerator&gt;</span><br><span class="line">  <span class="keyword">void</span></span><br><span class="line">  shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,</span><br><span class="line">      _UniformRandomNumberGenerator&amp;&amp; __g)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// concept requirements</span></span><br><span class="line">    __glibcxx_function_requires(_Mutable_RandomAccessIteratorConcept&lt;</span><br><span class="line">      _RandomAccessIterator&gt;)</span><br><span class="line">    __glibcxx_requires_valid_range(__first, __last);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (__first == __last)</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> iterator_traits&lt;_RandomAccessIterator&gt;::difference_type</span><br><span class="line">  _DistanceType;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::make_unsigned&lt;_DistanceType&gt;::type __ud_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::uniform_int_distribution&lt;__ud_type&gt; __distr_type;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> __distr_type::param_type __p_type;</span><br><span class="line">    __distr_type __d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (_RandomAccessIterator __i = __first + <span class="number">1</span>; __i != __last; ++__i)</span><br><span class="line">  <span class="built_in">std</span>::iter_swap(__i, __first + __d(__g, __p_type(<span class="number">0</span>, __i - __first)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种实现和之前 <code>std::random_shuffle</code> 函数实现很类似，只是随机数部分有些不同，它的第3个参数需要的是一个均匀随机数生成器URBGs，一个常见的使用方法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"></span><br><span class="line">    std::mt19937 gen(std::random_device&#123;&#125;());</span><br><span class="line">    <span class="built_in">std</span>::shuffle(vec.begin(), vec.end(), gen);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::copy(vec.begin(), vec.end(), <span class="built_in">std</span>::ostream_iterator&lt;<span class="keyword">int</span>&gt;(<span class="built_in">std</span>::<span class="built_in">cout</span>, <span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ g++ testrandom.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testrandom$ ./a.out</span><br><span class="line">3 5 1 2 6 4</span><br></pre></td></tr></table></figure><h1 id="randint"><a href="#randint" class="headerlink" title="randint"></a>randint</h1><p>结尾了顺便说一下偶然看到的一个实验性函数 <code>std::experimental::randint</code>，用于生成指定范围内的一个随机数，目前还没有进入标准，不过看起来使用很方便了，后续有可能被纳入标准吧，贴一下 cppreference 上的例子 <a href="https://en.cppreference.com/w/cpp/experimental/randint" target="_blank" rel="noopener">std::experimental::randint</a> 如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;experimental/random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> random_number = <span class="built_in">std</span>::experimental::randint(<span class="number">100</span>, <span class="number">999</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"random 3-digit number: "</span> &lt;&lt; random_number &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>std::random_shuffle</code> 可以只传递一个待洗牌的区间，函数内会使用默认的 <code>std::rand</code> 函数来完成随机元素的选择，依赖全局状态</li><li><code>std::random_shuffle</code> 也可以传入自定义的随机函数，不过这个函数在C++14表中已经不建议时使用了，在C++17标准中已经被移除</li><li><code>std::shuffle</code> 是C++11标准添加的，也是推荐使用的洗牌函数，它的第三个参数需要传递一个均匀随机数生成器对象</li><li>C++11中的<code>&lt;random&gt;</code>头文件中提供了很多生成随机数的工具，需要搭配生成器和分布器来使用</li><li><code>mt19937</code> 名字看起来有点怪，但它是常用的生成器，mt表示它基于Mersenne Twister算法，19937源于产生随的机数的周期长可达到2^19937-1</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/124534579" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>当被误解时，解释或者争论都是没有用的，有些事情就解释不清楚，或者根本无法解释，甚至没有人会听你解释，想一想，真的什么也做不了，就像一句名言说的，你永远叫不醒一个装睡的人，那个故意误解你的人又怎会听你解释~</p><p>2022-5-3 21:02:56</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;洗牌算法是项目开发中常用的一种算法，它和随机数有着密不可分的关系，比如我们从报名参与活动的前10个用户中选取一个人发放幸运奖，这时可以从[1, 10] 范围内随机一个数来确定幸运儿；如果是抽取两个人呢？那就随机两次！是的，确实可以这样做，但是随着随机次数的增多，后面随机的数字很可能和前面一样，这时就要重复随机才能解决。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="shuffle" scheme="http://AlbertGithubHome.github.io/blog/tags/shuffle/"/>
    
      <category term="洗牌" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%B4%97%E7%89%8C/"/>
    
      <category term="随机数" scheme="http://AlbertGithubHome.github.io/blog/tags/%E9%9A%8F%E6%9C%BA%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>恶搞一下std::forward函数</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/04/20/%E6%81%B6%E6%90%9E%E4%B8%80%E4%B8%8Bstd-forward%E5%87%BD%E6%95%B0/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/04/20/恶搞一下std-forward函数/</id>
    <published>2022-04-20T14:12:10.000Z</published>
    <updated>2022-05-01T14:58:23.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>关于 <code>std::forward</code> 的用法在之前的文章 <a href="https://blog.csdn.net/albertsh/article/details/118886009" target="_blank" rel="noopener">《C++11中std::move和std::forward到底干了啥》</a>已经总结过了，它被称为完美转发函数，用于函数模板中完成参数转发任务，当形参为左值引用时把它转发成左值，而在形参成为右值引用时把它转发成右值，依靠了引用折叠规则和 <code>std::remove_reference</code> 模板。<br><a id="more"></a></p><p>前段时间看到<code>std::forward</code>的源代码时突然有发现有些疑问，后来弄明白了决定换个花样试一试，不过在“恶搞”这个函数之前，先来看一看使用模板的规则，我们以模板函数为例，看看模板是怎么用的。</p><h1 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">Add</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个非常简单的模板函数，直接传入参数就可以调用这个函数做加法运算，就像下面这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">Add</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">T</span> <span class="title">b</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Add(<span class="number">2020</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Add(<span class="number">3.0</span>, <span class="number">2.1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Add(<span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">"happy"</span>), <span class="built_in">std</span>::<span class="built_in">string</span>(<span class="string">" holiday"</span>)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数的运行结果如下：</p><blockquote><p>2022<br>5.1<br>happyholiday</p></blockquote><p>我们在调用模板函数时虽然没有指定模板 <code>T</code> 的类型，但是编译器会自动推导，分别生成以下三个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">Add</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">string</span> a, <span class="built_in">std</span>::<span class="built_in">string</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是当我们采用以下的方式调用函数的时候就会出现编译错误</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Add(<span class="number">3</span>, <span class="number">2.1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testt.cpp --std=c++11</span><br><span class="line">testt.cpp: In <span class="keyword">function</span> ‘int main()’:</span><br><span class="line">testt.cpp:13:28: error: no matching <span class="keyword">function</span> <span class="keyword">for</span> call to ‘Add(int, double)’</span><br><span class="line">     std::cout &lt;&lt; Add(3, 2.1) &lt;&lt; std::endl;</span><br><span class="line">                            ^</span><br><span class="line">testt.cpp:5:3: note: candidate: template&lt;class T&gt; T Add(T, T)</span><br><span class="line"> T Add(T a, T b)</span><br><span class="line">   ^</span><br><span class="line">testt.cpp:5:3: note:   template argument deduction/substitution failed:</span><br><span class="line">testt.cpp:13:28: note:   deduced conflicting types <span class="keyword">for</span> parameter ‘T’ (‘int’ and ‘double’)</span><br><span class="line">     std::cout &lt;&lt; Add(3, 2.1) &lt;&lt; std::endl;</span><br><span class="line">                            ^</span><br></pre></td></tr></table></figure><p>编译器给出的错误很明显，那就是没有匹配 <code>Add(int, double)</code> 的函数生成，这个模板只提供了一个类型参数，遇到这种情况应该怎么办呢？我们知道 int 可以隐式转换成 double 类型，那就让它默认生成一个类型为 double 的模板函数 <code>Add(int, double)</code> 就可以了，所以这种情况下把调用函数写成下面这样就可以成功编译了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; Add&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>, <span class="number">2.1</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>通过这个例子我们发现有些情况下，这个模板函数的参数类型必须显式传递，接下来我们再来熟悉一下 <code>std::forward</code> 函数。</p><h1 id="forwawrd-函数定义"><a href="#forwawrd-函数定义" class="headerlink" title="forwawrd 函数定义"></a>forwawrd 函数定义</h1><p>先来复习一下函数的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  @brief  Forward an lvalue.</span></span><br><span class="line"><span class="comment"> *  @return The parameter cast to the specified type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  This function is used to implement "perfect forwarding".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">constexpr</span> _Tp&amp;&amp;</span><br><span class="line">  forward(<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp; <span class="keyword">__t</span>) <span class="keyword">noexcept</span></span><br><span class="line">  &#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="keyword">__t</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  @brief  Forward an rvalue.</span></span><br><span class="line"><span class="comment"> *  @return The parameter cast to the specified type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  This function is used to implement "perfect forwarding".</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="keyword">constexpr</span> _Tp&amp;&amp;</span><br><span class="line">  forward(<span class="keyword">typename</span> <span class="built_in">std</span>::remove_reference&lt;_Tp&gt;::type&amp;&amp; <span class="keyword">__t</span>) <span class="keyword">noexcept</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">static_assert</span>(!<span class="built_in">std</span>::is_lvalue_reference&lt;_Tp&gt;::value, <span class="string">"template argument"</span></span><br><span class="line">          <span class="string">" substituting _Tp is an lvalue reference type"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;_Tp&amp;&amp;&gt;(<span class="keyword">__t</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>以上两个模板函数就是用来实现完美转发左值引用和右值引用的，那么你可以试试，当调用第一个函数的时候能不能推导出 <code>_Tp</code> 是什么类型，我之前的疑惑也在这里，这个函数的参数 <code>typename std::remove_reference&lt;_Tp&gt;::type&amp; __t</code> 和模板参数类型 <code>_Tp</code> 看起来关系很密切，但好像又没关系，因为虽然知道参数类型 <code>typename std::remove_reference&lt;_Tp&gt;::type&amp; __t</code> 是个左值引用，但是你并不知道 <code>_Tp</code> 是什么类型，它还是需要显式来指定的，我们接下来试一试和我们想的一不一样。</p><h1 id="forwawrd-完美转发"><a href="#forwawrd-完美转发" class="headerlink" title="forwawrd 完美转发"></a>forwawrd 完美转发</h1><p>直接拿一个之前写过的完美转发例子吧，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span>&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"lvalue refrence: val="</span> &lt;&lt; val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(<span class="keyword">int</span>&amp;&amp; val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"rvalue refrence: val="</span> &lt;&lt; val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TPrint</span><span class="params">(T&amp;&amp; t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Print(<span class="built_in">std</span>::forward&lt;T&gt;(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> date = <span class="number">2022</span>;</span><br><span class="line">    TPrint(date);</span><br><span class="line">    TPrint(<span class="number">501</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译运行之后的结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testf.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">lvalue refrence: val=2022</span><br><span class="line">rvalue refrence: val=501</span><br></pre></td></tr></table></figure><p>通过结果我们发现 <code>std::forward</code> 函数在拥有万能引用参数的模板函数中实现了完美转发，左值转发后调用了参数为左值引用的函数，右值转发后调用了参数为右值引用的函数，这时如果我们把调用 <code>std::forward</code> 的地方改一下，去掉指定的参数类型 <code>T</code>，写成 <code>return Print(std::forward(t));</code>，然后编译看看会发生什么</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testf.cpp --std=c++11</span><br><span class="line">testf.cpp: In instantiation of ‘void TPrint(T&amp;&amp;) [with T = int&amp;]’:</span><br><span class="line">testf.cpp:23:16:   required from here</span><br><span class="line">testf.cpp:17:30: error: no matching <span class="keyword">function</span> <span class="keyword">for</span> call to ‘forward(int&amp;)’</span><br><span class="line">     <span class="built_in">return</span> Print(std::forward(t));</span><br><span class="line">                              ^</span><br><span class="line">In file included from /usr/include/c++/5/bits/stl_pair.h:59:0,</span><br><span class="line">                 from /usr/include/c++/5/bits/stl_algobase.h:64,</span><br><span class="line">                 from /usr/include/c++/5/bits/char_traits.h:39,</span><br><span class="line">                 from /usr/include/c++/5/ios:40,</span><br><span class="line">                 from /usr/include/c++/5/ostream:38,</span><br><span class="line">                 from /usr/include/c++/5/iostream:39,</span><br><span class="line">                 from testf.cpp:1:</span><br><span class="line">/usr/include/c++/5/bits/move.h:76:5: note: candidate: template&lt;class _Tp&gt; constexpr _Tp&amp;&amp; std::forward(typename std::remove_reference&lt;_From&gt;::<span class="built_in">type</span>&amp;)</span><br><span class="line">     forward(typename std::remove_reference&lt;_Tp&gt;::<span class="built_in">type</span>&amp; __t) noexcept</span><br><span class="line">     ^</span><br><span class="line">/usr/include/c++/5/bits/move.h:76:5: note:   template argument deduction/substitution failed:</span><br><span class="line">testf.cpp:17:30: note:   couldn<span class="string">'t deduce template parameter ‘_Tp’</span></span><br><span class="line"><span class="string">     return Print(std::forward(t));</span></span><br><span class="line"><span class="string">                              ^</span></span><br><span class="line"><span class="string">In file included from /usr/include/c++/5/bits/stl_pair.h:59:0,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/bits/stl_algobase.h:64,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/bits/char_traits.h:39,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/ios:40,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/ostream:38,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/iostream:39,</span></span><br><span class="line"><span class="string">                 from testf.cpp:1:</span></span><br><span class="line"><span class="string">/usr/include/c++/5/bits/move.h:87:5: note: candidate: template&lt;class _Tp&gt; constexpr _Tp&amp;&amp; std::forward(typename std::remove_reference&lt;_From&gt;::type&amp;&amp;)</span></span><br><span class="line"><span class="string">     forward(typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp; __t) noexcept</span></span><br><span class="line"><span class="string">     ^</span></span><br><span class="line"><span class="string">/usr/include/c++/5/bits/move.h:87:5: note:   template argument deduction/substitution failed:</span></span><br><span class="line"><span class="string">testf.cpp:17:30: note:   couldn'</span>t deduce template parameter ‘_Tp’</span><br><span class="line">     <span class="built_in">return</span> Print(std::forward(t));</span><br><span class="line">                              ^</span><br><span class="line">testf.cpp:17:33: error: <span class="built_in">return</span>-statement with a value, <span class="keyword">in</span> <span class="keyword">function</span> returning <span class="string">'void'</span> [-fpermissive]</span><br><span class="line">     <span class="built_in">return</span> Print(std::forward(t));</span><br><span class="line">                                 ^</span><br><span class="line">testf.cpp: In instantiation of ‘void TPrint(T&amp;&amp;) [with T = int]’:</span><br><span class="line">testf.cpp:24:15:   required from here</span><br><span class="line">testf.cpp:17:30: error: no matching <span class="keyword">function</span> <span class="keyword">for</span> call to ‘forward(int&amp;)’</span><br><span class="line">     <span class="built_in">return</span> Print(std::forward(t));</span><br><span class="line">                              ^</span><br><span class="line">In file included from /usr/include/c++/5/bits/stl_pair.h:59:0,</span><br><span class="line">                 from /usr/include/c++/5/bits/stl_algobase.h:64,</span><br><span class="line">                 from /usr/include/c++/5/bits/char_traits.h:39,</span><br><span class="line">                 from /usr/include/c++/5/ios:40,</span><br><span class="line">                 from /usr/include/c++/5/ostream:38,</span><br><span class="line">                 from /usr/include/c++/5/iostream:39,</span><br><span class="line">                 from testf.cpp:1:</span><br><span class="line">/usr/include/c++/5/bits/move.h:76:5: note: candidate: template&lt;class _Tp&gt; constexpr _Tp&amp;&amp; std::forward(typename std::remove_reference&lt;_From&gt;::<span class="built_in">type</span>&amp;)</span><br><span class="line">     forward(typename std::remove_reference&lt;_Tp&gt;::<span class="built_in">type</span>&amp; __t) noexcept</span><br><span class="line">     ^</span><br><span class="line">/usr/include/c++/5/bits/move.h:76:5: note:   template argument deduction/substitution failed:</span><br><span class="line">testf.cpp:17:30: note:   couldn<span class="string">'t deduce template parameter ‘_Tp’</span></span><br><span class="line"><span class="string">     return Print(std::forward(t));</span></span><br><span class="line"><span class="string">                              ^</span></span><br><span class="line"><span class="string">In file included from /usr/include/c++/5/bits/stl_pair.h:59:0,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/bits/stl_algobase.h:64,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/bits/char_traits.h:39,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/ios:40,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/ostream:38,</span></span><br><span class="line"><span class="string">                 from /usr/include/c++/5/iostream:39,</span></span><br><span class="line"><span class="string">                 from testf.cpp:1:</span></span><br><span class="line"><span class="string">/usr/include/c++/5/bits/move.h:87:5: note: candidate: template&lt;class _Tp&gt; constexpr _Tp&amp;&amp; std::forward(typename std::remove_reference&lt;_From&gt;::type&amp;&amp;)</span></span><br><span class="line"><span class="string">     forward(typename std::remove_reference&lt;_Tp&gt;::type&amp;&amp; __t) noexcept</span></span><br><span class="line"><span class="string">     ^</span></span><br><span class="line"><span class="string">/usr/include/c++/5/bits/move.h:87:5: note:   template argument deduction/substitution failed:</span></span><br><span class="line"><span class="string">testf.cpp:17:30: note:   couldn'</span>t deduce template parameter ‘_Tp’</span><br><span class="line">     <span class="built_in">return</span> Print(std::forward(t));</span><br><span class="line">                              ^</span><br><span class="line">testf.cpp:17:33: error: <span class="built_in">return</span>-statement with a value, <span class="keyword">in</span> <span class="keyword">function</span> returning <span class="string">'void'</span> [-fpermissive]</span><br><span class="line">     <span class="built_in">return</span> Print(std::forward(t));</span><br></pre></td></tr></table></figure><p>这次出了一个很长的编译错误，看来还是需要指定类型的，既然是需要指定的，那我们指定成其他的有没有问题呢？比如写成下面这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Print(<span class="built_in">std</span>::forward&lt;<span class="keyword">float</span>&gt;(t));</span><br></pre></td></tr></table></figure><p>编译运行结果如下，都变成了右值引用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testf.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">rvalue refrence: val=2022</span><br><span class="line">rvalue refrence: val=501</span><br></pre></td></tr></table></figure><p>再改成下面这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Print(<span class="built_in">std</span>::forward&lt;T&amp;&gt;(t));</span><br></pre></td></tr></table></figure><p>编译运行结果如下，都变成了左值引用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testf.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">lvalue refrence: val=2022</span><br><span class="line">lvalue refrence: val=501</span><br></pre></td></tr></table></figure><h1 id="完美转发失效"><a href="#完美转发失效" class="headerlink" title="完美转发失效"></a>完美转发失效</h1><p>上面的这两个例子能说明完美转发失效了吗？这倒也不能说明，第一个例子全都转发成了右值引用，第二个例子全部转发成了左值引用，和我们指定的类型是一致的，也算实现了完美转发，只不过通过这些例子更加深入的理解了完美转发的含义，就是能保证转化成指定的类型，如果指定的类型是个万能引用，就会根据原始类型来完成转发，本次探索之旅到此也就结束了，解答疑惑是个有趣的事情。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>std::forward</code> 的本质还是进行强制类型转换，它会把传入的参数转发成指定的类型</li><li>完美转发其实是可以脱离左值右值概念的，这也是对完美转发更加深入的理解吧</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/123978539" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>每一点付出终有回报，每一滴汗水从不会白流，可能你看不见也摸不着，但其实它已经悄然声息的改变了你，改变了你周围的点点滴滴~</p><p>2022-5-1 22:58:21</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;关于 &lt;code&gt;std::forward&lt;/code&gt; 的用法在之前的文章 &lt;a href=&quot;https://blog.csdn.net/albertsh/article/details/118886009&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《C++11中std::move和std::forward到底干了啥》&lt;/a&gt;已经总结过了，它被称为完美转发函数，用于函数模板中完成参数转发任务，当形参为左值引用时把它转发成左值，而在形参成为右值引用时把它转发成右值，依靠了引用折叠规则和 &lt;code&gt;std::remove_reference&lt;/code&gt; 模板。&lt;br&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C/"/>
    
      <category term="C++11" scheme="http://AlbertGithubHome.github.io/blog/tags/C-11/"/>
    
      <category term="forward" scheme="http://AlbertGithubHome.github.io/blog/tags/forward/"/>
    
      <category term="完美转发" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AE%8C%E7%BE%8E%E8%BD%AC%E5%8F%91/"/>
    
      <category term="funny" scheme="http://AlbertGithubHome.github.io/blog/tags/funny/"/>
    
  </entry>
  
  <entry>
    <title>C++可变参数模板的展开方式</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/04/04/C-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%B1%95%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/04/04/C-可变参数模板的展开方式/</id>
    <published>2022-04-04T12:46:40.000Z</published>
    <updated>2022-04-05T14:16:20.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://en.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener">可变参数模板</a>（variadic templates）是C++11新增的强大的特性之一，它对模板参数进行了高度泛化，能表示0到任意个数、任意类型的参数。相比C++98/03这些类模版和函数模版中只能含固定数量模版参数的“老古董”，可变模版参数无疑是一个巨大的进步。</p><a id="more"></a><p>如果是刚接触可变参数模板可能会觉得比较抽象，使用起来会不太顺手，使用可变参数模板时通常离不开模板参数的展开，所以本文来列举一些常用的模板展开方式，帮助我们来对可变参数模板有一个初步的了解。</p><h1 id="可变参数模板的定义"><a href="#可变参数模板的定义" class="headerlink" title="可变参数模板的定义"></a>可变参数模板的定义</h1><p>可变参数模板和普通模板的定义类似，在写法上需要在 <code>typename</code> 或 <code>class</code> 后面带上省略号<code>...</code>，以下为一个常见的可变参数函数模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">func</span>(<span class="title">T</span>... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个函数模板的参数 <code>args</code> 前面有省略号，所以它就是一个被称为模板参数包（template parameter pack）的可变模版参数，它里面包含了0到N个模版参数，而我们是无法直接获取 <code>args</code> 中的每个参数的，只能通过展开参数包的方式来获取参数包中的每个参数，这也是本文要重点总结的内容。</p><h1 id="参数包的展开"><a href="#参数包的展开" class="headerlink" title="参数包的展开"></a>参数包的展开</h1><p>参数包展开的方式随着c++语言的发展也在与时俱进，我们以实现一个可变参格式化打印函数为例，列举一些常用的方式：</p><h2 id="递归函数方式展开"><a href="#递归函数方式展开" class="headerlink" title="递归函数方式展开"></a>递归函数方式展开</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> ...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">FormatPrint</span>(<span class="title">T</span> <span class="title">first</span>, <span class="title">Args</span>... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; first &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">   FormatPrint(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种递归展开的方式与递归函数的定义是一样的，需要递归出口和不断调用自身，仔细看看这个函数模板是不是都满足啦？递归出口就是这个无模板参数的 <code>FormatPrint</code>，并且在有参模板中一直在调用自身，递归调用的过程时这样的 <code>FormatPrint(4,3,2,1)</code> -&gt; <code>FormatPrint(3,2,1)</code> -&gt; <code>FormatPrint(2,1)</code> -&gt; <code>FormatPrint(1)</code> -&gt; <code>FormatPrint()</code>，输出内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><h2 id="逗号表达式展开"><a href="#逗号表达式展开" class="headerlink" title="逗号表达式展开"></a>逗号表达式展开</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> ...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">FormatPrint</span>(<span class="title">Args</span>... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   (<span class="keyword">void</span>)<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;&#123; (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; args &lt;&lt; <span class="string">"]"</span>, <span class="number">0</span>)... &#125;;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式用到了C++11的新特性<a href="https://en.cppreference.com/w/cpp/language/list_initialization" target="_blank" rel="noopener">初始化列表</a>（Initializer lists）以及很传统的逗号表达式，我们知道逗号表达式的优先级最低，<code>(a, b)</code> 这个表达式的值就是 <code>b</code>，那么上述代码中<code>(std::cout &lt;&lt; &quot;[&quot; &lt;&lt; args &lt;&lt; &quot;]&quot;, 0)</code>这个表达式的值就是0，初始化列表保证其中的内容从左往右执行，args参数包会被逐步展开，表达式前的<code>(void)</code>是为了防止变量未使用的警告，运行过后我们就得到了一个N个元素为0的初始化列表，内容也被格式化输出了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><p>说到这顺便提一下，可以使用<code>sizeof...(args)</code>得到参数包中参数个数。</p><h2 id="enable-if方式展开"><a href="#enable-if方式展开" class="headerlink" title="enable_if方式展开"></a>enable_if方式展开</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> k = <span class="number">0</span>, <span class="keyword">typename</span> tup&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;k == <span class="built_in">std</span>::tuple_size&lt;tup&gt;::value&gt;::type FormatTuple(<span class="keyword">const</span> tup&amp; t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> k = <span class="number">0</span>, <span class="keyword">typename</span> tup&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;k &lt; <span class="built_in">std</span>::tuple_size&lt;tup&gt;::value&gt;::type FormatTuple(<span class="keyword">const</span> tup&amp; t)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; <span class="built_in">std</span>::get&lt;k&gt;(t) &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">    FormatTuple&lt;k + <span class="number">1</span>&gt;(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FormatTuple(<span class="built_in">std</span>::make_tuple(args...));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++11的<a href="https://en.cppreference.com/w/cpp/types/enable_if" target="_blank" rel="noopener"><code>enable_if</code></a>常用于构建需要根据不同的类型的条件实例化不同模板的时候。顾名思义，当满足条件时类型有效。可作为选择类型的小工具，其广泛的应用在 C++ 的模板元编程（meta programming）之中，利用的就是SFINAE原则，英文全称为Substitution failure is not an error，意思就是匹配失败不是错误，假如有一个特化会导致编译时错误，只要还有别的选择，那么就无视这个特化错误而去选择另外的实现，这里的特化概念不再展开，感兴趣可以自行了解，后续可以单独总结一下。</p><p>在上面的代码实现中，基本思路是先将可变模版参数转换为<code>std::tuple</code>，然后通过递增参数的索引来选择恰当的<code>FormatTuple</code>函数，当参数的索引小于tuple元素个数时，会不断取出当前索引位置的参数并输出，当参数索引等于总的参数个数时调用另一个模板重载函数终止递归，编译运行输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><h2 id="折叠表达式展开（c-17）"><a href="#折叠表达式展开（c-17）" class="headerlink" title="折叠表达式展开（c++17）"></a>折叠表达式展开（c++17）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ... &lt;&lt; args) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://en.cppreference.com/w/cpp/language/fold" target="_blank" rel="noopener">折叠表达式</a>（Fold Expressions）是C++17新引进的语法特性，使用折叠表达式可以简化对C++11中引入的参数包的处理，可以在某些情况下避免使用递归，更加方便的展开参数，如上述代码中展示的这样可以方便的展开参数包，不过输出的内容和之前的有些不一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++17</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">1234</span><br><span class="line">good2hello4110</span><br></pre></td></tr></table></figure><p>对比结果发现缺少了格式化的信息，需要以辅助函数的方式来格式化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">format</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">"["</span> &lt;&lt; t &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">    <span class="keyword">return</span> ss.str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ... &lt;&lt; format(args)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次格式化内容就被加进来了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++17</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><p>这样好像还是有点麻烦，我们可以把折叠表达式和逗号表达式组合使用，这样得到的代码就简单多啦，也能完成格式化输出的任务：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ... &lt;&lt; (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; args, <span class="string">"]"</span>)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>Variadic templates</code> 是C++11新增的强大的特性之一，它对模板参数进行了高度泛化</li><li><code>Initializer lists</code> 是C++11新加的特性，可以作为函数参数和返回值，长度不受限制比较方便</li><li><code>Fold Expressions</code> 是C++17新引进的语法特性，可以方便的展开可变参数模板的参数包</li><li>可变参数模板的参数包在C++11的环境下，可以利用递归、逗号表达式、enable_if等方式进行展开</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/123958013" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>有些人苦中作乐，而有些人却是身在福中不知福。人性本贪婪，只是度不同。我虽知福，奈何要想一家安稳还差的太多~</p><p>2022-4-5 22:02:27</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/language/parameter_pack&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;可变参数模板&lt;/a&gt;（variadic templates）是C++11新增的强大的特性之一，它对模板参数进行了高度泛化，能表示0到任意个数、任意类型的参数。相比C++98/03这些类模版和函数模版中只能含固定数量模版参数的“老古董”，可变模版参数无疑是一个巨大的进步。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="可变参数" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
      <category term="template" scheme="http://AlbertGithubHome.github.io/blog/tags/template/"/>
    
      <category term="模板" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>epoll的LT模式（水平触发）和ET模式（边沿触发）</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/03/27/epoll%E7%9A%84LT%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91%EF%BC%89%E5%92%8CET%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91%EF%BC%89/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/03/27/epoll的LT模式（水平触发）和ET模式（边沿触发）/</id>
    <published>2022-03-27T13:35:00.000Z</published>
    <updated>2022-04-05T14:16:32.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>epoll的触发模式是个引发讨论非常多的话题，网络上这方面总结的文章也很多，首先从名字上就不是很统一，LT模式常被称为水平触发、电平触发、条件触发，而ET模式常被称为边缘触发、边沿触发等，这些都是从英文翻译过来的，只不过翻译的时候有些差异，LT全称 level-triggered，ET全称 edge-triggered。</p><a id="more"></a><p>虽然这个知识点热度很高，但很多人对于它的理解总是差那么一点，特别是在面试的时候，很多面试者总是处于一种回忆和背诵的状态，其实这两种模式真的不需要去死记硬背，下面说说我个人对这两种模式的理解和记忆方法。</p><h1 id="名称的记忆"><a href="#名称的记忆" class="headerlink" title="名称的记忆"></a>名称的记忆</h1><p>每次提到ET（边沿触发）首先映入我脑海的是大学里《数字逻辑电路》这门课程，里面会提到低电平、高电平，当电平从低到高时会有一个上升沿，而电平从高到低时会有一个下降沿，这个“沿”就是边沿触发时提到的“边沿”，跟马路边的马路牙子是同一种概念，也就是指状态变化的时候。提起上升沿和下降沿我还是印象很深的，当时我可是占用了好几节课的时间用Verilog语言写了一个显示“HELLO WORLD”的仿真波形，依靠的就是电平变化中的“沿”。</p><h1 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h1><p>LT模式和ET模式可以类比电平变化来学习，但是在实际应用中概念却不是完全一样的，在epoll的应用中涉及到关于IO的读写，而读写的状态变化有哪些呢？可读、不可读、可写、不可写，其实就是这四种状态而已，以socket为例。</p><p>可读：socket上有数据<br>不可读：socket上没有数据了<br>可写：socket上有空间可写<br>不可写：socket上无空间可写</p><blockquote><p>对于水平触发模式，一个事件只要有，就会一直触发。<br>对于边缘触发模式，只有一个事件从无到有才会触发。</p></blockquote><h1 id="LT模式"><a href="#LT模式" class="headerlink" title="LT模式"></a>LT模式</h1><p>对于读事件 <code>EPOLLIN</code>，只要socket上有未读完的数据，<code>EPOLLIN</code> 就会一直触发；对于写事件 <code>EPOLLOUT</code>，只要socket可写（一说指的是 TCP 窗口一直不饱和，我觉得是TCP缓冲区未满时，这一点还需验证），<code>EPOLLOUT</code> 就会一直触发。</p><p>在这种模式下，大家会认为读数据会简单一些，因为即使数据没有读完，那么下次调用epoll_wait()时，它还会通知你在上没读完的文件描述符上继续读，也就是人们常说的这种模式不用担心会丢失数据。</p><p>而写数据时，因为使用 LT 模式会一直触发 <code>EPOLLOUT</code> 事件，那么如果代码实现依赖于可写事件触发去发送数据，一定要在数据发送完之后移除检测可写事件，避免没有数据发送时无意义的触发。</p><h1 id="ET模式"><a href="#ET模式" class="headerlink" title="ET模式"></a>ET模式</h1><p>对于读事件 <code>EPOLLIN</code>，只有socket上的数据从无到有，<code>EPOLLIN</code> 才会触发；对于写事件 <code>EPOLLOUT</code>，只有在socket写缓冲区从不可写变为可写，<code>EPOLLOUT</code> 才会触发（刚刚添加事件完成调用epoll_wait时或者缓冲区从满到不满）</p><p>这种模式听起来清爽了很多，只有状态变化时才会通知，通知的次数少了自然也会引发一些问题，比如触发读事件后必须把数据收取干净，因为你不一定有下一次机会再收取数据了，即使不采用一次读取干净的方式，也要把这个激活状态记下来，后续接着处理，否则如果数据残留到下一次消息来到时就会造成延迟现象。</p><p>这种模式下写事件触发后，后续就不会再触发了，如果还需要下一次的写事件触发来驱动发送数据，就需要再次注册一次检测可写事件。</p><h1 id="数据的读取和发送"><a href="#数据的读取和发送" class="headerlink" title="数据的读取和发送"></a>数据的读取和发送</h1><p>关于数据的读比较好理解，无论是LT模式还是ET模式，监听到读事件从socket开始读数据就好了，只不过读的逻辑有些差异，LT模式下，读事件触发后，可以按需收取想要的字节数，不用把本次接收到的数据收取干净，ET模式下，读事件触发后通常需要数据一次性收取干净。</p><p>而数据的写不太容易理解，因为数据的读是对端发来数据导致的，而数据的写其实是自己的逻辑层触发的，所以在通过网络发数据时通常都不会去注册监可写事件，一般都是调用 <code>send</code> 或者 <code>write</code> 函数直接发送，如果发送过程中， 函数返回 <code>-1</code>，并且错误码是 EWOULDBLOCK 表明发送失败，此时才会注册监听可写事件，并将剩余的服务存入自定义的发送缓冲区中，等可写事件触发后再接着将发送缓冲区中剩余的数据发送出去。</p><h1 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h1><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><p>以下为一个epoll触发模式测试的基础代码，也不算太长，直接拿来就可以测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt; //for socket</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;  //for htonl htons</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;  //for epoll_ctl</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;     //for close</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;      //for fcntl</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;      //for errno</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     //for cout</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fd_object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    fd_object(<span class="keyword">int</span> fd) &#123; listen_fd = fd; &#125;</span><br><span class="line">    ~fd_object() &#123; close(listen_fd); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> listen_fd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">./epoll for lt mode</span></span><br><span class="line"><span class="comment">and</span></span><br><span class="line"><span class="comment">./epoll 1 for et mode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//create a socket fd</span></span><br><span class="line">    <span class="keyword">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (listen_fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create listen socket fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">fd_object <span class="title">obj</span><span class="params">(listen_fd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set socket to non-block</span></span><br><span class="line">    <span class="keyword">int</span> socket_flag = fcntl(listen_fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    socket_flag |= O_NONBLOCK;</span><br><span class="line">    <span class="keyword">if</span> (fcntl(listen_fd, F_SETFL, socket_flag) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"set listen fd to nonblock error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//init server bind info</span></span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">51741</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">bind_addr</span>;</span></span><br><span class="line">    bind_addr.sin_family = AF_INET;</span><br><span class="line">    bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    bind_addr.sin_port = htons(port);</span><br><span class="line">    <span class="keyword">if</span> (bind(listen_fd, (struct sockaddr *)&amp;bind_addr, <span class="keyword">sizeof</span>(bind_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bind listen socket fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start listen</span></span><br><span class="line">    <span class="keyword">if</span> (listen(listen_fd, SOMAXCONN) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"listen error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"start server at port ["</span> &lt;&lt; port &lt;&lt; <span class="string">"] with ["</span> &lt;&lt; (argc &lt;= <span class="number">1</span> ? <span class="string">"LT"</span> : <span class="string">"ET"</span>) &lt;&lt; <span class="string">"] mode."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//create a epoll fd</span></span><br><span class="line">    <span class="keyword">int</span> epoll_fd = epoll_create(<span class="number">88</span>);</span><br><span class="line">    <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create a epoll fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    epoll_event listen_fd_event;</span><br><span class="line">    listen_fd_event.data.fd = listen_fd;</span><br><span class="line">    listen_fd_event.events = EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) listen_fd_event.events |= EPOLLET;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add epoll event for listen fd</span></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listen_fd, &amp;listen_fd_event) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll ctl error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        epoll_event epoll_events[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> n = epoll_wait(epoll_fd, epoll_events, <span class="number">1024</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="comment">//timeout</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (epoll_events[i].events &amp; EPOLLIN)<span class="comment">//trigger read event</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (epoll_events[i].data.fd == listen_fd)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//accept a new connection</span></span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">                    <span class="keyword">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">                    <span class="keyword">int</span> client_fd = accept(listen_fd, (struct sockaddr*)&amp;client_addr, &amp;client_addr_len);</span><br><span class="line">                    <span class="keyword">if</span> (client_fd == <span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    socket_flag = fcntl(client_fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">                    socket_flag |= O_NONBLOCK;</span><br><span class="line">                    <span class="keyword">if</span> (fcntl(client_fd, F_SETFL, socket_flag) == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        close(client_fd);</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"set client fd to non-block error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    epoll_event client_fd_event;</span><br><span class="line">                    client_fd_event.data.fd = client_fd;</span><br><span class="line">                    client_fd_event.events = EPOLLIN | EPOLLOUT;</span><br><span class="line">                    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) client_fd_event.events |= EPOLLET;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &amp;client_fd_event) == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"add client fd to epoll fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                        close(client_fd);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"accept a new client fd ["</span> &lt;&lt; client_fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLIN event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">char</span> recvbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                    <span class="keyword">int</span> m = recv(epoll_events[i].data.fd, recvbuf, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// only read 1 bytes when read event triggered</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (m == <span class="number">0</span> || (m &lt; <span class="number">0</span> &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EINTR))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, epoll_events[i].data.fd, <span class="literal">NULL</span>) != <span class="number">-1</span>)</span><br><span class="line">                            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] disconnected."</span> &lt;&lt;  <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                        close(epoll_events[i].data.fd);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv data from client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] and data is ["</span> &lt;&lt; recvbuf &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (epoll_events[i].events &amp; EPOLLOUT)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (epoll_events[i].data.fd == listen_fd) <span class="comment">//trigger write event</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLOUT event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单说下这段代码的测试方法，可以使用 <code>g++ testepoll.cpp -o epoll</code> 进行编译，编译后通过 <code>./epoll</code> 运行为LT模式，通过 <code>./epoll et</code>模式运行为ET模式，我们用编译好的epoll程序作为服务器，使用nc命令来模拟一个客户端。</p><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><ol><li>编译后直接<code>./epoll</code>，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 命令模拟一次连接，此时 <code>./epoll</code> 会产生大量的 <code>EPOLLOUT event triggered for client fd ...</code>，那是因为在LT模式下，<code>EPOLLOUT</code>会被一直触发。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll</span><br><span class="line">start server at port [<span class="number">51741</span>] with [LT] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>注释包含 <code>EPOLLOUT event triggered for client fd</code> 输出内容的第152行代码，编译后 <code>./epoll</code>运行，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 模拟一次连接后，输入abcd回车，可以看到服务器<code>./epoll</code>输出内容，<code>EPOLLIN</code>被触发多次，每次读取一个字节。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll</span><br><span class="line">start server at port [<span class="number">51741</span>] with [LT] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [a].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [b].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [c].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [d].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br></pre></td></tr></table></figure><ol><li>还原刚才注释的那行代码，编译后执行 <code>./epoll et</code> 启动服务器，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 模拟一次连接后，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 模拟一次连接，服务器窗口显示触发了<code>EPOLLOUT</code>事件</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br></pre></td></tr></table></figure><p>在此基础上，从刚刚运行 <code>nc</code>命令的窗口中输入回车、输入回车、输出回车，那么epoll服务器窗口看到的是触发了三次<code>EPOLLIN</code>事件，每次收到一个回车:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br></pre></td></tr></table></figure><p>但是如果在nc模拟的客户端里输出abcd回车，那么在epoll服务器窗口触发一次<code>EPOLLIN</code>事件接收到一个a之后便再也不会触发<code>EPOLLIN</code>了，即使你在nc客户端在此输入也没有用，那是因为在接受的缓冲区中一直还有数据，新数据来时没有出现缓冲区从空到有数据的情况，所以在ET模式下也注意这种情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [a].</span><br></pre></td></tr></table></figure><h2 id="怎么解决ET触发了一次就不再触发了"><a href="#怎么解决ET触发了一次就不再触发了" class="headerlink" title="怎么解决ET触发了一次就不再触发了"></a>怎么解决ET触发了一次就不再触发了</h2><p>改代码呗，ET模式在连接后触发一次<code>EPOLLOUT</code>，接收到数据时触发一次<code>EPOLLIN</code>，如果数据没收完，以后这两个事件就再也不会被触发了，要想改变这种情况可以再次注册一下这两个事件，时机可以选择接收到数据的时候，所以可以修改这部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLIN event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> m = recv(epoll_events[i].data.fd, recvbuf, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// only read 1 bytes when read event triggered</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || (m &lt; <span class="number">0</span> &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EINTR))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, epoll_events[i].data.fd, <span class="literal">NULL</span>) != <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] disconnected."</span> &lt;&lt;  <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        close(epoll_events[i].data.fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv data from client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] and data is ["</span> &lt;&lt; recvbuf &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加再次注册的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLIN event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> m = recv(epoll_events[i].data.fd, recvbuf, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// only read 1 bytes when read event triggered</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || (m &lt; <span class="number">0</span> &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EINTR))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, epoll_events[i].data.fd, <span class="literal">NULL</span>) != <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] disconnected."</span> &lt;&lt;  <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        close(epoll_events[i].data.fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    epoll_event client_fd_event;</span><br><span class="line">    client_fd_event.data.fd = epoll_events[i].data.fd;</span><br><span class="line">    client_fd_event.events = EPOLLIN | EPOLLOUT;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) client_fd_event.events |= EPOLLET;</span><br><span class="line"></span><br><span class="line">    epoll_ctl(epoll_fd, EPOLL_CTL_MOD, epoll_events[i].data.fd, &amp;client_fd_event);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv data from client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] and data is ["</span> &lt;&lt; recvbuf &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次以 <code>./epoll et</code> 方式启动服务器，使用 <code>nc -v 127.0.0.1 51741</code> 模拟客户端，输入abc回车发现，epoll服务器输出显示触发的事件变了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [a].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [b].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [c].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>LT模式会一直触发<code>EPOLLOUT</code>，当缓冲区有数据时会一直触发<code>EPOLLIN</code></li><li>ET模式会在连接建立后触发一次<code>EPOLLOUT</code>，当收到数据时会触发一次<code>EPOLLIN</code></li><li>LT模式触发<code>EPOLLIN</code>时可以按需读取数据，残留了数据还会再次通知读取</li><li>ET模式触发<code>EPOLLIN</code>时必须把数据读取完，否则即使来了新的数据也不会再次通知了</li><li>LT模式的<code>EPOLLOUT</code>会一直触发，所以发送完数据记得删除，否则会产生大量不必要的通知</li><li>ET模式的<code>EPOLLOUT</code>事件若数据未发送完需再次注册，否则不会再有发送的机会</li><li>通常发送网络数据时不会依赖<code>EPOLLOUT</code>事件，只有在缓冲区满发送失败时会注册这个事件，期待被通知后再次发送</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/123468650" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>即使是在灿烂的阳光下也会有黑暗的角落，不能因为角落的阴暗就忽略阳光下的美好，我们要做的不是把黑暗面放大，而是要做阳光的传递者，哪怕是一面面镜子，通过反射来照亮那星星点点的黑暗，认清自己，不与黑暗为伍，那绝不是你自甘堕落的借口。</p><p>两千光束已然出发~</p><p>2022-4-4 18:25:50</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;epoll的触发模式是个引发讨论非常多的话题，网络上这方面总结的文章也很多，首先从名字上就不是很统一，LT模式常被称为水平触发、电平触发、条件触发，而ET模式常被称为边缘触发、边沿触发等，这些都是从英文翻译过来的，只不过翻译的时候有些差异，LT全称 level-triggered，ET全称 edge-triggered。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/categories/Network/"/>
    
    
      <category term="epoll" scheme="http://AlbertGithubHome.github.io/blog/tags/epoll/"/>
    
      <category term="LT" scheme="http://AlbertGithubHome.github.io/blog/tags/LT/"/>
    
      <category term="ET" scheme="http://AlbertGithubHome.github.io/blog/tags/ET/"/>
    
      <category term="水平触发" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91/"/>
    
      <category term="边沿触发" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>总结下各种常见树形结构的定义及特点（二叉树、AVL树、红黑树、Trie树、B树、B+树）</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/03/13/%E6%80%BB%E7%BB%93%E4%B8%8B%E5%90%84%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/03/13/总结下各种常见树形结构的定义及特点/</id>
    <published>2022-03-13T09:18:21.000Z</published>
    <updated>2022-03-13T14:48:05.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>树形结构相比于数组、链表、队列和栈等线性结构要复杂的多，因为树本身的概念就比较多，通过设定一些条件和限制就可以定义出一种新类型的树，结果造成了树的“变化多端”，所以要学习一种树要从树的定义入手，然后根据定义和特点来熟悉各种树适合的场景，这样就可以做到“树尽其用”目的了。</p><a id="more"></a><h1 id="一棵普通的树"><a href="#一棵普通的树" class="headerlink" title="一棵普通的树"></a>一棵普通的树</h1><p>树形结构和现实中的树很像，只不过现实中的树根长在地上，而树形结构再展示的时候一般把树根画在“天上”，树形结构中数据元素之间存在着“一对多”的关系，具有以下特点：</p><ul><li>没有父节点的节点称为根节点</li><li>除空树外每棵树只有一个根节点</li><li>每个节点都只有有限个子节点或无子节点</li><li>每个非根节点有且只有一个父节点</li><li>树里面没有环路，如果从一个节点出发，除非往返，否则无法回到起点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/tree.png" alt="基础的树"></p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul><li>根节点：最顶层的节点就是根结点，它是整棵树的源头</li><li>叶子节点：在树下端的节点，就是其子节点个数为0的节点</li><li>节点的度：指定节点有几个分叉就说这个节点的度是几</li><li>树的度：只看根结点，树的度等价于根节点的度</li><li>节点高度：指从这个节点到叶子节点的距离（一共经历了几个节点）</li><li>节点深度：指从这个节点到根节点的距离（一共经历了几个节点）</li><li>树的高度：指所有节点高度的最大值</li><li>树的深度：指所有节点深度的最大值</li><li>节点的层：从根节点开始，假设根节点为第1层，根节点的子节点为第2层，依此类推</li></ul><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是对普通树形结构进行限定得到的一种特殊的树，规定树中节点的度不大于2，当节点有两个子节点，也就是有两颗子树时，它们有左右之分，分别被称为左子树和右子树，左子树和右子树又同样都是二叉树。</p><h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><ul><li>二叉树的第i层上至多有2^(i-1)（i≥1）个节点</li><li>深度为h的二叉树中至多含有2^h-1个节点</li><li>若在任意一棵二叉树中，有n个叶子节点，有m个度为2的节点，则必有n=m+1</li><li>具有n个节点的满二叉树深为log(2n+1)</li><li>若对一棵有n个节点的完全二叉树进行顺序编号（1≤i≤n），那么，对于编号为i（i≥1）的节点<ul><li>当i=1时，该节点为根，它无双亲节点</li><li>当i&gt;1时，该节点的双亲节点的编号为i/2</li><li>若2i≤n，则有编号为2i的左节点，否则没有左节点</li><li>若2i+1≤n，则有编号为2i+1的右节点，否则没有右节点</li></ul></li></ul><h2 id="二叉树特例"><a href="#二叉树特例" class="headerlink" title="二叉树特例"></a>二叉树特例</h2><p>完美二叉树（Perfect Binary Tree）：除了叶子结点之外的每一个结点都有两个孩子，每一层都被完全填充</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/perfecttree.png" alt="完美二叉树"></p><p>完全二叉树（Complete Binary Tree）：除了最后一层之外的其他每一层都被完全填充，并且所有结点都保持向左对齐</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/completetree.png" alt="完全二叉树"></p><p>完满二叉树（Full Binary Tree）： 除了叶子结点之外的每一个结点都有两个孩子结点</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/fulltree.png" alt="完满二叉树"></p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><p>二叉查找树是一种特殊的二叉树，又称为排序二叉树、二叉搜索树、二叉排序树等等，它实际上是数据域有序的二叉树，即对树上的每个结点，都满足其左子树上所有结点的数据域均小于或等于根结点的数据域，右子树上所有结点的数据域均大于根结点的数据域。</p><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p>平衡二叉树是由前苏联的两位数学家G.M.Adelse-Velskil和E.M.Landis联合提出，因此一般也称作AVL树，AVL树本质还是一棵二叉查找树，只是在其基础上增加了“平衡”的要求，需保证其左子树与右子树的高度之差的绝对值不超过1，其中左子树与右子树的高度因子之差称为平衡因子。</p><p>对于AVL树，不管我们是执行插入还是删除操作，只要不满足上面的条件，就要通过旋转来保持平衡。由于旋转比较耗时，所以AVL树适合用于插入与删除次数比较少，但查找多的情况。</p><h3 id="特点及应用"><a href="#特点及应用" class="headerlink" title="特点及应用"></a>特点及应用</h3><p>所有节点的左右子树高度差不超过1，广泛用于Windows NT内核中</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树也是一颗二叉查找树，需要为每个节点存储节点的颜色，可以是红或黑。通过对任何一条从根到叶子的路径上各个节点着色的方式的限制，来确保没有一条路径会比其它路径长出两倍，因此，红黑树是一种弱平衡二叉树。</p><p>由于是弱平衡二叉树，那么在相同的节点情况下，AVL树的高度小于等于红黑树的高度，相对于要求严格的AVL树来说，它的旋转次数少，所以对于插入，删除操作较多的情况下，用红黑树的查找效率会更高一些。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>每个节点非红即黑</li><li>根节点是黑的</li><li>每个叶子节点（叶子节点即树尾端NULL节点）都是黑的</li><li>每条路径都包含相同的黑节点</li><li>如果一个节点是红的，那么它的两儿子都是黑的</li><li>对于任意节点而言，其到叶子点的每条路径都包含相同数目的黑节点</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>广泛用于C++的STL中，如 <code>map</code> 和 <code>set</code> 是用红黑树实现的</li><li>Linux的进程调度用红黑树管理进程控制块，进程的虚拟内存空间都存储在一颗红黑树上，每个虚拟内存空间都对应红黑树的一个节点</li><li>IO多路复用的 <code>epoll</code> 采用红黑树组织管理<code>socket fd</code>，以支持快速的增删改查</li><li>Nginx中用红黑树管理定时器，可以快速得到距离当前最小的定时器</li><li>Java的TreeMap的用红黑树实现</li></ul><h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><p>Trie树又被称为前缀树、字典树是一种用于快速检索的多叉树结构。字典树把字符串看成字符序列，根据字符串中字符序列的先后顺序构造从上到下的树结构，树结构中的每一条边都对应着一个字符。字典树上存储的字符串被视为从根节点到某个节点之间的一条路径，并在终点节点上做个标记”该节点对应词语的结尾”，正因为有终点节点的存在，字典树不仅可以实现简单的存储字符串，还可以实现字符串的映射，只需要将相对应的值悬挂在终点节点上即可。</p><h2 id="特点及应用-1"><a href="#特点及应用-1" class="headerlink" title="特点及应用"></a>特点及应用</h2><p>Trie的核心思想是空间换时间，有如下基本性质：</p><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同</li></ul><p>字典树能够利用字符串中的公共前缀，这样可能会节省内存，利用字符串的公共前缀可以减少查询字符串的时间，能够最大限度的减少无谓的字符串比较，同时在查询的过程中不需要预知待查询字符串的长度，沿着字典树的边进行匹配，查询效率比较高，但是如果系统中存在大量字符串并且这些字符串基本没有前缀，相应的字典树内存消耗也会很大。正是由于字典树的这些特点，字典树被用于统计、排序和保存大量的字符串（不仅限于字符串），还可用于搜索引擎的关键词提示功能。</p><h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><p>B树是一个多路平衡查找树，B树的出现是为了弥合不同的存储级别之间的访问速度上的巨大差异，实现高效的I/O。平衡二叉树的查找效率是非常高的，并可以通过降低树的深度来提高查找的效率。但是当数据量非常大，树的存储的元素数量是有限的，这样会导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下，同时数据量过大会导致内存空间不够容纳平衡二叉树所有结点的情况，而B树是解决这个问题的很好的结构。</p><p>要想了解B树需要了解一个很重要的概念，B树中所有节点的度的最大值称为B树的阶，记为m，这是一个跟重要值，也就是说m阶B树指的是节点度最大为m的B树。</p><h2 id="定义及特点"><a href="#定义及特点" class="headerlink" title="定义及特点"></a>定义及特点</h2><ul><li>每个节点最多只有m个子节点</li><li>根结点的儿子数为[2, m]</li><li>除根结点以外的非叶子结点的儿子数为[m/2, m]，向上取整</li><li>非叶子结点的关键字个数=子节点数-1</li><li>所有叶子都出现在同一层</li><li>k个关键字把节点拆成k+1段，分别指向k+1个儿子，同时满足查找树的大小关系</li><li>非叶子节点中不仅包含索引，也会包含数据</li></ul><h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><p>B树是一种平衡的多路查找树，主要用作文件的索引。其优势是当你要查找的值恰好处在一个非叶子节点时，查找到该节点就会成功并结束查询，有很多基于频率的搜索是选用B树，越频繁查询的结点越往根上走，前提是需要对查询做统计，而且要对key做一些变化。</p><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>B+树是b树的一种变体，查询性能更好，m阶的b+树具有以下特征：</p><ul><li>有n棵子树的非叶子结点中含有n个关键字（b树是n-1个），这些关键字不保存数据，只用来索引，所有数据都保存在叶子节点（b树是每个关键字都保存数据）</li><li>所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接</li><li>所有的非叶子结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字</li><li>通常在b+树上有两个头指针，一个指向根结点，一个指向关键字最小的叶子结点</li><li>同一个数字会在不同节点中重复出现，根节点的最大元素就是b+树的最大元素</li></ul><h2 id="B-树的优势及应用"><a href="#B-树的优势及应用" class="headerlink" title="B+树的优势及应用"></a>B+树的优势及应用</h2><ul><li><p>B+tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多，相对来说IO读写次数也就降低了。</p></li><li><p>由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p></li><li><p>B+树支持范围遍历，只要遍历叶子节点就可以实现整棵树的遍历，而在数据库中基于范围的查询是非常频繁的，这一点要明显由于B树。</p></li></ul><p>由于拥有以上特点，B+广泛应用于文件存储系统以及数据库系统中。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>树是一种常见的非线性结构，拥有众多变种</li><li>二叉树是树形结构的一大类，每个节点最多拥有两个子节点树，左右子树顺序固定</li><li>AVL树是平衡二叉树，任意节点的左右子树高度差最大为1</li><li>红黑树是弱平衡二叉树，每个节点记录的自己的颜色，用来控制左右子树高度不大于2倍</li><li>Trie树又叫字典树，是一种用于快速检索的多叉树结构</li><li>B树是一种多路平衡树，用于提高了磁盘IO性能，多用于文件系统的索引</li><li>B+树是对B树的改进，仅在叶子节点存储数据，相比于B树更加矮胖，支持范围遍历</li></ul><hr><h2 id="gt-gt-反爬链接，请勿点击，原地爆炸，概不负责！-lt-lt"><a href="#gt-gt-反爬链接，请勿点击，原地爆炸，概不负责！-lt-lt" class="headerlink" title=" ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== "></a><center><a href="https://blog.csdn.net/albertsh/article/details/122916170" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center></h2><blockquote><p>世间从来没有什么『感同身受』，每个人面对相同的事件和意外都会因为家庭背景、个人经历的差异而有不同的反应，更不要说那些没经历过的人，即使你曾经真的经历过类似的事情，那么在被漫长的时间洗礼之后，一切都会淡化许多，所以“未经他人苦，莫劝他人善。你若经我苦，未必有我善”~</p><p>2022-3-13 22:47:31</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;树形结构相比于数组、链表、队列和栈等线性结构要复杂的多，因为树本身的概念就比较多，通过设定一些条件和限制就可以定义出一种新类型的树，结果造成了树的“变化多端”，所以要学习一种树要从树的定义入手，然后根据定义和特点来熟悉各种树适合的场景，这样就可以做到“树尽其用”目的了。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://AlbertGithubHome.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A0%91/"/>
    
      <category term="树的特点" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    
      <category term="红黑树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
      <category term="字典树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>简单梳理下git的使用感受，思考git中最重要的是什么</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/02/13/%E7%AE%80%E5%8D%95%E6%A2%B3%E7%90%86%E4%B8%8Bgit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97%EF%BC%8C%E6%80%9D%E8%80%83git%E4%B8%AD%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/02/13/简单梳理下git的使用感受，思考git中最重要的是什么/</id>
    <published>2022-02-13T04:05:33.000Z</published>
    <updated>2022-04-20T14:09:24.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作中使用git是从两年前开始的，之前一直<code>add -&gt; commit -&gt;push</code>常规操作，真正在工作中使用之后才渐渐理解了git的强大，这种理解是建立在不断解决问题的基础上的，不断的处理遇到的问题，就像升级打怪一样，对git的理解也越来越全面。因为在使用git之前一直用svn作为版本控制工具，所以对git和svn的区别也有了自己的认识，关于两者的区别网上的文章一搜一大把，我就不重复了，我仅仅从自己的理解来描述下两者的不同。</p><a id="more"></a><h1 id="git和svn"><a href="#git和svn" class="headerlink" title="git和svn"></a>git和svn</h1><p>关于git和svn的区别，网上的文章确实很多，大多数会提到分布式、存储方式、版本号、完整性等方面，而我今天要写的区别是两者提交记录的结构。</p><p>既然作为版本控制工具，那么每次历史提交都必须可以追溯和回退，在svn中提交记录时线性的，以时间轴为参考基准，所有提交按照时间先后排列，因为svn记录必须提交到服务器才能生效，所有服务器相当于各个svn客户端的总控，各个svn提交到服务器时线性排列，且必须将本地文件状态更新成和服务器相同时才能修改提交。</p><p>正因为在svn中有服务器负责总控操作，所以能保证时间最新的提交记录就是整个svn最新的状态，提交记录不依赖客户端时间，完全由服务器时间进行排序。</p><p>在git中没有这样的总控服务器，虽然一般情况下每个代码库都会有统一的托管服务器，但是它的作用任何一个git客户端都能代替，因为git是可以离线提交的，托管服务器只是我们用来存储代码的地方，与svn服务器按时间排序的做法大不相同。</p><p>git的提交记录通常是一个树形结构，个别时候会变成有“起点”和“终点”的网状结构，在git中时间只具备参考意义，并不能决定提交记录的先后，如果你对这一点还心存怀疑，可能你是个svn的重度用户，一时还没理解git操作原理。</p><p>对于这个问题可以举个例子，操作同一个文件，在svn中2月13日修改一次，2月14日修改一次，那么2月15日看这个文件一定是2月14日修改后的状态；而在git中，同样是那个文件分别在2月13日和2月14日修改一次，2月15日文件的状态取决了两次修改是否在同一分支，以及合并时是怎样处理的，这种错位随着时间的延长和多分支的合并，往往对时间的依赖“微乎其微”，此时再也不能用时间来衡量提交的先后了。</p><p>如果一开始就是git，上面提到的这个问题还不太明显，但是用惯了svn再使用git，处理历史回溯问题时往往容易找错方向，经常通过时间过滤出来的内容并不是自己想要的，这一点在实际操作中需要注意。</p><h1 id="git最重要的是什么"><a href="#git最重要的是什么" class="headerlink" title="git最重要的是什么"></a>git最重要的是什么</h1><p>相信这个问题每个人都有自己的答案，有人认为是分布式，有人认为是切换分支很方便，而我的答案是 <code>commit 的设计哲学</code>，我觉得这是git中的精髓，git中的commit就像一个链表中的元素，用来将自身和其他的commit串联到一起，形成<code>branch</code>、<code>tag</code>、<code>HEAD</code> 等等。</p><p>我们可以通过 <code>git log</code> 命令来看一条 commit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1</span><br><span class="line">commit 7bf665f125a4771db095c83a7ad6ed46692cd314 (HEAD -&gt; 6.0, tag: 6.0.6, origin/6.0)</span><br><span class="line">Author: Oran Agra &lt;oran@redislabs.com&gt;</span><br><span class="line">Date:   Sun Jul 19 14:00:20 2020 +0300</span><br><span class="line"></span><br><span class="line">    Redis 6.0.6.</span><br></pre></td></tr></table></figure><p>这条commit id 为 <code>7bf665f125a4771db095c83a7ad6ed46692cd314</code>，这在整个库是惟一的，通过 <code>git log</code> 可以看到这次提交的时间、作者、简要说明等信息，那么这次提交和库是什么关系呢？</p><p>通过括号中的内容可以知道当前提交是这个库的<code>6.0</code>分支，同时为标签<code>6.0.6</code>，也与远端的<code>6.0</code>分支同步。</p><p>使用 <code>git cat-file</code> 命令可以进一步查询这个commit的组织形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p HEAD</span><br><span class="line">tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595156420 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Redis 6.0.6.</span><br></pre></td></tr></table></figure><p>可以发现这次提交包含了 <code>tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</code>，同时它的父提交就是 <code>parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</code>，有了这两个id就可以递推出当前版本内容和这个历史记录。</p><p>通过 <code>tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</code> 可以递归找出当前版本中的所有文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">040000 tree 6608d88fe6a7a25b137b869040103ab261310da4    .github</span><br><span class="line">100644 blob e445fd2017bb0c13af2f40cd7f24afefdb603ade    .gitignore</span><br><span class="line">100644 blob 484aeb62186033d32e9a4bdf12434cb6b8c56fb5    00-RELEASENOTES</span><br><span class="line">100644 blob 7af2593407805c308cc25739ac9c6520031de60f    BUGS</span><br><span class="line">100644 blob 000edbeaf0270bf3b9e457274ab092b02b176b84    CONTRIBUTING</span><br><span class="line">100644 blob a381681a1c2524ed586c6a87dfeb9ccdf1e86ded    COPYING</span><br><span class="line">100644 blob 3083f1afd50c34e1139ab1577510a17e968b0ed4    INSTALL</span><br><span class="line">100644 blob 3727894624fdabf72995e6f94998a2cad359f760    MANIFESTO</span><br><span class="line">100644 blob e614ede891f2dd183a3ae41ea1ac3b63fe2e7634    Makefile</span><br><span class="line">100644 blob 55537e01fe862dd200ebe1078033122facfc854e    README.md</span><br><span class="line">100644 blob 2d020d0ceb0ddc7fd0bb2a6185e57a9afd5aef79    TLS.md</span><br><span class="line">040000 tree 43ccdd93a80b35e03160d9db34f1e844a62a74b4    deps</span><br><span class="line">100644 blob 8c53f015a20934bdb41c77152fd32a557d719fae    redis.conf</span><br><span class="line">100755 blob ade1bd09a539ecd8dcdd09e59a658539dab9bce6    runtest</span><br><span class="line">100755 blob 27829a5fe8afacf893fe9bafc4245971ce375d6c    runtest-cluster</span><br><span class="line">100755 blob f6cc0a2589dea0f95b77b226e54200a29b8237ae    runtest-moduleapi</span><br><span class="line">100755 blob 3fb1ef61561289b2bf8622e49645f66dab83eeea    runtest-sentinel</span><br><span class="line">100644 blob 4ca5e5f8fc5abe2938c66a6851bba0c90058620f    sentinel.conf</span><br><span class="line">040000 tree e3b3338a7c60eafb3d9c19d3784e2482beea1d4b    src</span><br><span class="line">040000 tree af5de133fa0a0da30fe487be40783ef9644fba6d    tests</span><br><span class="line">040000 tree 5a82556097d23f0c16a8e5432d464f2ab434fd2a    utils</span><br></pre></td></tr></table></figure><p>通过 <code>parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</code> 可以找出上一次提交，进而递归找出所有的提交，要注意有些commit的parent不止一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">tree 1adcf548620c6134f7d5fd072c05b981d0f36118</span><br><span class="line">parent e15528bf1da1f1232fd08801ad382c915be94662</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595162001 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Run daily CI on PRs to release a branch</span><br></pre></td></tr></table></figure><p>这个commit的设计真的很神奇，一个个commit串起来就是一个branch，本质来讲<code>branch</code>只是commit的一个别名，包括<code>HEAD</code>也是，而 <code>tag</code> 也是对commit的一个描述，在不加描述信息时和commit也是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 6.0.6</span><br><span class="line">tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595156420 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Redis 6.0.6.</span><br><span class="line"></span><br><span class="line">$ git cat-file -p HEAD</span><br><span class="line">tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595156420 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Redis 6.0.6.</span><br></pre></td></tr></table></figure><p>所以理解了commit的定位以后，所有切换分支、切换tag、操作HEAD，本质上都是在对commit进行操作，这些操作的参数完全可以用commit id来替换HEAD、branch name、tag name等等。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>svn的提交记录是一个按时间排序的线性结构，git的提交记录是一个参考时间的树状结构</li><li>git记录中时间先后不能代表commit修改的先后，回溯查找时要注意这一点才能解释很多疑惑</li><li>git中的commit我认为是它的精髓，通过commit的串联和别名，形成分支、标签、HEAD等多种元素，隐藏了细节，方便了操作</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122725846" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>什么才是精彩的人生？扬在脸上的自信、长在心底的善良、融进血里的骨气、刻进生命里的坚强~</p><p>2022-2-13 23:19:05</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作中使用git是从两年前开始的，之前一直&lt;code&gt;add -&amp;gt; commit -&amp;gt;push&lt;/code&gt;常规操作，真正在工作中使用之后才渐渐理解了git的强大，这种理解是建立在不断解决问题的基础上的，不断的处理遇到的问题，就像升级打怪一样，对git的理解也越来越全面。因为在使用git之前一直用svn作为版本控制工具，所以对git和svn的区别也有了自己的认识，关于两者的区别网上的文章一搜一大把，我就不重复了，我仅仅从自己的理解来描述下两者的不同。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/categories/Git/"/>
    
    
      <category term="git" scheme="http://AlbertGithubHome.github.io/blog/tags/git/"/>
    
      <category term="branch" scheme="http://AlbertGithubHome.github.io/blog/tags/branch/"/>
    
      <category term="stash" scheme="http://AlbertGithubHome.github.io/blog/tags/stash/"/>
    
      <category term="commit" scheme="http://AlbertGithubHome.github.io/blog/tags/commit/"/>
    
      <category term="tag" scheme="http://AlbertGithubHome.github.io/blog/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下随时照看服务器进程的ps和top命令</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/01/23/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%9A%8F%E6%97%B6%E7%85%A7%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E7%A8%8B%E7%9A%84ps%E5%92%8Ctop%E5%91%BD%E4%BB%A4/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/01/23/linux环境下随时照看服务器进程的ps和top命令/</id>
    <published>2022-01-23T15:40:05.000Z</published>
    <updated>2022-06-12T12:39:06.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在linux环境服务器下通常是不会安装图形界面的，这时如果想看程序是否在正常运行着，就不能像在windows上一样去查看任务管理器，而是需要通过命令来查询程序的进程运行情况，<code>ps</code> 就是一个查询linux环境下进程运行状态的命令，请注意这个可不是我们P图用的那个工具哦。</p><a id="more"></a><h1 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h1><p><code>ps</code> 命令在man手册中描述是 “report a snapshot of the current processes”，其实它的作用就是上报程序运行时的一个快照。</p><blockquote><p>ps displays information about a selection of the active processes.  If you want a repetitive update of the selection and the displayed information, use top(1) instead.</p></blockquote><p>man手册中的这句话也很好理解，<code>ps</code> 命令执行一次就会显示一次所选进程的信息，若想重复刷新显示所选进程的信息，可以使用 <code>top</code> 命令，从作用上来看，可以简单理解为 <code>top</code> 命令是一个反复执行的 <code>ps</code> 命令。</p><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options]</span><br></pre></td></tr></table></figure><p><code>ps</code> 命令的格式很简单，但是为什么感觉同一个查询进程的需求，每个人写出来的命令都不太一样呢？其实这是因为有好几种语法规范，无论怎么写都可以，甚至交叉混合的写命令都是能识别的，比如最常见的查询所有进程有些人会写成 <code>ps -ef</code>，而有的人会写成 <code>ps aux</code>，这两种都是可以的。</p><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><p><code>ps -ef</code> 是使用了UNIX选项，是一种标准语法，而 <code>ps aux</code>使用了BSD选项，是一种BSD语法，另外还有一种加两个短横线的写法，例如 <code>ps --pid 3678</code>，这是一种GNU长选项。</p><h2 id="常用的ps选项"><a href="#常用的ps选项" class="headerlink" title="常用的ps选项"></a>常用的ps选项</h2><ol><li>显示所有的进程，一般搭配grep使用</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep processname</span><br></pre></td></tr></table></figure><ol><li>显示指定的列，可以使用 <code>-eo</code> 来指列名，我最常用的 cmd 是启动时的命令，lstart 是启动时的时间</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ps -eo cmd,lstart | grep sshd</span></span><br><span class="line">usr/sbin/sshd -D           Tue Feb  9 11:13:55 2021</span><br></pre></td></tr></table></figure><ol><li>以树形结构显示进程</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -axjf</span><br></pre></td></tr></table></figure><ol><li>查询指定用户的进程</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -fu root</span><br></pre></td></tr></table></figure><ol><li>按cpu使用率降序排序</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux --sort -pcpu</span><br></pre></td></tr></table></figure><ol><li>按内存使用率降序排序</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux --sort +pmem</span><br></pre></td></tr></table></figure><h2 id="ps命令的表头"><a href="#ps命令的表头" class="headerlink" title="ps命令的表头"></a>ps命令的表头</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ps -aux --sort -pcpu</span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root     17444  0.4  3.7 994796 71276 ?        Sl    2021 181:54 /usr/<span class="built_in">local</span>/qcloud/YunJing/YDEyes/YDService</span><br><span class="line">root      8572  0.3  0.7 614824 14416 ?        Sl   Jan20  21:35 barad_agent</span><br><span class="line">root         1  0.0  0.1 191084  3336 ?        Ss    2021  76:42 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S     2021   0:09 [kthreadd]</span><br><span class="line">root         4  0.0  0.0      0     0 ?        S&lt;    2021   0:00 [kworker/0:0H]</span><br><span class="line">root      1063  0.0  0.0 110208   792 tty1     Ss+   2021   0:00 /sbin/agetty --noclear tty1 linux</span><br><span class="line">root      1064  0.0  0.0 110208   772 ttyS0    Ss+   2021   0:00 /sbin/agetty --keep-baud 115200,38400,9600 ttyS0 vt220</span><br><span class="line">root      2388  0.0  0.1 157696  1952 pts/0    R+   00:27   0:00 ps -aux --sort -pcpu</span><br><span class="line">root         6  0.0  0.0      0     0 ?        S     2021  13:09 [ksoftirqd/0]</span><br></pre></td></tr></table></figure><p>执行 <code>ps</code> 命令通常有以上几列：<code>USER</code>、<code>PID</code>、<code>%CPU</code>、<code>%MEM</code>、<code>VSZ</code>、<code>RSS</code>、<code>TTY</code>、<code>STAT</code>、<code>START</code>、<code>TIME</code>、<code>COMMAND</code></p><p><code>USER</code>：进程所属用户名<br><code>PID</code>：进程ID<br><code>%CPU</code>：进程CPU使用率，注意所有CPU使用率加起来可以超过100%，如果有4个CPU，在不考虑多核的情况下，最大应该为400%<br><code>%MEM</code>：进程内存使用率，可以配合 <code>free -h</code> 命令使用<br><code>VSZ</code>：进程使用的虚拟内存量<br><code>RSS</code>：进程占用的固定内存量<br><code>TTY</code>：进程在哪个终端上运行，若与终端无关，则显示 <code>?</code><br><code>STAT</code>：进程启动的时间<br><code>START</code>：进程状态，是一个组合值，每个符号有单独含义，见下文<br><code>TIME</code>：进程使用CPU运行的时间<br><code>COMMAND</code>：启动进程时执行的命令的名称和参数</p><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p>这一部分是要是对man手册的翻译内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Here are the different values that the s, <span class="built_in">stat</span> and state output specifiers (header <span class="string">"STAT"</span> or <span class="string">"S"</span>)</span><br><span class="line">    will display to describe the state of a process:</span><br><span class="line"></span><br><span class="line">           D    uninterruptible sleep (usually IO)</span><br><span class="line">           R    running or runnable (on run queue)</span><br><span class="line">           S    interruptible sleep (waiting <span class="keyword">for</span> an event to complete)</span><br><span class="line">           T    stopped by job control signal</span><br><span class="line">           t    stopped by debugger during the tracing</span><br><span class="line">           W    paging (not valid since the 2.6.xx kernel)</span><br><span class="line">           X    dead (should never be seen)</span><br><span class="line">           Z    defunct (<span class="string">"zombie"</span>) process, terminated but not reaped by its parent</span><br><span class="line"></span><br><span class="line">   For BSD formats and when the <span class="built_in">stat</span> keyword is used, additional characters may be displayed:</span><br><span class="line"></span><br><span class="line">           &lt;    high-priority (not nice to other users)</span><br><span class="line">           N    low-priority (nice to other users)</span><br><span class="line">           L    has pages locked into memory (<span class="keyword">for</span> real-time and custom IO)</span><br><span class="line">           s    is a session leader</span><br><span class="line">           l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads <span class="keyword">do</span>)</span><br><span class="line">           +    is <span class="keyword">in</span> the foreground process group</span><br></pre></td></tr></table></figure><h3 id="常规状态码"><a href="#常规状态码" class="headerlink" title="常规状态码"></a>常规状态码</h3><p><code>D</code>: 无法中断的休眠状态（通常 IO 的进程）<br><code>R</code>: 正在运行可中在队列中可过行的；<br><code>S</code>: 处于休眠状态<br><code>T</code>: 停止或被追踪<br><code>W</code>: 进入内存交换（从内核2.6开始无效）<br><code>X</code>: 死掉的进程（基本很少见）<br><code>Z</code>: 僵尸进程，想杀死通常需要重启系统</p><h3 id="BSD格式状态码"><a href="#BSD格式状态码" class="headerlink" title="BSD格式状态码"></a>BSD格式状态码</h3><p><code>&lt;</code>: 优先级高的进程<br><code>N</code>: 优先级较低的进程<br><code>L</code>: 有些页被锁进内存<br><code>s</code>: 一个会话进程的领导者（在它之下有子进程）<br><code>l</code>: 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）<br><code>+</code>: 位于后台的进程组</p><h2 id="进程相关的后续命令"><a href="#进程相关的后续命令" class="headerlink" title="进程相关的后续命令"></a>进程相关的后续命令</h2><ol><li>查询进程的可执行文件所在位置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/进程id</span><br></pre></td></tr></table></figure><ol><li>按进程名查询进程id</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidof 进程名</span><br></pre></td></tr></table></figure><h1 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h1><h2 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [options]</span><br></pre></td></tr></table></figure><p><code>top</code> 命令的man手册巨长，它的作用是动态显示进程状态，实际上就是一份份静态数据间隔显示而已，虽然他也有很多参数，但是通常仅使用一个 <code>top</code> 命令即可。</p><h2 id="常用的top选项和快捷键"><a href="#常用的top选项和快捷键" class="headerlink" title="常用的top选项和快捷键"></a>常用的top选项和快捷键</h2><ol><li>显示top帮助</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -hV</span><br></pre></td></tr></table></figure><ol><li>按照CPU使用率排序</li></ol><p>运行top命令后，输入大写字母P，也就是按快捷键 <code>ctrl+p</code></p><ol><li>按照内存使用率排序</li></ol><p>运行top命令后，输入大写字母M，也就是按快捷键 <code>ctrl+m</code></p><ol><li>展开多核cpu显示</li></ol><p>运行top命令后，输入数字1</p><ol><li>切换显示命令名称和完整命令行</li></ol><p>运行top命令后，输入小写字母c</p><ol><li>切换显示平均负载和启动时间信息</li></ol><p>运行top命令后，输入小写字母l</p><h2 id="top命令的表头"><a href="#top命令的表头" class="headerlink" title="top命令的表头"></a>top命令的表头</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># top</span></span><br><span class="line"></span><br><span class="line">top - 00:07:35 up 0 min,  0 users,  load average: 0.52, 0.58, 0.59</span><br><span class="line">Tasks:   4 total,   1 running,   3 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  3.4 us,  8.0 sy,  0.0 ni, 88.4 id,  0.0 wa,  0.2 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  8248540 total,  3284196 free,  4727868 used,   236476 buff/cache</span><br><span class="line">KiB Swap: 13107196 total, 13080444 free,    26752 used.  3379816 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0    8940    316    272 S   0.0  0.0   0:00.15 init</span><br><span class="line">   10 root      20   0    8940    224    176 S   0.0  0.0   0:00.00 init</span><br><span class="line">   11 albert    20   0   15024   3568   3468 S   0.0  0.0   0:00.24 bash</span><br><span class="line">   38 albert    20   0   15900   1960   1420 R   0.0  0.0   0:00.04 top</span><br></pre></td></tr></table></figure><p>执行 <code>top</code> 命令后默认有这些列 <code>PID</code>、<code>USER</code>、<code>PR</code>、<code>NI</code>、<code>VIRT</code>、<code>RES</code>、<code>SHR</code>、<code>S</code>、<code>%CPU</code>、<code>%MEM</code>、<code>TIME+</code>、<code>COMMAND</code>，它们的含义分表是：</p><p><code>PID</code>：进程id<br><code>USER</code>：进程所有者用户名<br><code>PR</code>：优先级<br><code>NI</code>：NICE值.负值表示高优先级，正值表示低优先级<br><code>VIRT</code>：进程使用的虚拟内存总量，单位KB，VIRT=SWAP+RES<br><code>RES</code>：进程使用的未被换出的物理内存大小，单位KB，RES=CODE+DATA<br><code>SHR</code>：共享内存大小，单位KB，<br><code>S</code>：进程状态，D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程<br><code>%CPU</code>：CPU使用百分比<br><code>%MEM</code>、内存使用百分比<br><code>TIME+</code>：进程使用的CPU时间总计,单位1/100秒<br><code>COMMAND</code>：启动命令</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>显示所有进程可以使用 <code>ps -ef</code> 或者 <code>ps aux</code>，他们通常是后续过滤的第一步</li><li>按cpu使用率降序排序使用 <code>ps aux --sort -pcpu</code>，按内存使用率降序排序使用 <code>ps aux --sort +pmem</code></li><li><code>top</code> 命令结果的第一行是整体信息，包括了当前时间，系统已运行时间，登录用户数，系统负载等信息</li><li><code>top</code> 命令中按大写字母 <code>P</code> 会按照CPU排序，按大写字母 <code>M</code> 会按照内存排序</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122401193" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>小孩子才有对错，长大了都是利益。做选择的本质是分类，权衡利弊的过程是分类，趋利避害的行事生活更是分类，所以遇到选择我们才要考虑方方面面，因为这样我们才有足够的理由来把它归为有利的一类，还是有害的一类~</p><p>2022-1-28 00:41:05</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在linux环境服务器下通常是不会安装图形界面的，这时如果想看程序是否在正常运行着，就不能像在windows上一样去查看任务管理器，而是需要通过命令来查询程序的进程运行情况，&lt;code&gt;ps&lt;/code&gt; 就是一个查询linux环境下进程运行状态的命令，请注意这个可不是我们P图用的那个工具哦。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="ps" scheme="http://AlbertGithubHome.github.io/blog/tags/ps/"/>
    
      <category term="命令" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="top" scheme="http://AlbertGithubHome.github.io/blog/tags/top/"/>
    
  </entry>
  
  <entry>
    <title>通过WindowsStore安装QuickLook小工具方便文件预览</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/01/09/%E9%80%9A%E8%BF%87WindowsStore%E5%AE%89%E8%A3%85QuickLook%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%B9%E4%BE%BF%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/01/09/通过WindowsStore安装QuickLook小工具方便文件预览/</id>
    <published>2022-01-09T14:23:18.000Z</published>
    <updated>2022-01-09T15:35:18.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话说Windows商店一直没有什么存在感，普通大众从互联网野蛮生长开始就一直被各大流氓软件控制着连接互联网的门户，下载软件去官网只是少数人拿来伸张正义的说辞，有些官网的访问速度确实…不过随着手机的普及，应用商店的下载安装方式逐渐被人们所接受，而Windows商店也渐渐进入了人们的视野，毕竟又这么个官方的东西，总比满大街搜索捆绑的软件要方便的多。</p><a id="more"></a><p>今天主要是想记录一下QuickLook这个软件，毕竟小而美的工具可以极大的提高生产力，或者是摸鱼的能力，这个软件可以在你想要预览某个文档或者图片时，轻轻敲一个空格就搞定，比如想看一个压缩包的内容，只需敲个空格就可以。<br><img src="https://img-blog.csdnimg.cn/321aa8cc124c4b6c91577b7d7ca80089.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="ZIP"></p><h1 id="Windows商店"><a href="#Windows商店" class="headerlink" title="Windows商店"></a>Windows商店</h1><p>这个小工具在windows商店里就有，搜索安装比较方便，但是我发现我电脑里的WindowsStore不见了，还真是神奇，前一段时间还用过的，不知不觉就消失了，所以先安装Windows商店吧。</p><p>首先按组合键<code>Win+X</code>，在弹出菜单中左键单击 <code>Windows PowerShell(管理员)</code>选项，输入命令 <code>Get-AppxPackage -allusers | Select Name, PackageFullName</code>，之后会在命令窗口中显示可以安装的软件包。<br><img src="https://img-blog.csdnimg.cn/e4550305e2d947e2a2b9bae74e4f3988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_8,color_FFFFFF,t_70#pic_center" alt="Win+X"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Albert at HOME-PC in C:\Windows\system32 [19:55:50]</span></span><br><span class="line">$ Get-AppxPackage -allusers | Select Name, PackageFullName</span><br><span class="line"></span><br><span class="line">Name                                         PackageFullName</span><br><span class="line">----                                         ---------------</span><br><span class="line">1527c705-839a-4832-9118-54d4Bd6a0c89         1527c705-839a-4832-9118-54d4Bd6a0c89_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">c5e2524a-ea46-4f67-841f-6a9465d9d515         c5e2524a-ea46-4f67-841f-6a9465d9d515_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">E2A4F912-2574-4A75-9BB0-0D023378592B         E2A4F912-2574-4A75-9BB0-0D023378592B_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE         F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">InputApp                                     InputApp_1000.18362.387.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AAD.BrokerPlugin                   Microsoft.AAD.BrokerPlugin_1000.18362.387.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AccountsControl                    Microsoft.AccountsControl_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.AsyncTextService                   Microsoft.AsyncTextService_10.0.18362.387_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BioEnrollment                      Microsoft.BioEnrollment_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.CredDialogHost                     Microsoft.CredDialogHost_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.ECApp                              Microsoft.ECApp_10.0.18362.387_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.LockApp                            Microsoft.LockApp_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.MicrosoftEdgeDevToolsClient        Microsoft.MicrosoftEdgeDevToolsClient_1000.18362.387.0_neutral_neutral_...</span><br><span class="line">Microsoft.MicrosoftEdge                      Microsoft.MicrosoftEdge_44.18362.387.0_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.PPIProjection                      Microsoft.PPIProjection_10.0.18362.387_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Win32WebViewHost                   Microsoft.Win32WebViewHost_10.0.18362.387_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.Apprep.ChxApp              Microsoft.Windows.Apprep.ChxApp_1000.18362.387.0_neutral_neutral_cw5n1h...</span><br><span class="line">Microsoft.Windows.AssignedAccessLockApp      Microsoft.Windows.AssignedAccessLockApp_1000.18362.387.0_neutral_neutra...</span><br><span class="line">Microsoft.Windows.CallingShellApp            Microsoft.Windows.CallingShellApp_1000.18362.387.0_neutral_neutral_cw5n...</span><br><span class="line">Microsoft.Windows.CapturePicker              Microsoft.Windows.CapturePicker_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.CloudExperienceHost        Microsoft.Windows.CloudExperienceHost_10.0.18362.387_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.ContentDeliveryManager     Microsoft.Windows.ContentDeliveryManager_10.0.18362.387_neutral_neutral...</span><br><span class="line">Microsoft.Windows.Cortana                    Microsoft.Windows.Cortana_1.13.0.18362_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.NarratorQuickStart         Microsoft.Windows.NarratorQuickStart_10.0.18362.387_neutral_neutral_8we...</span><br><span class="line">Microsoft.Windows.OOBENetworkCaptivePortal   Microsoft.Windows.OOBENetworkCaptivePortal_10.0.18362.387_neutral__cw5n...</span><br><span class="line">Microsoft.Windows.OOBENetworkConnectionFlow  Microsoft.Windows.OOBENetworkConnectionFlow_10.0.18362.387_neutral__cw5...</span><br><span class="line">Microsoft.Windows.ParentalControls           Microsoft.Windows.ParentalControls_1000.18362.387.0_neutral_neutral_cw5...</span><br><span class="line">Microsoft.Windows.PeopleExperienceHost       Microsoft.Windows.PeopleExperienceHost_10.0.18362.387_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.PinningConfirmationDialog  Microsoft.Windows.PinningConfirmationDialog_1000.18362.387.0_neutral__c...</span><br><span class="line">Microsoft.Windows.SecHealthUI                Microsoft.Windows.SecHealthUI_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.SecureAssessmentBrowser    Microsoft.Windows.SecureAssessmentBrowser_10.0.18362.387_neutral_neutra...</span><br><span class="line">Microsoft.Windows.ShellExperienceHost        Microsoft.Windows.ShellExperienceHost_10.0.18362.387_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.StartMenuExperienceHost    Microsoft.Windows.StartMenuExperienceHost_10.0.18362.387_neutral_neutra...</span><br><span class="line">Microsoft.Windows.XGpuEjectDialog            Microsoft.Windows.XGpuEjectDialog_10.0.18362.387_neutral_neutral_cw5n1h...</span><br><span class="line">Microsoft.XboxGameCallableUI                 Microsoft.XboxGameCallableUI_1000.18362.387.0_neutral_neutral_cw5n1h2tx...</span><br><span class="line">Windows.CBSPreview                           Windows.CBSPreview_10.0.18362.387_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">windows.immersivecontrolpanel                windows.immersivecontrolpanel_10.0.2.1000_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Windows.PrintDialog                          Windows.PrintDialog_6.2.1.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Advertising.Xaml                   Microsoft.Advertising.Xaml_10.1808.3.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.25531.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.25531.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.27011.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.25531.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.25531.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.2             Microsoft.NET.Native.Runtime.2.2_2.2.27011.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.18101.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.18101.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.0                        Microsoft.UI.Xaml.2.0_2.1810.18004.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.26905.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Wallet                             Microsoft.Wallet_2.4.18324.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27323.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27323.0_x86__8wekyb3d8bbwe</span><br><span class="line">RealtekSemiconductorCorp.RealtekAudioControl RealtekSemiconductorCorp.RealtekAudioControl_1.3.179.0_x64__dt26b99r8h8gj</span><br><span class="line">Microsoft.Print3D                            Microsoft.Print3D_3.3.791.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxSpeechToTextOverlay            Microsoft.XboxSpeechToTextOverlay_1.21.13002.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Xbox.TCUI                          Microsoft.Xbox.TCUI_1.24.10001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27810.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27810.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.0                        Microsoft.UI.Xaml.2.0_2.1810.18004.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.27912.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.27413.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.27912.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.27413.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.1             Microsoft.NET.Native.Runtime.2.1_2.1.26424.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.1             Microsoft.NET.Native.Runtime.2.1_2.1.26424.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Messaging                          Microsoft.Messaging_4.1901.10241.1000_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Advertising.Xaml                   Microsoft.Advertising.Xaml_10.1811.1.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Advertising.Xaml                   Microsoft.Advertising.Xaml_10.1811.1.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.1           Microsoft.NET.Native.Framework.2.1_2.1.27427.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.1           Microsoft.NET.Native.Framework.2.1_2.1.27427.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.2                        Microsoft.UI.Xaml.2.2_2.21909.17002.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.2                        Microsoft.UI.Xaml.2.2_2.21909.17002.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.27810.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.27810.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.1                        Microsoft.UI.Xaml.2.1_2.11906.6001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.1                        Microsoft.UI.Xaml.2.1_2.11906.6001.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.19011.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.19011.0_x64__8wekyb3d8bbwe</span><br><span class="line">InputApp                                     InputApp_1000.18362.449.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AAD.BrokerPlugin                   Microsoft.AAD.BrokerPlugin_1000.18362.449.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AccountsControl                    Microsoft.AccountsControl_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.AsyncTextService                   Microsoft.AsyncTextService_10.0.18362.449_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BioEnrollment                      Microsoft.BioEnrollment_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.CredDialogHost                     Microsoft.CredDialogHost_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.ECApp                              Microsoft.ECApp_10.0.18362.449_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.LockApp                            Microsoft.LockApp_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.MicrosoftEdgeDevToolsClient        Microsoft.MicrosoftEdgeDevToolsClient_1000.18362.449.0_neutral_neutral_...</span><br><span class="line">Microsoft.Windows.Apprep.ChxApp              Microsoft.Windows.Apprep.ChxApp_1000.18362.449.0_neutral_neutral_cw5n1h...</span><br><span class="line">Microsoft.Windows.AssignedAccessLockApp      Microsoft.Windows.AssignedAccessLockApp_1000.18362.449.0_neutral_neutra...</span><br><span class="line">Microsoft.Windows.CallingShellApp            Microsoft.Windows.CallingShellApp_1000.18362.449.0_neutral_neutral_cw5n...</span><br><span class="line">Microsoft.Windows.CapturePicker              Microsoft.Windows.CapturePicker_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.OOBENetworkCaptivePortal   Microsoft.Windows.OOBENetworkCaptivePortal_10.0.18362.449_neutral__cw5n...</span><br><span class="line">Microsoft.Windows.OOBENetworkConnectionFlow  Microsoft.Windows.OOBENetworkConnectionFlow_10.0.18362.449_neutral__cw5...</span><br><span class="line">Microsoft.Windows.ParentalControls           Microsoft.Windows.ParentalControls_1000.18362.449.0_neutral_neutral_cw5...</span><br><span class="line">Microsoft.Windows.PinningConfirmationDialog  Microsoft.Windows.PinningConfirmationDialog_1000.18362.449.0_neutral__c...</span><br><span class="line">Microsoft.XboxGameCallableUI                 Microsoft.XboxGameCallableUI_1000.18362.449.0_neutral_neutral_cw5n1h2tx...</span><br><span class="line">1527c705-839a-4832-9118-54d4Bd6a0c89         1527c705-839a-4832-9118-54d4Bd6a0c89_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">c5e2524a-ea46-4f67-841f-6a9465d9d515         c5e2524a-ea46-4f67-841f-6a9465d9d515_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">E2A4F912-2574-4A75-9BB0-0D023378592B         E2A4F912-2574-4A75-9BB0-0D023378592B_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE         F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">Microsoft.MicrosoftEdge                      Microsoft.MicrosoftEdge_44.18362.449.0_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.PPIProjection                      Microsoft.PPIProjection_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Win32WebViewHost                   Microsoft.Win32WebViewHost_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.CloudExperienceHost        Microsoft.Windows.CloudExperienceHost_10.0.18362.449_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.ContentDeliveryManager     Microsoft.Windows.ContentDeliveryManager_10.0.18362.449_neutral_neutral...</span><br><span class="line">Microsoft.Windows.NarratorQuickStart         Microsoft.Windows.NarratorQuickStart_10.0.18362.449_neutral_neutral_8we...</span><br><span class="line">Microsoft.Windows.PeopleExperienceHost       Microsoft.Windows.PeopleExperienceHost_10.0.18362.449_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.SecHealthUI                Microsoft.Windows.SecHealthUI_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.SecureAssessmentBrowser    Microsoft.Windows.SecureAssessmentBrowser_10.0.18362.449_neutral_neutra...</span><br><span class="line">Microsoft.Windows.ShellExperienceHost        Microsoft.Windows.ShellExperienceHost_10.0.18362.449_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.StartMenuExperienceHost    Microsoft.Windows.StartMenuExperienceHost_10.0.18362.449_neutral_neutra...</span><br><span class="line">Microsoft.Windows.XGpuEjectDialog            Microsoft.Windows.XGpuEjectDialog_10.0.18362.449_neutral_neutral_cw5n1h...</span><br><span class="line">Windows.CBSPreview                           Windows.CBSPreview_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.UI.Xaml.2.3                        Microsoft.UI.Xaml.2.3_2.32002.13001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.3                        Microsoft.UI.Xaml.2.3_2.32002.13001.0_x86__8wekyb3d8bbwe</span><br><span class="line">AppUp.IntelGraphicsControlPanel              AppUp.IntelGraphicsControlPanel_3.3.0.0_x64__8j3eq9eme6ctt</span><br><span class="line">Microsoft.NET.Native.Runtime.2.2             Microsoft.NET.Native.Runtime.2.2_2.2.28604.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.2             Microsoft.NET.Native.Runtime.2.2_2.2.28604.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.EdgeDevtoolsPlugin                 Microsoft.EdgeDevtoolsPlugin_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">CanonicalGroupLimited.Ubuntu16.04onWindows   CanonicalGroupLimited.Ubuntu16.04onWindows_2020.1604.14.0_x64__79rhkp1f...</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.27422.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.27422.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxGameOverlay                    Microsoft.XboxGameOverlay_1.54.4001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxIdentityProvider               Microsoft.XboxIdentityProvider_12.67.21001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.4                        Microsoft.UI.Xaml.2.4_2.42007.9001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.4                        Microsoft.UI.Xaml.2.4_2.42007.9001.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.ScreenSketch                       Microsoft.ScreenSketch_10.2008.2277.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.OneConnect                         Microsoft.OneConnect_5.2011.3081.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.DesktopAppInstaller                Microsoft.DesktopAppInstaller_1.4.3161.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.29512.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.29512.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Office.OneNote                     Microsoft.Office.OneNote_16001.13328.20478.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.5                        Microsoft.UI.Xaml.2.5_2.52012.2002.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.5                        Microsoft.UI.Xaml.2.5_2.52012.2002.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsAlarms                      Microsoft.WindowsAlarms_10.2101.28.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsCamera                      Microsoft.WindowsCamera_2021.105.10.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WebMediaExtensions                 Microsoft.WebMediaExtensions_1.0.40831.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WebpImageExtension                 Microsoft.WebpImageExtension_1.0.41203.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsStore                       Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BingWeather                        Microsoft.BingWeather_4.46.31121.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsCalculator                  Microsoft.WindowsCalculator_10.2103.8.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsSoundRecorder               Microsoft.WindowsSoundRecorder_10.2103.28.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.MSPaint                            Microsoft.MSPaint_6.2105.4017.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Microsoft3DViewer                  Microsoft.Microsoft3DViewer_7.2105.4012.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.HEIFImageExtension                 Microsoft.HEIFImageExtension_1.0.40978.0_x64__8wekyb3d8bbwe</span><br><span class="line">1527c705-839a-4832-9118-54d4Bd6a0c89         1527c705-839a-4832-9118-54d4Bd6a0c89_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">c5e2524a-ea46-4f67-841f-6a9465d9d515         c5e2524a-ea46-4f67-841f-6a9465d9d515_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">E2A4F912-2574-4A75-9BB0-0D023378592B         E2A4F912-2574-4A75-9BB0-0D023378592B_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE         F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">InputApp                                     InputApp_1000.18362.1533.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AAD.BrokerPlugin                   Microsoft.AAD.BrokerPlugin_1000.18362.1533.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AccountsControl                    Microsoft.AccountsControl_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.AsyncTextService                   Microsoft.AsyncTextService_10.0.18362.1533_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BioEnrollment                      Microsoft.BioEnrollment_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.CredDialogHost                     Microsoft.CredDialogHost_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.ECApp                              Microsoft.ECApp_10.0.18362.1533_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.EdgeDevtoolsPlugin                 Microsoft.EdgeDevtoolsPlugin_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.LockApp                            Microsoft.LockApp_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.MicrosoftEdgeDevToolsClient        Microsoft.MicrosoftEdgeDevToolsClient_1000.18362.1533.0_neutral_neutral...</span><br><span class="line">Microsoft.MicrosoftEdge                      Microsoft.MicrosoftEdge_44.18362.1533.0_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.PPIProjection                      Microsoft.PPIProjection_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Win32WebViewHost                   Microsoft.Win32WebViewHost_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.Apprep.ChxApp              Microsoft.Windows.Apprep.ChxApp_1000.18362.1533.0_neutral_neutral_cw5n1...</span><br><span class="line">Microsoft.Windows.AssignedAccessLockApp      Microsoft.Windows.AssignedAccessLockApp_1000.18362.1533.0_neutral_neutr...</span><br><span class="line">Microsoft.Windows.CallingShellApp            Microsoft.Windows.CallingShellApp_1000.18362.1533.0_neutral_neutral_cw5...</span><br><span class="line">Microsoft.Windows.CapturePicker              Microsoft.Windows.CapturePicker_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.CloudExperienceHost        Microsoft.Windows.CloudExperienceHost_10.0.18362.1533_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.ContentDeliveryManager     Microsoft.Windows.ContentDeliveryManager_10.0.18362.1533_neutral_neutra...</span><br><span class="line">Microsoft.Windows.Cortana                    Microsoft.Windows.Cortana_1.13.1.18362_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.NarratorQuickStart         Microsoft.Windows.NarratorQuickStart_10.0.18362.1533_neutral_neutral_8w...</span><br><span class="line">Microsoft.Windows.OOBENetworkCaptivePortal   Microsoft.Windows.OOBENetworkCaptivePortal_10.0.18362.1533_neutral__cw5...</span><br><span class="line">Microsoft.Windows.OOBENetworkConnectionFlow  Microsoft.Windows.OOBENetworkConnectionFlow_10.0.18362.1533_neutral__cw...</span><br><span class="line">Microsoft.Windows.ParentalControls           Microsoft.Windows.ParentalControls_1000.18362.1533.0_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.PeopleExperienceHost       Microsoft.Windows.PeopleExperienceHost_10.0.18362.1533_neutral_neutral_...</span><br><span class="line">Microsoft.Windows.PinningConfirmationDialog  Microsoft.Windows.PinningConfirmationDialog_1000.18362.1533.0_neutral__...</span><br><span class="line">Microsoft.Windows.SecHealthUI                Microsoft.Windows.SecHealthUI_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.SecureAssessmentBrowser    Microsoft.Windows.SecureAssessmentBrowser_10.0.18362.1533_neutral_neutr...</span><br><span class="line">Microsoft.Windows.ShellExperienceHost        Microsoft.Windows.ShellExperienceHost_10.0.18362.1533_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.StartMenuExperienceHost    Microsoft.Windows.StartMenuExperienceHost_10.0.18362.1533_neutral_neutr...</span><br><span class="line">Microsoft.Windows.XGpuEjectDialog            Microsoft.Windows.XGpuEjectDialog_10.0.18362.1533_neutral_neutral_cw5n1...</span><br><span class="line">Microsoft.XboxGameCallableUI                 Microsoft.XboxGameCallableUI_1000.18362.1533.0_neutral_neutral_cw5n1h2t...</span><br><span class="line">Windows.CBSPreview                           Windows.CBSPreview_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.VP9VideoExtensions                 Microsoft.VP9VideoExtensions_1.0.41182.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsMaps                        Microsoft.WindowsMaps_10.2104.2.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.SkypeApp                           Microsoft.SkypeApp_15.72.94.0_x86__kzf8qxf38zg5c</span><br><span class="line">Microsoft.StorePurchaseApp                   Microsoft.StorePurchaseApp_12105.5555.19.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.GetHelp                            Microsoft.GetHelp_10.2105.41472.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxGamingOverlay                  Microsoft.XboxGamingOverlay_5.721.5282.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.YourPhone                          Microsoft.YourPhone_1.21042.143.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.ZuneVideo                          Microsoft.ZuneVideo_10.21061.10121.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.ZuneMusic                          Microsoft.ZuneMusic_10.21061.10121.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.MicrosoftStickyNotes               Microsoft.MicrosoftStickyNotes_4.1.6.0_x64__8wekyb3d8bbwe                  Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.30035.0_x64__8wekyb3d8bbwe                    Microsoft.XboxApp                            Microsoft.XboxApp_48.78.15001.0_x64__8wekyb3d8bbwe                         Microsoft.MixedReality.Portal                Microsoft.MixedReality.Portal_2000.21051.1282.0_x64__8wekyb3d8bbwe         Microsoft.People                             Microsoft.People_10.2105.4.0_x64__8wekyb3d8bbwe                            Microsoft.MicrosoftOfficeHub                 Microsoft.MicrosoftOfficeHub_18.2106.12410.0_x64__8wekyb3d8bbwe            Microsoft.WindowsTerminal                    Microsoft.WindowsTerminal_1.9.1942.0_x64__8wekyb3d8bbwe                    AppUp.IntelGraphicsExperience                AppUp.IntelGraphicsExperience_1.100.3370.0_x64__8j3eq9eme6ctt              Microsoft.Getstarted                         Microsoft.Getstarted_10.4.41811.0_x64__8wekyb3d8bbwe                       Microsoft.Windows.Photos                     Microsoft.Windows.Photos_2021.21070.22007.0_x64__8wekyb3d8bbwe             Microsoft.MicrosoftSolitaireCollection       Microsoft.MicrosoftSolitaireCollection_4.10.7290.0_x64__8wekyb3d8bbwe      Microsoft.LanguageExperiencePackzh-CN        Microsoft.LanguageExperiencePackzh-CN_18362.41.126.0_neutral__8wekyb3d8... microsoft.windowscommunicationsapps          microsoft.windowscommunicationsapps_16005.14326.20090.0_x64__8wekyb3d8bbwe Microsoft.WindowsFeedbackHub                 Microsoft.WindowsFeedbackHub_1.2106.1801.0_x64__8wekyb3d8bbwe              Microsoft.UI.Xaml.2.7                        Microsoft.UI.Xaml.2.7_7.2109.13004.0_x86__8wekyb3d8bbwe                    Microsoft.UI.Xaml.2.7                        Microsoft.UI.Xaml.2.7_7.2109.13004.0_x64__8wekyb3d8bbwe                    Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.30704.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.30704.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.30704.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.30704.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.6                        Microsoft.UI.Xaml.2.6_2.62112.3002.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.6                        Microsoft.UI.Xaml.2.6_2.62112.3002.0_x64__8wekyb3d8bbwe</span><br></pre></td></tr></table></figure><p>搜索 <code>Store</code> 可以找到 <code>Microsoft.WindowsStore                       Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe</code> 这一项，具体包名根据不同电脑搜索结果而定。</p><p>然后运行安装命令就可以了，注意把其中的 <code>Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe</code>内容替换成自己搜索出的结果，<code>Add-appxpackage...</code> 命令运行完之后Windows商店就出现了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? <span class="comment"># Albert at HOME-PC in C:\Windows\system32 [20:00:00]</span></span><br><span class="line">$ Add-appxpackage -register <span class="string">"C:\Program Files\WindowsApps\Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe\appxmanifest.xml"</span> -disabledevelopmentmode</span><br></pre></td></tr></table></figure><h1 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a>QuickLook</h1><p>双击打开Windows商店，搜索<code>QuickLook</code>直接安装就可以，一个很不错的小工具，这是来自商店的介绍</p><p><img src="https://img-blog.csdnimg.cn/88389c17ed8040359295208f8e811749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="QuickLook"><br><a href="https://pooi.moe/QuickLook/" target="_blank" rel="noopener">官网传送门</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>Win+x</code> 快速打开管理菜单，<code>Win+i</code>快速打开设置界面</li><li>PowerShell中运行 <code>Get-AppxPackage -allusers | Select Name, PackageFullName</code> 列举可安装的软件包</li><li><code>Add-appxpackage -register &quot;C:\Program Files\WindowsApps\****\appxmanifest.xml&quot; -disabledevelopmentmode</code> 安装指定软件<em>**</em></li><li>QuickLook快速预览小程序，值得一试</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122263789" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>元宇宙，一个人人都想分一杯羹的概念，理想很美好，但是现实往往很残酷，当一个人很上头的时候，任何语言都会显得苍白无力，不要只是头脑发热的一直去想，看看别人都是怎么做的，有多少人已经退了出来？人类往往很诚实，但是这不表现在言语上~</p><p>2022-1-9 23:24:47</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;话说Windows商店一直没有什么存在感，普通大众从互联网野蛮生长开始就一直被各大流氓软件控制着连接互联网的门户，下载软件去官网只是少数人拿来伸张正义的说辞，有些官网的访问速度确实…不过随着手机的普及，应用商店的下载安装方式逐渐被人们所接受，而Windows商店也渐渐进入了人们的视野，毕竟又这么个官方的东西，总比满大街搜索捆绑的软件要方便的多。&lt;/p&gt;
    
    </summary>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/categories/windows/"/>
    
    
      <category term="Win10" scheme="http://AlbertGithubHome.github.io/blog/tags/Win10/"/>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/tags/windows/"/>
    
      <category term="商店" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%95%86%E5%BA%97/"/>
    
      <category term="软件" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="QuickLook" scheme="http://AlbertGithubHome.github.io/blog/tags/QuickLook/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结——脚踏实地，为下一次腾飞积蓄力量</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/01/09/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%84%9A%E8%B8%8F%E5%AE%9E%E5%9C%B0%EF%BC%8C%E4%B8%BA%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%85%BE%E9%A3%9E%E7%A7%AF%E8%93%84%E5%8A%9B%E9%87%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/01/09/2021年终总结——脚踏实地，为下一次腾飞积蓄力量/</id>
    <published>2022-01-09T14:19:12.000Z</published>
    <updated>2022-01-09T14:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一种幸福叫照片上的人都还在~</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又到了一年一度的交卷时刻，去年的flag可以改个年份继续提上日程了。2021年，平平淡淡的一年，平淡到蜗居在这个寸土寸金的帝都，都没回过几次家。不过平淡并非不好，这份平淡恰恰是一种幸福，感恩我们所在的这个和平的国度，感恩所有为了这份和平付出努力的人们。</p><a id="more"></a><p>人是会慢慢成长的，很多曾经不懂的事情一瞬间全都明白了，有些事情已经晚了，可是还有很多事情可以补救，人生就是不断拿一些东西去换另一些东西的旅程，这种交换无时无刻不在进行着，随着时间这个魔法师渐渐推移，我们突然想换回来了，才发现做了半生的无用功。</p><blockquote><p>太年轻的人 他总是不满足<br>固执地不愿停下 远行的脚步<br>望着高高的天走了长长的路<br>忘了回头看 她有没有哭</p></blockquote><p>生活还要继续，把握当下才能赢得未来，踏踏实实迈出每一步，不需要鲜花和掌声，其实踩出的每一个脚印都是实实在在的生活。</p><h1 id="回顾2021"><a href="#回顾2021" class="headerlink" title="回顾2021"></a>回顾2021</h1><p>既然是年终总结，总要回忆一下去年过的怎么样，最简单的还是来看看去年flag的大脸盛况，拿出我的八股文框架，开整~</p><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><blockquote><p>FLAG</p><ul><li>脚踏实地做好本职工作</li><li>额外挤出时间去尝试技术提升（优化、解决痛点）</li><li>在熟悉业务的同时更多参与设计的工作，拓宽自己的认知范围</li></ul><p>完成度：85%</p></blockquote><p>一直觉得“靠谱”这个词对程序员来说是一个很高的评价，而我也在向这个方向默默努力着，事事有反馈是一个人的态度，同时也是一种良好的品质，在过去的一年中没有出大问题，也没有出彩，总体上算是中规中矩，也实现了自己“脚踏实地做好本职工作”的目标。</p><p>在技术提升方面，也在进一步努力，优化和解决痛点的工作一直在做，但相比较来说有些欠缺，技术提升和补充这方面主要体现在两部分，一部分来源于日常工作，需求推动进步，为了实现需求而提升自己，虽然进步不大，但贵在学以致用。</p><p>另一部分来源于面试，今年发生了角色的转换，我从一个求职者变成了面试官，这是一个可以锻炼自己的宝贵的机会，阅人然后识己，通过准备面试，翻看笔试题，同时观察候选人的表现，来发掘出自己需要提升的部分，循序渐进，总结提升，比如<a href="https://blog.csdn.net/albertsh/article/details/121219321" target="_blank" rel="noopener">《树的带权路径长度和哈夫曼树》</a>、<a href="https://blog.csdn.net/albertsh/article/details/121368339" target="_blank" rel="noopener">《完全图与强连通图的那些坑》</a> 都是在面试之后总结得来的。</p><p>至于更多的参与设计工作，今年也做了不少努力，得益于项目组的调整以及和老大的热心支持，今年抽出了一些时间来做偏向底层的设计工作，将自己的想法融入项目之中，静等花开。</p><h2 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h2><blockquote><p>FLAG</p><ul><li>博客总结继续，基本保持在1周一篇，可以适当偷懒，一年懒10次可以产出40篇</li><li>开源代码还是要继续学习，libevent需要详细看一下，今年的出镜率太高</li><li>读2本技术类书籍，可以是开阔眼界的，也可以是现有技能提升的</li><li>读2本经济学、金融理财相关的书籍</li></ul><p>完成度：70%</p></blockquote><p>关于博客总结这个flag真的是把偷懒发挥到了极致，到年底正好产出40篇总结，内容比较分散，基本上都是日常工作学习中遇到的问题，弄明白之后总结到一起，方便后续翻看查找。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2020/csdn.png" alt="csdn2020"><br><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/csdn.png" alt="csdn2021"></p><p>开源代码看的相对较少，这部分还需继续努力，libevent因为懒没有看进去，只在年初看了几个数据结构，不靠问题驱动着看代码还是挺难的，特别是这种代码量比较多的库，所以后面转变思路，从一些代码量少的小工具入手，比如这个神奇的<a href="http://mirrors.ustc.edu.cn/gnu/grep/" target="_blank" rel="noopener">grep命令</a></p><p>读书方面，并没有完整看完两本技术书籍，但是其他类型的书籍确实看了不少，如果加上各种故事书都堆成小山了：</p><ul><li>小狗钱钱</li><li>富爸爸穷爸爸</li><li>半小时漫画中国史</li><li>半小时漫画中国史2</li><li>半小时漫画中国史3</li><li>半小时漫画中国史4</li><li>半小时漫画中国史5</li><li>半小时漫画世界史</li><li>硬笔行书字帖 ——《樂墨書院》</li><li>不吼不叫培养好孩子</li><li>领导力的本质 ——向松下幸之助和稻盛和夫学习<ul><li>素直之心，以人为本，换位思考，尊重人性，经营哲学</li></ul></li><li>深度思考——不断逼近问题的本质</li><li>一本书读懂财报<ul><li>每一个企业都有它所处行业的烙印</li></ul></li><li>闭环思维——让靠谱成为习惯<ul><li>我会为你的过程鼓掌，但我只会给你的结果买单</li></ul></li><li>底层逻辑——半秒钟看透问题本质<ul><li>一切以结果为导向，没有功劳，苦劳也是无用的</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/book1.jpg" alt="book1"></p><p>刷题方面，今天有点虎头蛇尾了，前几个月还在努力紧跟大佬的脚步，后几个月因为工作、生活中的各种事情吧，刷题速度直线下降，人的精力是有限的，作为一个已经步入社会的人，像学生一样每天拿出大把时间来高强度刷题是不现实的，只能自己来平衡时间了，一段时间刷几道，避免太手生就好了。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/leetcode.png" alt="leetcode"></p><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><blockquote><p>FLAG</p><ul><li>陪娃娃，陪家人，工作内容适应后可以多拿出一点时间和家人在一起（需要比2020多一些）</li><li>投资理财还是要多花一点时间研究下，目标7%（靠工资是不可能财富自由的，必须开源才行）</li><li>注重身体的保养，身体是本钱，可不能把身体搞垮了，愿丢掉体检时的小毛病~</li></ul><p>完成度：65%</p></blockquote><p>陪伴是最长情的告白，今年调整了工作学习方式，尽可能把工作学习时间放到工作日，然后周末节假日就是一心一意陪家人。工作日疯狂输出，周末节假日休养生息，这种方式也不错。</p><p>利用放假时间和小娃娃一起玩耍，比如买几盆多肉，一起体会栽种花草的乐趣，一起做丢手绢、木头人的游戏，宝宝欢喜的不得了，只要有人陪着疯，什么电视、手机都抛到脑后，所以当自家娃娃沉迷于某些东西不能自拔时，需要反思一下自己有没有认真的陪过她。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/home.jpg" alt="home"></p><p>我抱起砖头就没法抱你，放下砖头就没法养你，在这样高速发展的社会，社会分工相当明确，再想守着自己家的一亩三分地来自给自足是不可能了，我们都想争做人上人，但是吃的苦中苦只有自己清楚。</p><p>谈到投资理财，我人没了，之前作为小韭菜在股市摸爬滚打、追涨杀跌赚了一些银子，今年转变思路，拥抱大白马，等待低估值修复，结果成了一个被人割的老韭菜，不过暂时不打算调仓，重仓银地保、中丐互怜，投资是反人性的，只要握紧头寸不撒手，你就别想割到我。</p><p>人的情绪是波动的，想想一个没有任何消息的公司股价为什么会起起伏伏，是因为每个人对后市的股价走向做了预测，然后根据预测进行买入卖出操作，这种短期预测毫无意义，但是价格在价值周围波动这是市场规律，顺大势，勿逆行。</p><p>今年的股票成绩略微惨淡，其实和去年也差不多，坐了几波小板车，加上ETF和基金，浮亏一点点，在今天价值投资被埋在谷底的年头，也还可以吧，继续出清垃圾股。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/stock.jpg" alt="stock"></p><h1 id="展望2022"><a href="#展望2022" class="headerlink" title="展望2022"></a>展望2022</h1><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>继续踏实做好本职工作，做好工作内容的总结，落实到纸上</li><li>学习和了解常见中间件的使用，更多的参与设计的工作</li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>博客总结不能落，继续保持一周一更，完成40篇基础目标</li><li>刷题不用太频繁，每周总得有贡献，不可抗拒因素除外</li><li>建立自己的技能树，搭配工作总结，统计出自己到底会什么</li><li>选取经典开源代码学习，代码量要少一点，毕竟精力有限了</li><li>读书、读书、读书，书都买好了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/book2.jpg" alt="book2"></p><h2 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h2><ul><li>基金和ETF继续定投，适当配置债券固收</li><li>股票池里把曾经“瞎选”的股票逐渐出清，依旧拥抱大白马，少折腾</li><li>目标收益不太高，8个点，希望不要打脸</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>疫情结束了多回几次老家吧，去看看那些想我又不愿说出口的亲人</li><li>注重身体的保养，锻炼提上日程，降低亮红灯的指标</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>身体有些吃不消了，适当缩减睁着眼睛的时间吧</li><li>工作学习分不开，所以两者会共同产出一颗技能树，为后续选择提供腾飞的力量</li><li>我觉得是时候把投资这项单独拿出来了，靠搬砖是不能实现自由梦的，需要学会借力搬砖</li><li>噢，忘了一点，去年出现在年终总结中的那颗茉莉花挂了，我补两张今年养的多肉吧，希望他能抗住今年的flag~</li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/flower1.jpg" alt="flower1"><br><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/flower2.jpg" alt="flower2"></p><h1 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h1><hr><blockquote><p><em>每个人都有自己梦想，而我的梦很简单，那里有一个大大的书房，中间摆一个简单的书桌，一把带轮子的小椅，后面是占满整面墙的书柜，书柜上摆放着我喜欢的技术、财经、历史方面的书籍。书桌上斜放着两台电脑，看书累了就写写自己喜欢的代码，我并不喜欢庞大的程序，更热衷于一些实用的小工具，比如像grep这种锋利的小匕首。偶尔小宝宝会跑进来要我陪她玩，我会给它讲讲正在写哪些有趣的东西，玩一玩自己开发的游戏，是的，她很喜欢，一个简单的小球都玩得不亦乐乎~</em></p><p><em>当然了大大的玻璃窗前必须摆满喜欢的花草，他们尽情的吮吸窗外的阳光，同时为书屋提供了生命的颜色，花架旁边是喷壶和铲子，虽然看起来不像是书房里的东西，但是我想把它们摆在那里，这里仿佛是另一番天地。</em></p></blockquote><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122163518" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>空有悲天悯人之心，却无普度众生之力，不愿最后伸出那无助的手，要在可以选择时努力做一个施粥人。</p><p>2021-12-31 23:43:27</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有一种幸福叫照片上的人都还在~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;又到了一年一度的交卷时刻，去年的flag可以改个年份继续提上日程了。2021年，平平淡淡的一年，平淡到蜗居在这个寸土寸金的帝都，都没回过几次家。不过平淡并非不好，这份平淡恰恰是一种幸福，感恩我们所在的这个和平的国度，感恩所有为了这份和平付出努力的人们。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://AlbertGithubHome.github.io/blog/categories/Thinking/"/>
    
    
      <category term="总结" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="工作" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="学习" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Windows设置防火墙允许指定应用正常使用网络</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/26/Windows%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%81%E8%AE%B8%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/26/Windows设置防火墙允许指定应用正常使用网络/</id>
    <published>2021-12-26T09:58:52.000Z</published>
    <updated>2021-12-29T08:17:30.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很长一段时间以来，防火墙这个神奇的“玩意”在我的电脑上基本属于名存死亡，因为做网络软件开发的缘故，经常需要别人连接我的电脑来进行测试，打开Windows的防火墙常常出现网络无法联通的情况，所以在我的电脑上防火墙基本处于关闭状态，就像下面这样：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/1.png" alt="1"></p><p>但这确实不是一个好的习惯，最近学习了一些网络安全相关的课程，发现打开防火墙还是很有必要的，它可以避免我们遭受一些攻击，最起码可以降低受到攻击的概率，所以我还是决定打开防火墙，同时设置防火墙对自己的开发的应用放行，也就是把应用放到防火墙白名单里，这样就既安全又方便了。</p><h1 id="什么是Windows防火墙"><a href="#什么是Windows防火墙" class="headerlink" title="什么是Windows防火墙"></a>什么是Windows防火墙</h1><blockquote><p>防火墙是一项协助确保信息安全的设备，会依照特定的规则，允许或限制传输的数据通过。防火墙可以是一台专属的硬件也可以是架设在一般硬件上的一套软件。总而言之，防火墙就是帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障。</p></blockquote><p>这段文字来自于百科，翻译的直白一点就是说：你的电脑就相当于一个城池，然后网络上的病毒、木马等恶意程序就相当于敌对势力派来的间谍，想混进城去，而防火墙就相当于城门口设置的关卡哨兵用来盘查筛选，放合适的人进城，同时放合法的人出去，既要满足城内人与外界的交流，又要防止恶意的坏人蒙混过关。</p><h1 id="设置允许通过防火墙的应用"><a href="#设置允许通过防火墙的应用" class="headerlink" title="设置允许通过防火墙的应用"></a>设置允许通过防火墙的应用</h1><p>要想设置指定应用允许通过防火墙，需要先打开防火墙功能再设置才会生效，下面以Windows10为例操作一次。</p><ol><li>打开<code>控制面板</code></li></ol><p>按键盘上的 <code>Win</code> 键，然后输入控制面板，在筛选结果中点击“控制面板”选项：</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/2.png" alt="2"></p><ol><li>点击<code>系统和安全</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/3.png" alt="3"></p><ol><li>点击<code>Windows Defender防火墙</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/4.png" alt="4"></p><blockquote><p>其实前面这三步可以简化为，按<code>Win+R</code>快捷键，输入<code>firewall.cpl</code>回车即可</p></blockquote><ol><li>点击<code>启用或关闭Windows Defender防火墙</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/5.png" alt="5"></p><ol><li>勾选<code>启用 Windows Defender 防火墙</code> 选项，点击确定按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/6.png" alt="6"></p><ol><li>点击<code>允许应用或功能通过 Windows Defender 防火墙</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/7.png" alt="7"></p><ol><li>找到目标应用，把后面两个选项勾选上，然后点击确定即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/8.png" alt="8"></p><p>这里以 <code>WeChat</code> 为例，在<code>专用</code> 和 <code>公用</code>两个复选框上打钩，然后单击下面的确定按钮就可以了，如果列表中没有想要添加白名单的应用，还可以点击确定按钮上面的 <code>允许其他应用(R)</code>按钮来自己添加。</p><h1 id="防火墙中的专用和公用"><a href="#防火墙中的专用和公用" class="headerlink" title="防火墙中的专用和公用"></a>防火墙中的专用和公用</h1><p>防火墙中的<code>专用</code> 和 <code>公用</code>是针对网络而言的，Windows中给出的说明：专用网络，例如家庭或工作网络；公用网络，比如机场和咖啡店中的网络。那么是不是当我在家里连网时就是专用网络，而在咖啡厅连接网络时就自动识别为公用网络呢？</p><p>Windows当然没有这么智能，连接新的网络时属于什么类型的网络需要你自己选择，也就是说你自己要做出判断，如果是自己家的网络，基本是上独享的安全的，那就可以设置为专用网络，如果是连接的公共Wifi那必须要选择公用网络。</p><p>而防火墙中对专用网络和公用网络有不同的设置，这个比较好理解，还是以前面城池和哨兵的比喻为例，防火墙作为哨兵在不同的环境下有不同的标准，比如在和平时期，对非常可疑的人才禁止入城，而在战时，除了必要的粮草供应，其他的普通商人可能都不允许入内了。</p><p>所以当一个应用无法联网时，需要检查一下应用设置白名单中是在哪个网络环境下，如果是可以信赖的应用，通常在专用网络和公用网络都会设置允许通过防火墙。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>快捷键 <code>Win+R</code> 输入 <code>firewall.cpl</code> 后回车，可以快速打开防火墙设置</li><li>Windows中的专用网络和公用网络需要自己在连接网络时设置，系统本身没有准确分辨的能力</li><li>防火墙中对专用网络和公用网络有不同的设置，相当于在不同的网络环境下设置了不同的安全级别</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122032810" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>默默的付出是否值得？一查问题就消耗几个小时，修复个BUG前前后后花了几天，有时会假设站在高处，望着此时的自己，这样做是否值得？成年人的世界往往只看性价比，如果说花了几天时间却一无所获，那之前的付出确实不值得，也就是做了一件性价比很低的事情。但是这个结果是做完才知道的，在做之前并不能准确判断是否值得，无法进行“挑选”，也不应该抱着我不做总有人会做的态度，既然做就全力以赴，若无果也仅仅是我们“赌”输了而已。但要记住，现实的世界只记得功劳，没有结论、没有反馈、毫无借鉴意义的苦劳一文不值~</p><p>2021-12-26 23:54:19</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很长一段时间以来，防火墙这个神奇的“玩意”在我的电脑上基本属于名存死亡，因为做网络软件开发的缘故，经常需要别人连接我的电脑来进行测试，打开Windows的防火墙常常出现网络无法联通的情况，所以在我的电脑上防火墙基本处于关闭状态，就像下面这样：&lt;/p&gt;
    
    </summary>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/categories/windows/"/>
    
    
      <category term="Win10" scheme="http://AlbertGithubHome.github.io/blog/tags/Win10/"/>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/tags/windows/"/>
    
      <category term="防火墙" scheme="http://AlbertGithubHome.github.io/blog/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
      <category term="firewall" scheme="http://AlbertGithubHome.github.io/blog/tags/firewall/"/>
    
      <category term="白名单" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>git常用配置——git show/diff tab 显示宽度</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/19/git%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E2%80%94%E2%80%94git-show-diff-tab-%E6%98%BE%E7%A4%BA%E5%AE%BD%E5%BA%A6/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/19/git常用配置——git-show-diff-tab-显示宽度/</id>
    <published>2021-12-19T15:44:39.000Z</published>
    <updated>2021-12-19T16:13:49.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时在代码开发过程中使用编辑器时一般会使用空格来代替Tab符，而Tab的宽度通常设置为4个空格的宽度。在使用<code>git diff</code> 命令时发现有些老代码的格式混乱，原因就是使用了8个字符宽度的Tab显示格式，经过一番查找发现可以修改 <code>core.pager</code> 来进行调整，特此记录方便日后查找。</p><a id="more"></a><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><ul><li>设置Tab显示为4个字符的宽度</li></ul><p><code>git config --global core.pager &#39;less -x1,5&#39;</code></p><ul><li>设置Tab显示为8个字符的宽度（默认）</li></ul><p><code>git config --global core.pager &#39;less&#39;</code></p><ul><li>设置用户名</li></ul><p><code>git config --global user.name &quot;albert&quot;</code></p><ul><li>设置邮箱</li></ul><p><code>git config --global user.email &quot;albert52190@gmail.com&quot;</code></p><ul><li>设置别名</li></ul><p><code>git config --global alias.st status</code></p><ul><li>配置自动更新子模块的命令</li></ul><p><code>git config --global alias.pullall &#39;!f(){ git pull &quot;$@&quot; &amp;&amp; git submodule update --init --recursive; }; f&#39;</code></p><ul><li>设置自动处理换行符</li></ul><p><code>git config --global core.autocrlf true</code></p><blockquote><p>true 在提交时将CRLF转换为LF，当签出代码时，LF会被转换成CRLF<br>input 在提交是将CRLF转换为LF，签出时不转换<br>false 不进行转换</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>git config --global core.pager &#39;less -x1,5&#39;</code> 可将 <code>git show/diff</code> 命令的tab按照4字符宽度显示</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121896012" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>时间不多了，还有很多事情没有做呢，虽说欲速则不达，但是有些事如果还不做可能就真的没机会了<br>《一荤一素》</p><p>2021-12-20 00:09:54</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平时在代码开发过程中使用编辑器时一般会使用空格来代替Tab符，而Tab的宽度通常设置为4个空格的宽度。在使用&lt;code&gt;git diff&lt;/code&gt; 命令时发现有些老代码的格式混乱，原因就是使用了8个字符宽度的Tab显示格式，经过一番查找发现可以修改 &lt;code&gt;core.pager&lt;/code&gt; 来进行调整，特此记录方便日后查找。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/categories/Git/"/>
    
    
      <category term="版本控制" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/tags/Git/"/>
    
      <category term="config" scheme="http://AlbertGithubHome.github.io/blog/tags/config/"/>
    
      <category term="pager" scheme="http://AlbertGithubHome.github.io/blog/tags/pager/"/>
    
  </entry>
  
  <entry>
    <title>网络工具nc的常见使用功能方法</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/12/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7nc%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/12/网络工具nc的常见使用功能方法/</id>
    <published>2021-12-12T12:36:16.000Z</published>
    <updated>2021-12-12T14:30:22.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>nc</code> 是一个Linux环境下常用的工具命令，可以用来帮助开发者查询和解决网路问题，通常被认为是 <code>NetCat</code> 工具的缩写，在网络工具中有“瑞士军刀”的美誉。</p><a id="more"></a><p><code>nc</code> 在Linux环境下常常是自带的，如果你使用的Linux发行版本没有这个工具也可以自行安装，比如在CentOS上的安装命令就是 <code>yum install nc -y</code>，并且这个工具在Windows上也可以直接下载使用，下载页面地址为 <a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="noopener">netcat</a>，简约而不简单。</p><h1 id="nc-netcat-ncat"><a href="#nc-netcat-ncat" class="headerlink" title="nc netcat ncat"></a>nc netcat ncat</h1><p>这三个名字常常出现在一起，也常常混用，可以简单的认为它们都一样，但是如果要追究细节它们还是有些差异的。原始netcat（也就是nc），在2007年发布1.10稳定版本之后，就不再更新了，原作者是Hobbit。而ncat是nmap项目的作者Fyodor，在原始nc之上进行二次开发的另一款强大工具。另外socat、cryptcat等也属于是原始nc的升级，而原始nc在windows上有时会被杀毒软件查杀，这时可以考虑使用ncat、socat。</p><p>关于nc的不同，可以看下我本地的查看情况，第一条是在Ubuntu中的man手册说明，第二条是在CentOS中的man手册说明：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NC(1)                               BSD General Commands Manual                      NC(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">     nc — arbitrary TCP and UDP connections and listens</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">     nc [-46bCDdhklnrStUuvZz] [-I length] [-i interval] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s <span class="built_in">source</span>] [-T toskeyword] [-V rtable] [-w timeout] [-X proxy_protocol] [-x</span><br><span class="line">        proxy_address[:port]] [destination] [port]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">     The nc (or netcat) utility is used <span class="keyword">for</span> just about anything under the sun involving TCP, UDP, or UNIX-domain sockets.  It can open TCP connections, send UDP packets, listen on arbitrary TCP and UDP</span><br><span class="line">     ports, <span class="keyword">do</span> port scanning, and deal with both IPv4 and IPv6.  Unlike telnet(1), nc scripts nicely, and separates error messages onto standard error instead of sending them to standard output, as</span><br><span class="line">     telnet(1) does with some</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NCAT(1)                         Ncat Reference Guide                       NCAT(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ncat - Concatenate and redirect sockets</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ncat [OPTIONS...] [hostname] [port]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Ncat is a feature-packed networking utility <span class="built_in">which</span> reads and writes data across networks from the <span class="built_in">command</span> line. Ncat was written <span class="keyword">for</span> the Nmap Project and is the culmination of the</span><br><span class="line">       currently splintered family of Netcat incarnations. It is designed to be a reliable back-end tool to instantly provide network connectivity to other applications and users. Ncat</span><br><span class="line">       will not only work with IPv4 and IPv6 but provides the user with a virtually limitless number of potential uses.</span><br></pre></td></tr></table></figure><p>ncat 是 nmap 套件的一部分，关于nmap的介绍可以参考下来自百科的以下引用内容：</p><blockquote><p>nmap是linux最早的网络扫描工具和嗅探工具包，它可以用来扫描网络上电脑开放的网络连接端，确定哪些服务运行在那些连接端，并且推断出计算机运行的是哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，用以评估网络系统安全。</p><p>正如大多数被用于网络安全的工具，nmap 也是不少黑客及骇客爱用的工具 。系统管理员可以利用nmap来探测工作环境中未经批准使用的服务器，但是黑客会利用nmap来搜集目标电脑的网络设定，从而计划攻击的方法。</p></blockquote><h1 id="nc的用法"><a href="#nc的用法" class="headerlink" title="nc的用法"></a>nc的用法</h1><p>nc是一个强大的网络工具，下面列举几个常见的用法。</p><h2 id="测试udp端口是否可用"><a href="#测试udp端口是否可用" class="headerlink" title="测试udp端口是否可用"></a>测试udp端口是否可用</h2><p>如果是测试某个IP地址地址是否可以访问，通常会使用 <code>ping</code> 命令，执行之后如果可以到达就会得到数据反馈：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ ping 82.156.125.169</span><br><span class="line">PING 82.156.125.169 (82.156.125.169) 56(84) bytes of data.</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=1 ttl=54 time=17.8 ms</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=2 ttl=54 time=39.9 ms</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=3 ttl=54 time=12.9 ms</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=4 ttl=54 time=6.81 ms</span><br><span class="line">^C</span><br><span class="line">--- 82.156.125.169 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3008ms</span><br><span class="line">rtt min/avg/max/mdev = 6.816/19.397/39.961/12.502 ms</span><br></pre></td></tr></table></figure><p>想要测试一个tcp端口是否可以访问，映入脑海的第一个命令应该是telnet，直接在IP后面加空格和端口就可以了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ telnet 82.156.125.169 22</span><br><span class="line">Trying 82.156.125.169...</span><br><span class="line">Connected to 82.156.125.169.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">SSH-2.0-OpenSSH_7.4</span><br></pre></td></tr></table></figure><p>如果想测试UDP端口是否可达使用telnet就不行了，因为它是一种基于TCP的应用层协议，用来测试UDP端口会因为长时间没有反应而超时：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ telnet 82.156.125.169 666</span><br><span class="line">Trying 82.156.125.169...</span><br><span class="line">telnet: Unable to connect to remote host: Connection refused</span><br></pre></td></tr></table></figure><p>这时用 <code>nc</code> 命令就可以解决了，命令格式为 <code>nc -nvuz ip port</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ nc -nvuz 82.156.125.169 666</span><br><span class="line">Connection to 82.156.125.169 666 port [udp/*] succeeded!</span><br></pre></td></tr></table></figure><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>这实际实际上是对上一个应用的扩展，使用 <code>nc</code> 命令可以指定一个端口范围，用来扫描多个端口是否可用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ nc -nvz 82.156.125.169 20-24</span><br><span class="line">nc: connect to 82.156.125.169 port 20 (tcp) failed: Connection refused</span><br><span class="line">nc: connect to 82.156.125.169 port 21 (tcp) failed: Connection refused</span><br><span class="line">Connection to 82.156.125.169 22 port [tcp/*] succeeded!</span><br><span class="line">nc: connect to 82.156.125.169 port 23 (tcp) failed: Connection refused</span><br><span class="line">nc: connect to 82.156.125.169 port 24 (tcp) failed: Connection refused</span><br></pre></td></tr></table></figure><h2 id="一对一聊天"><a href="#一对一聊天" class="headerlink" title="一对一聊天"></a>一对一聊天</h2><p>使用 <code>nc</code> 命令可以监听一个端口作为服务器，然后在另一台机器上启动 <code>nc</code> 作为客户端发数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># nc -l 1314</span></span><br><span class="line"><span class="comment"># 以下为接收到客户端发来的数据</span></span><br><span class="line">12</span><br><span class="line">client send msg</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动客户端</span></span><br><span class="line">albert@home-pc:~$ nc 82.156.125.169 1314</span><br><span class="line"><span class="comment"># 以下为输入的数据</span></span><br><span class="line">12</span><br><span class="line">client send msg</span><br></pre></td></tr></table></figure><h2 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h2><p>这个用法是对上一种用法的扩展，通过重定向将文件内容通过网络传输：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端将socket内容保存到w文件中</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># nc -l 1314 &gt; w.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ cat w.txt</span><br><span class="line">w</span><br><span class="line">-</span><br><span class="line">r</span><br><span class="line">x</span><br><span class="line">d</span><br><span class="line"><span class="comment"># 客户端将w.txt文件内容发送给服务器</span></span><br><span class="line">albert@home-pc:~$ nc 82.156.125.169 1314 &lt; w.txt</span><br><span class="line">albert@home-pc:~$</span><br></pre></td></tr></table></figure><p>客户端运行完 <code>nc</code> 命令之后就会退出，服务器端的 <code>nc</code> 命令也会结束，<code>w.txt</code> 文件的内容就传送过去了。</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>这其实也是传输数据的命令的一个变种，使用 <code>-c</code> 参数可以完成数据转发：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># nc -l 520 -c "nc 82.156.125.169 1314"</span></span><br></pre></td></tr></table></figure><p>执行命令之后，发送到本机 520 端口的数据就会被转发到 IP 为82.156.125.169的1314端口上了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>nc -nvuz ip port</code> 可以检测指定IP的UDP端口能否访问，如果是TCP端口去掉 <code>-u</code> 选项就可以了</li><li><code>nc -l port</code> 可以启动一个本地服务器，接受发往指定端口的数据，并打印到控制台</li><li><code>nc -l port &gt; filename</code> 可以启动一个本地服务器，接受发往指定端口的数据，并保存到名为 <code>filename</code> 的文件中</li><li><code>nc -l port -c &quot;nc ip new_port&quot;</code> 可以启动一个本地服务器，接受发往指定端口的数据，并转发到ip:new_port的机器上</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121724688" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>人生每时每刻都在积攒素材，能否拼凑出高光的时刻，决定了某些事迹有无机会诉说。</p><p>2021-12-12 22:11:51</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;nc&lt;/code&gt; 是一个Linux环境下常用的工具命令，可以用来帮助开发者查询和解决网路问题，通常被认为是 &lt;code&gt;NetCat&lt;/code&gt; 工具的缩写，在网络工具中有“瑞士军刀”的美誉。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/categories/Network/"/>
    
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/tags/Network/"/>
    
      <category term="nc" scheme="http://AlbertGithubHome.github.io/blog/tags/nc/"/>
    
      <category term="NetCat" scheme="http://AlbertGithubHome.github.io/blog/tags/NetCat/"/>
    
      <category term="ncat" scheme="http://AlbertGithubHome.github.io/blog/tags/ncat/"/>
    
  </entry>
  
</feed>
