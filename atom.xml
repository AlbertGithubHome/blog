<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Albert World</title>
  <icon>https://www.gravatar.com/avatar/8ccc6291d5bfd34e7aaf601c4ebec7e1</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://AlbertGithubHome.github.io/blog/"/>
  <updated>2022-04-05T14:16:20.917Z</updated>
  <id>http://AlbertGithubHome.github.io/blog/</id>
  
  <author>
    <name>Albert Shi</name>
    <email>347070901@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++可变参数模板的展开方式</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/04/04/C-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%B1%95%E5%BC%80%E6%96%B9%E5%BC%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/04/04/C-可变参数模板的展开方式/</id>
    <published>2022-04-04T12:46:40.000Z</published>
    <updated>2022-04-05T14:16:20.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><a href="https://en.cppreference.com/w/cpp/language/parameter_pack" target="_blank" rel="noopener">可变参数模板</a>（variadic templates）是C++11新增的强大的特性之一，它对模板参数进行了高度泛化，能表示0到任意个数、任意类型的参数。相比C++98/03这些类模版和函数模版中只能含固定数量模版参数的“老古董”，可变模版参数无疑是一个巨大的进步。</p><a id="more"></a><p>如果是刚接触可变参数模板可能会觉得比较抽象，使用起来会不太顺手，使用可变参数模板时通常离不开模板参数的展开，所以本文来列举一些常用的模板展开方式，帮助我们来对可变参数模板有一个初步的了解。</p><h1 id="可变参数模板的定义"><a href="#可变参数模板的定义" class="headerlink" title="可变参数模板的定义"></a>可变参数模板的定义</h1><p>可变参数模板和普通模板的定义类似，在写法上需要在 <code>typename</code> 或 <code>class</code> 后面带上省略号<code>...</code>，以下为一个常见的可变参数函数模板：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span>... <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">func</span>(<span class="title">T</span>... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个函数模板的参数 <code>args</code> 前面有省略号，所以它就是一个被称为模板参数包（template parameter pack）的可变模版参数，它里面包含了0到N个模版参数，而我们是无法直接获取 <code>args</code> 中的每个参数的，只能通过展开参数包的方式来获取参数包中的每个参数，这也是本文要重点总结的内容。</p><h1 id="参数包的展开"><a href="#参数包的展开" class="headerlink" title="参数包的展开"></a>参数包的展开</h1><p>参数包展开的方式随着c++语言的发展也在与时俱进，我们以实现一个可变参格式化打印函数为例，列举一些常用的方式：</p><h2 id="递归函数方式展开"><a href="#递归函数方式展开" class="headerlink" title="递归函数方式展开"></a>递归函数方式展开</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">class</span> ...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">FormatPrint</span>(<span class="title">T</span> <span class="title">first</span>, <span class="title">Args</span>... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; first &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">   FormatPrint(args...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种递归展开的方式与递归函数的定义是一样的，需要递归出口和不断调用自身，仔细看看这个函数模板是不是都满足啦？递归出口就是这个无模板参数的 <code>FormatPrint</code>，并且在有参模板中一直在调用自身，递归调用的过程时这样的 <code>FormatPrint(4,3,2,1)</code> -&gt; <code>FormatPrint(3,2,1)</code> -&gt; <code>FormatPrint(2,1)</code> -&gt; <code>FormatPrint(1)</code> -&gt; <code>FormatPrint()</code>，输出内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><h2 id="逗号表达式展开"><a href="#逗号表达式展开" class="headerlink" title="逗号表达式展开"></a>逗号表达式展开</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> ...<span class="title">Args</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">FormatPrint</span>(<span class="title">Args</span>... <span class="title">args</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   (<span class="keyword">void</span>)<span class="built_in">std</span>::<span class="built_in">initializer_list</span>&lt;<span class="keyword">int</span>&gt;&#123; (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; args &lt;&lt; <span class="string">"]"</span>, <span class="number">0</span>)... &#125;;</span><br><span class="line">   <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式用到了C++11的新特性<a href="https://en.cppreference.com/w/cpp/language/list_initialization" target="_blank" rel="noopener">初始化列表</a>（Initializer lists）以及很传统的逗号表达式，我们知道逗号表达式的优先级最低，<code>(a, b)</code> 这个表达式的值就是 <code>b</code>，那么上述代码中<code>(std::cout &lt;&lt; &quot;[&quot; &lt;&lt; args &lt;&lt; &quot;]&quot;, 0)</code>这个表达式的值就是0，初始化列表保证其中的内容从左往右执行，args参数包会被逐步展开，表达式前的<code>(void)</code>是为了防止变量未使用的警告，运行过后我们就得到了一个N个元素为0的初始化列表，内容也被格式化输出了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><p>说到这顺便提一下，可以使用<code>sizeof...(args)</code>得到参数包中参数个数。</p><h2 id="enable-if方式展开"><a href="#enable-if方式展开" class="headerlink" title="enable_if方式展开"></a>enable_if方式展开</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> k = <span class="number">0</span>, <span class="keyword">typename</span> tup&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;k == <span class="built_in">std</span>::tuple_size&lt;tup&gt;::value&gt;::type FormatTuple(<span class="keyword">const</span> tup&amp; t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span> k = <span class="number">0</span>, <span class="keyword">typename</span> tup&gt;</span><br><span class="line"><span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;k &lt; <span class="built_in">std</span>::tuple_size&lt;tup&gt;::value&gt;::type FormatTuple(<span class="keyword">const</span> tup&amp; t)&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; <span class="built_in">std</span>::get&lt;k&gt;(t) &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">    FormatTuple&lt;k + <span class="number">1</span>&gt;(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FormatTuple(<span class="built_in">std</span>::make_tuple(args...));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++11的<a href="https://en.cppreference.com/w/cpp/types/enable_if" target="_blank" rel="noopener"><code>enable_if</code></a>常用于构建需要根据不同的类型的条件实例化不同模板的时候。顾名思义，当满足条件时类型有效。可作为选择类型的小工具，其广泛的应用在 C++ 的模板元编程（meta programming）之中，利用的就是SFINAE原则，英文全称为Substitution failure is not an error，意思就是匹配失败不是错误，假如有一个特化会导致编译时错误，只要还有别的选择，那么就无视这个特化错误而去选择另外的实现，这里的特化概念不再展开，感兴趣可以自行了解，后续可以单独总结一下。</p><p>在上面的代码实现中，基本思路是先将可变模版参数转换为<code>std::tuple</code>，然后通过递增参数的索引来选择恰当的<code>FormatTuple</code>函数，当参数的索引小于tuple元素个数时，会不断取出当前索引位置的参数并输出，当参数索引等于总的参数个数时调用另一个模板重载函数终止递归，编译运行输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++11</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><h2 id="折叠表达式展开（c-17）"><a href="#折叠表达式展开（c-17）" class="headerlink" title="折叠表达式展开（c++17）"></a>折叠表达式展开（c++17）</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ... &lt;&lt; args) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://en.cppreference.com/w/cpp/language/fold" target="_blank" rel="noopener">折叠表达式</a>（Fold Expressions）是C++17新引进的语法特性，使用折叠表达式可以简化对C++11中引入的参数包的处理，可以在某些情况下避免使用递归，更加方便的展开参数，如上述代码中展示的这样可以方便的展开参数包，不过输出的内容和之前的有些不一样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++17</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">1234</span><br><span class="line">good2hello4110</span><br></pre></td></tr></table></figure><p>对比结果发现缺少了格式化的信息，需要以辅助函数的方式来格式化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">format</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">"["</span> &lt;&lt; t &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">    <span class="keyword">return</span> ss.str();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ... &lt;&lt; format(args)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次格式化内容就被加进来了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ g++ testtemplate.cpp --std=c++17</span><br><span class="line">albert@home-pc:/mnt/d/data/cpp/testtemplate$ ./a.out</span><br><span class="line">[1][2][3][4]</span><br><span class="line">[good][2][hello][4][110]</span><br></pre></td></tr></table></figure><p>这样好像还是有点麻烦，我们可以把折叠表达式和逗号表达式组合使用，这样得到的代码就简单多啦，也能完成格式化输出的任务：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FormatPrint</span><span class="params">(Args... args)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ... &lt;&lt; (<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; args, <span class="string">"]"</span>)) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   FormatPrint(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">   FormatPrint(<span class="string">"good"</span>, <span class="number">2</span>, <span class="string">"hello"</span>, <span class="number">4</span>, <span class="number">110</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>Variadic templates</code> 是C++11新增的强大的特性之一，它对模板参数进行了高度泛化</li><li><code>Initializer lists</code> 是C++11新加的特性，可以作为函数参数和返回值，长度不受限制比较方便</li><li><code>Fold Expressions</code> 是C++17新引进的语法特性，可以方便的展开可变参数模板的参数包</li><li>可变参数模板的参数包在C++11的环境下，可以利用递归、逗号表达式、enable_if等方式进行展开</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/123958013" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>有些人苦中作乐，而有些人却是身在福中不知福。人性本贪婪，只是度不同。我虽知福，奈何要想一家安稳还差的太多~</p><p>2022-4-5 22:02:27</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/cpp/language/parameter_pack&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;可变参数模板&lt;/a&gt;（variadic templates）是C++11新增的强大的特性之一，它对模板参数进行了高度泛化，能表示0到任意个数、任意类型的参数。相比C++98/03这些类模版和函数模版中只能含固定数量模版参数的“老古董”，可变模版参数无疑是一个巨大的进步。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C-C/"/>
    
      <category term="可变参数" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    
      <category term="template" scheme="http://AlbertGithubHome.github.io/blog/tags/template/"/>
    
      <category term="模板" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>epoll的LT模式（水平触发）和ET模式（边沿触发）</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/03/27/epoll%E7%9A%84LT%E6%A8%A1%E5%BC%8F%EF%BC%88%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91%EF%BC%89%E5%92%8CET%E6%A8%A1%E5%BC%8F%EF%BC%88%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91%EF%BC%89/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/03/27/epoll的LT模式（水平触发）和ET模式（边沿触发）/</id>
    <published>2022-03-27T13:35:00.000Z</published>
    <updated>2022-04-05T14:16:32.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>epoll的触发模式是个引发讨论非常多的话题，网络上这方面总结的文章也很多，首先从名字上就不是很统一，LT模式常被称为水平触发、电平触发、条件触发，而ET模式常被称为边缘触发、边沿触发等，这些都是从英文翻译过来的，只不过翻译的时候有些差异，LT全称 level-triggered，ET全称 edge-triggered。</p><a id="more"></a><p>虽然这个知识点热度很高，但很多人对于它的理解总是差那么一点，特别是在面试的时候，很多面试者总是处于一种回忆和背诵的状态，其实这两种模式真的不需要去死记硬背，下面说说我个人对这两种模式的理解和记忆方法。</p><h1 id="名称的记忆"><a href="#名称的记忆" class="headerlink" title="名称的记忆"></a>名称的记忆</h1><p>每次提到ET（边沿触发）首先映入我脑海的是大学里《数字逻辑电路》这门课程，里面会提到低电平、高电平，当电平从低到高时会有一个上升沿，而电平从高到低时会有一个下降沿，这个“沿”就是边沿触发时提到的“边沿”，跟马路边的马路牙子是同一种概念，也就是指状态变化的时候。提起上升沿和下降沿我还是印象很深的，当时我可是占用了好几节课的时间用Verilog语言写了一个显示“HELLO WORLD”的仿真波形，依靠的就是电平变化中的“沿”。</p><h1 id="状态变化"><a href="#状态变化" class="headerlink" title="状态变化"></a>状态变化</h1><p>LT模式和ET模式可以类比电平变化来学习，但是在实际应用中概念却不是完全一样的，在epoll的应用中涉及到关于IO的读写，而读写的状态变化有哪些呢？可读、不可读、可写、不可写，其实就是这四种状态而已，以socket为例。</p><p>可读：socket上有数据<br>不可读：socket上没有数据了<br>可写：socket上有空间可写<br>不可写：socket上无空间可写</p><blockquote><p>对于水平触发模式，一个事件只要有，就会一直触发。<br>对于边缘触发模式，只有一个事件从无到有才会触发。</p></blockquote><h1 id="LT模式"><a href="#LT模式" class="headerlink" title="LT模式"></a>LT模式</h1><p>对于读事件 <code>EPOLLIN</code>，只要socket上有未读完的数据，<code>EPOLLIN</code> 就会一直触发；对于写事件 <code>EPOLLOUT</code>，只要socket可写（一说指的是 TCP 窗口一直不饱和，我觉得是TCP缓冲区未满时，这一点还需验证），<code>EPOLLOUT</code> 就会一直触发。</p><p>在这种模式下，大家会认为读数据会简单一些，因为即使数据没有读完，那么下次调用epoll_wait()时，它还会通知你在上没读完的文件描述符上继续读，也就是人们常说的这种模式不用担心会丢失数据。</p><p>而写数据时，因为使用 LT 模式会一直触发 <code>EPOLLOUT</code> 事件，那么如果代码实现依赖于可写事件触发去发送数据，一定要在数据发送完之后移除检测可写事件，避免没有数据发送时无意义的触发。</p><h1 id="ET模式"><a href="#ET模式" class="headerlink" title="ET模式"></a>ET模式</h1><p>对于读事件 <code>EPOLLIN</code>，只有socket上的数据从无到有，<code>EPOLLIN</code> 才会触发；对于写事件 <code>EPOLLOUT</code>，只有在socket写缓冲区从不可写变为可写，<code>EPOLLOUT</code> 才会触发（刚刚添加事件完成调用epoll_wait时或者缓冲区从满到不满）</p><p>这种模式听起来清爽了很多，只有状态变化时才会通知，通知的次数少了自然也会引发一些问题，比如触发读事件后必须把数据收取干净，因为你不一定有下一次机会再收取数据了，即使不采用一次读取干净的方式，也要把这个激活状态记下来，后续接着处理，否则如果数据残留到下一次消息来到时就会造成延迟现象。</p><p>这种模式下写事件触发后，后续就不会再触发了，如果还需要下一次的写事件触发来驱动发送数据，就需要再次注册一次检测可写事件。</p><h1 id="数据的读取和发送"><a href="#数据的读取和发送" class="headerlink" title="数据的读取和发送"></a>数据的读取和发送</h1><p>关于数据的读比较好理解，无论是LT模式还是ET模式，监听到读事件从socket开始读数据就好了，只不过读的逻辑有些差异，LT模式下，读事件触发后，可以按需收取想要的字节数，不用把本次接收到的数据收取干净，ET模式下，读事件触发后通常需要数据一次性收取干净。</p><p>而数据的写不太容易理解，因为数据的读是对端发来数据导致的，而数据的写其实是自己的逻辑层触发的，所以在通过网络发数据时通常都不会去注册监可写事件，一般都是调用 <code>send</code> 或者 <code>write</code> 函数直接发送，如果发送过程中， 函数返回 <code>-1</code>，并且错误码是 EWOULDBLOCK 表明发送失败，此时才会注册监听可写事件，并将剩余的服务存入自定义的发送缓冲区中，等可写事件触发后再接着将发送缓冲区中剩余的数据发送出去。</p><h1 id="代码实践"><a href="#代码实践" class="headerlink" title="代码实践"></a>代码实践</h1><h2 id="基础代码"><a href="#基础代码" class="headerlink" title="基础代码"></a>基础代码</h2><p>以下为一个epoll触发模式测试的基础代码，也不算太长，直接拿来就可以测试：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt; //for socket</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;  //for htonl htons</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;  //for epoll_ctl</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;     //for close</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;      //for fcntl</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;      //for errno</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;     //for cout</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">fd_object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    fd_object(<span class="keyword">int</span> fd) &#123; listen_fd = fd; &#125;</span><br><span class="line">    ~fd_object() &#123; close(listen_fd); &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> listen_fd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">./epoll for lt mode</span></span><br><span class="line"><span class="comment">and</span></span><br><span class="line"><span class="comment">./epoll 1 for et mode</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//create a socket fd</span></span><br><span class="line">    <span class="keyword">int</span> listen_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (listen_fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create listen socket fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">fd_object <span class="title">obj</span><span class="params">(listen_fd)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set socket to non-block</span></span><br><span class="line">    <span class="keyword">int</span> socket_flag = fcntl(listen_fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">    socket_flag |= O_NONBLOCK;</span><br><span class="line">    <span class="keyword">if</span> (fcntl(listen_fd, F_SETFL, socket_flag) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"set listen fd to nonblock error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//init server bind info</span></span><br><span class="line">    <span class="keyword">int</span> port = <span class="number">51741</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">bind_addr</span>;</span></span><br><span class="line">    bind_addr.sin_family = AF_INET;</span><br><span class="line">    bind_addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line">    bind_addr.sin_port = htons(port);</span><br><span class="line">    <span class="keyword">if</span> (bind(listen_fd, (struct sockaddr *)&amp;bind_addr, <span class="keyword">sizeof</span>(bind_addr)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"bind listen socket fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//start listen</span></span><br><span class="line">    <span class="keyword">if</span> (listen(listen_fd, SOMAXCONN) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"listen error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"start server at port ["</span> &lt;&lt; port &lt;&lt; <span class="string">"] with ["</span> &lt;&lt; (argc &lt;= <span class="number">1</span> ? <span class="string">"LT"</span> : <span class="string">"ET"</span>) &lt;&lt; <span class="string">"] mode."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//create a epoll fd</span></span><br><span class="line">    <span class="keyword">int</span> epoll_fd = epoll_create(<span class="number">88</span>);</span><br><span class="line">    <span class="keyword">if</span> (epoll_fd == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"create a epoll fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    epoll_event listen_fd_event;</span><br><span class="line">    listen_fd_event.data.fd = listen_fd;</span><br><span class="line">    listen_fd_event.events = EPOLLIN;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) listen_fd_event.events |= EPOLLET;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add epoll event for listen fd</span></span><br><span class="line">    <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, listen_fd, &amp;listen_fd_event) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"epoll ctl error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        epoll_event epoll_events[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> n = epoll_wait(epoll_fd, epoll_events, <span class="number">1024</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="comment">//timeout</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (epoll_events[i].events &amp; EPOLLIN)<span class="comment">//trigger read event</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (epoll_events[i].data.fd == listen_fd)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//accept a new connection</span></span><br><span class="line">                    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">                    <span class="keyword">socklen_t</span> client_addr_len = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">                    <span class="keyword">int</span> client_fd = accept(listen_fd, (struct sockaddr*)&amp;client_addr, &amp;client_addr_len);</span><br><span class="line">                    <span class="keyword">if</span> (client_fd == <span class="number">-1</span>)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                    socket_flag = fcntl(client_fd, F_GETFL, <span class="number">0</span>);</span><br><span class="line">                    socket_flag |= O_NONBLOCK;</span><br><span class="line">                    <span class="keyword">if</span> (fcntl(client_fd, F_SETFL, socket_flag) == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        close(client_fd);</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"set client fd to non-block error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    epoll_event client_fd_event;</span><br><span class="line">                    client_fd_event.data.fd = client_fd;</span><br><span class="line">                    client_fd_event.events = EPOLLIN | EPOLLOUT;</span><br><span class="line">                    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) client_fd_event.events |= EPOLLET;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_ADD, client_fd, &amp;client_fd_event) == <span class="number">-1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"add client fd to epoll fd error."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                        close(client_fd);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"accept a new client fd ["</span> &lt;&lt; client_fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLIN event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">char</span> recvbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">                    <span class="keyword">int</span> m = recv(epoll_events[i].data.fd, recvbuf, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// only read 1 bytes when read event triggered</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (m == <span class="number">0</span> || (m &lt; <span class="number">0</span> &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EINTR))</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, epoll_events[i].data.fd, <span class="literal">NULL</span>) != <span class="number">-1</span>)</span><br><span class="line">                            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] disconnected."</span> &lt;&lt;  <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                        close(epoll_events[i].data.fd);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv data from client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] and data is ["</span> &lt;&lt; recvbuf &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (epoll_events[i].events &amp; EPOLLOUT)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (epoll_events[i].data.fd == listen_fd) <span class="comment">//trigger write event</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLOUT event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单说下这段代码的测试方法，可以使用 <code>g++ testepoll.cpp -o epoll</code> 进行编译，编译后通过 <code>./epoll</code> 运行为LT模式，通过 <code>./epoll et</code>模式运行为ET模式，我们用编译好的epoll程序作为服务器，使用nc命令来模拟一个客户端。</p><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><ol><li>编译后直接<code>./epoll</code>，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 命令模拟一次连接，此时 <code>./epoll</code> 会产生大量的 <code>EPOLLOUT event triggered for client fd ...</code>，那是因为在LT模式下，<code>EPOLLOUT</code>会被一直触发。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll</span><br><span class="line">start server at port [<span class="number">51741</span>] with [LT] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>注释包含 <code>EPOLLOUT event triggered for client fd</code> 输出内容的第152行代码，编译后 <code>./epoll</code>运行，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 模拟一次连接后，输入abcd回车，可以看到服务器<code>./epoll</code>输出内容，<code>EPOLLIN</code>被触发多次，每次读取一个字节。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll</span><br><span class="line">start server at port [<span class="number">51741</span>] with [LT] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [a].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [b].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [c].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [d].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br></pre></td></tr></table></figure><ol><li>还原刚才注释的那行代码，编译后执行 <code>./epoll et</code> 启动服务器，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 模拟一次连接后，然后在另一个命令行窗口用 <code>nc -v 127.0.0.1 51741</code> 模拟一次连接，服务器窗口显示触发了<code>EPOLLOUT</code>事件</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br></pre></td></tr></table></figure><p>在此基础上，从刚刚运行 <code>nc</code>命令的窗口中输入回车、输入回车、输出回车，那么epoll服务器窗口看到的是触发了三次<code>EPOLLIN</code>事件，每次收到一个回车:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br></pre></td></tr></table></figure><p>但是如果在nc模拟的客户端里输出abcd回车，那么在epoll服务器窗口触发一次<code>EPOLLIN</code>事件接收到一个a之后便再也不会触发<code>EPOLLIN</code>了，即使你在nc客户端在此输入也没有用，那是因为在接受的缓冲区中一直还有数据，新数据来时没有出现缓冲区从空到有数据的情况，所以在ET模式下也注意这种情况。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [a].</span><br></pre></td></tr></table></figure><h2 id="怎么解决ET触发了一次就不再触发了"><a href="#怎么解决ET触发了一次就不再触发了" class="headerlink" title="怎么解决ET触发了一次就不再触发了"></a>怎么解决ET触发了一次就不再触发了</h2><p>改代码呗，ET模式在连接后触发一次<code>EPOLLOUT</code>，接收到数据时触发一次<code>EPOLLIN</code>，如果数据没收完，以后这两个事件就再也不会被触发了，要想改变这种情况可以再次注册一下这两个事件，时机可以选择接收到数据的时候，所以可以修改这部分代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLIN event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> m = recv(epoll_events[i].data.fd, recvbuf, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// only read 1 bytes when read event triggered</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || (m &lt; <span class="number">0</span> &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EINTR))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, epoll_events[i].data.fd, <span class="literal">NULL</span>) != <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] disconnected."</span> &lt;&lt;  <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        close(epoll_events[i].data.fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv data from client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] and data is ["</span> &lt;&lt; recvbuf &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加再次注册的逻辑：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"EPOLLIN event triggered for client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> recvbuf[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> m = recv(epoll_events[i].data.fd, recvbuf, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// only read 1 bytes when read event triggered</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">0</span> || (m &lt; <span class="number">0</span> &amp;&amp; errno != EWOULDBLOCK &amp;&amp; errno != EINTR))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (epoll_ctl(epoll_fd, EPOLL_CTL_DEL, epoll_events[i].data.fd, <span class="literal">NULL</span>) != <span class="number">-1</span>)</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] disconnected."</span> &lt;&lt;  <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        close(epoll_events[i].data.fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    epoll_event client_fd_event;</span><br><span class="line">    client_fd_event.data.fd = epoll_events[i].data.fd;</span><br><span class="line">    client_fd_event.events = EPOLLIN | EPOLLOUT;</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>) client_fd_event.events |= EPOLLET;</span><br><span class="line"></span><br><span class="line">    epoll_ctl(epoll_fd, EPOLL_CTL_MOD, epoll_events[i].data.fd, &amp;client_fd_event);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"recv data from client fd ["</span> &lt;&lt; epoll_events[i].data.fd &lt;&lt; <span class="string">"] and data is ["</span> &lt;&lt; recvbuf &lt;&lt; <span class="string">"]."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这次以 <code>./epoll et</code> 方式启动服务器，使用 <code>nc -v 127.0.0.1 51741</code> 模拟客户端，输入abc回车发现，epoll服务器输出显示触发的事件变了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/cpp/testepoll$ ./epoll et</span><br><span class="line">start server at port [<span class="number">51741</span>] with [ET] mode.</span><br><span class="line">accept a <span class="keyword">new</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [a].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [b].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [c].</span><br><span class="line">EPOLLIN event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br><span class="line">recv data from client fd [<span class="number">5</span>] <span class="keyword">and</span> data is [</span><br><span class="line">].</span><br><span class="line">EPOLLOUT event triggered <span class="keyword">for</span> client fd [<span class="number">5</span>].</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>LT模式会一直触发<code>EPOLLOUT</code>，当缓冲区有数据时会一直触发<code>EPOLLIN</code></li><li>ET模式会在连接建立后触发一次<code>EPOLLOUT</code>，当收到数据时会触发一次<code>EPOLLIN</code></li><li>LT模式触发<code>EPOLLIN</code>时可以按需读取数据，残留了数据还会再次通知读取</li><li>ET模式触发<code>EPOLLIN</code>时必须把数据读取完，否则即使来了新的数据也不会再次通知了</li><li>LT模式的<code>EPOLLOUT</code>会一直触发，所以发送完数据记得删除，否则会产生大量不必要的通知</li><li>ET模式的<code>EPOLLOUT</code>事件若数据未发送完需再次注册，否则不会再有发送的机会</li><li>通常发送网络数据时不会依赖<code>EPOLLOUT</code>事件，只有在缓冲区满发送失败时会注册这个事件，期待被通知后再次发送</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/123468650" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>即使是在灿烂的阳光下也会有黑暗的角落，不能因为角落的阴暗就忽略阳光下的美好，我们要做的不是把黑暗面放大，而是要做阳光的传递者，哪怕是一面面镜子，通过反射来照亮那星星点点的黑暗，认清自己，不与黑暗为伍，那绝不是你自甘堕落的借口。</p><p>两千光束已然出发~</p><p>2022-4-4 18:25:50</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;epoll的触发模式是个引发讨论非常多的话题，网络上这方面总结的文章也很多，首先从名字上就不是很统一，LT模式常被称为水平触发、电平触发、条件触发，而ET模式常被称为边缘触发、边沿触发等，这些都是从英文翻译过来的，只不过翻译的时候有些差异，LT全称 level-triggered，ET全称 edge-triggered。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/categories/Network/"/>
    
    
      <category term="epoll" scheme="http://AlbertGithubHome.github.io/blog/tags/epoll/"/>
    
      <category term="LT" scheme="http://AlbertGithubHome.github.io/blog/tags/LT/"/>
    
      <category term="ET" scheme="http://AlbertGithubHome.github.io/blog/tags/ET/"/>
    
      <category term="水平触发" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%B0%B4%E5%B9%B3%E8%A7%A6%E5%8F%91/"/>
    
      <category term="边沿触发" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%BE%B9%E6%B2%BF%E8%A7%A6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>总结下各种常见树形结构的定义及特点（二叉树、AVL树、红黑树、Trie树、B树、B+树）</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/03/13/%E6%80%BB%E7%BB%93%E4%B8%8B%E5%90%84%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E7%9A%84%E5%AE%9A%E4%B9%89%E5%8F%8A%E7%89%B9%E7%82%B9/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/03/13/总结下各种常见树形结构的定义及特点/</id>
    <published>2022-03-13T09:18:21.000Z</published>
    <updated>2022-03-13T14:48:05.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>树形结构相比于数组、链表、队列和栈等线性结构要复杂的多，因为树本身的概念就比较多，通过设定一些条件和限制就可以定义出一种新类型的树，结果造成了树的“变化多端”，所以要学习一种树要从树的定义入手，然后根据定义和特点来熟悉各种树适合的场景，这样就可以做到“树尽其用”目的了。</p><a id="more"></a><h1 id="一棵普通的树"><a href="#一棵普通的树" class="headerlink" title="一棵普通的树"></a>一棵普通的树</h1><p>树形结构和现实中的树很像，只不过现实中的树根长在地上，而树形结构再展示的时候一般把树根画在“天上”，树形结构中数据元素之间存在着“一对多”的关系，具有以下特点：</p><ul><li>没有父节点的节点称为根节点</li><li>除空树外每棵树只有一个根节点</li><li>每个节点都只有有限个子节点或无子节点</li><li>每个非根节点有且只有一个父节点</li><li>树里面没有环路，如果从一个节点出发，除非往返，否则无法回到起点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/tree.png" alt="基础的树"></p><h2 id="相关术语"><a href="#相关术语" class="headerlink" title="相关术语"></a>相关术语</h2><ul><li>根节点：最顶层的节点就是根结点，它是整棵树的源头</li><li>叶子节点：在树下端的节点，就是其子节点个数为0的节点</li><li>节点的度：指定节点有几个分叉就说这个节点的度是几</li><li>树的度：只看根结点，树的度等价于根节点的度</li><li>节点高度：指从这个节点到叶子节点的距离（一共经历了几个节点）</li><li>节点深度：指从这个节点到根节点的距离（一共经历了几个节点）</li><li>树的高度：指所有节点高度的最大值</li><li>树的深度：指所有节点深度的最大值</li><li>节点的层：从根节点开始，假设根节点为第1层，根节点的子节点为第2层，依此类推</li></ul><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>二叉树是对普通树形结构进行限定得到的一种特殊的树，规定树中节点的度不大于2，当节点有两个子节点，也就是有两颗子树时，它们有左右之分，分别被称为左子树和右子树，左子树和右子树又同样都是二叉树。</p><h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><ul><li>二叉树的第i层上至多有2^(i-1)（i≥1）个节点</li><li>深度为h的二叉树中至多含有2^h-1个节点</li><li>若在任意一棵二叉树中，有n个叶子节点，有m个度为2的节点，则必有n=m+1</li><li>具有n个节点的满二叉树深为log(2n+1)</li><li>若对一棵有n个节点的完全二叉树进行顺序编号（1≤i≤n），那么，对于编号为i（i≥1）的节点<ul><li>当i=1时，该节点为根，它无双亲节点</li><li>当i&gt;1时，该节点的双亲节点的编号为i/2</li><li>若2i≤n，则有编号为2i的左节点，否则没有左节点</li><li>若2i+1≤n，则有编号为2i+1的右节点，否则没有右节点</li></ul></li></ul><h2 id="二叉树特例"><a href="#二叉树特例" class="headerlink" title="二叉树特例"></a>二叉树特例</h2><p>完美二叉树（Perfect Binary Tree）：除了叶子结点之外的每一个结点都有两个孩子，每一层都被完全填充</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/perfecttree.png" alt="完美二叉树"></p><p>完全二叉树（Complete Binary Tree）：除了最后一层之外的其他每一层都被完全填充，并且所有结点都保持向左对齐</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/completetree.png" alt="完全二叉树"></p><p>完满二叉树（Full Binary Tree）： 除了叶子结点之外的每一个结点都有两个孩子结点</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/article/fulltree.png" alt="完满二叉树"></p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><p>二叉查找树是一种特殊的二叉树，又称为排序二叉树、二叉搜索树、二叉排序树等等，它实际上是数据域有序的二叉树，即对树上的每个结点，都满足其左子树上所有结点的数据域均小于或等于根结点的数据域，右子树上所有结点的数据域均大于根结点的数据域。</p><h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p>平衡二叉树是由前苏联的两位数学家G.M.Adelse-Velskil和E.M.Landis联合提出，因此一般也称作AVL树，AVL树本质还是一棵二叉查找树，只是在其基础上增加了“平衡”的要求，需保证其左子树与右子树的高度之差的绝对值不超过1，其中左子树与右子树的高度因子之差称为平衡因子。</p><p>对于AVL树，不管我们是执行插入还是删除操作，只要不满足上面的条件，就要通过旋转来保持平衡。由于旋转比较耗时，所以AVL树适合用于插入与删除次数比较少，但查找多的情况。</p><h3 id="特点及应用"><a href="#特点及应用" class="headerlink" title="特点及应用"></a>特点及应用</h3><p>所有节点的左右子树高度差不超过1，广泛用于Windows NT内核中</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树也是一颗二叉查找树，需要为每个节点存储节点的颜色，可以是红或黑。通过对任何一条从根到叶子的路径上各个节点着色的方式的限制，来确保没有一条路径会比其它路径长出两倍，因此，红黑树是一种弱平衡二叉树。</p><p>由于是弱平衡二叉树，那么在相同的节点情况下，AVL树的高度小于等于红黑树的高度，相对于要求严格的AVL树来说，它的旋转次数少，所以对于插入，删除操作较多的情况下，用红黑树的查找效率会更高一些。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>每个节点非红即黑</li><li>根节点是黑的</li><li>每个叶子节点（叶子节点即树尾端NULL节点）都是黑的</li><li>每条路径都包含相同的黑节点</li><li>如果一个节点是红的，那么它的两儿子都是黑的</li><li>对于任意节点而言，其到叶子点的每条路径都包含相同数目的黑节点</li></ol><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>广泛用于C++的STL中，如 <code>map</code> 和 <code>set</code> 是用红黑树实现的</li><li>Linux的进程调度用红黑树管理进程控制块，进程的虚拟内存空间都存储在一颗红黑树上，每个虚拟内存空间都对应红黑树的一个节点</li><li>IO多路复用的 <code>epoll</code> 采用红黑树组织管理<code>socket fd</code>，以支持快速的增删改查</li><li>Nginx中用红黑树管理定时器，可以快速得到距离当前最小的定时器</li><li>Java的TreeMap的用红黑树实现</li></ul><h1 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h1><p>Trie树又被称为前缀树、字典树是一种用于快速检索的多叉树结构。字典树把字符串看成字符序列，根据字符串中字符序列的先后顺序构造从上到下的树结构，树结构中的每一条边都对应着一个字符。字典树上存储的字符串被视为从根节点到某个节点之间的一条路径，并在终点节点上做个标记”该节点对应词语的结尾”，正因为有终点节点的存在，字典树不仅可以实现简单的存储字符串，还可以实现字符串的映射，只需要将相对应的值悬挂在终点节点上即可。</p><h2 id="特点及应用-1"><a href="#特点及应用-1" class="headerlink" title="特点及应用"></a>特点及应用</h2><p>Trie的核心思想是空间换时间，有如下基本性质：</p><ul><li>根节点不包含字符，除根节点外每一个节点都只包含一个字符</li><li>从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串</li><li>每个节点的所有子节点包含的字符都不相同</li></ul><p>字典树能够利用字符串中的公共前缀，这样可能会节省内存，利用字符串的公共前缀可以减少查询字符串的时间，能够最大限度的减少无谓的字符串比较，同时在查询的过程中不需要预知待查询字符串的长度，沿着字典树的边进行匹配，查询效率比较高，但是如果系统中存在大量字符串并且这些字符串基本没有前缀，相应的字典树内存消耗也会很大。正是由于字典树的这些特点，字典树被用于统计、排序和保存大量的字符串（不仅限于字符串），还可用于搜索引擎的关键词提示功能。</p><h1 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h1><p>B树是一个多路平衡查找树，B树的出现是为了弥合不同的存储级别之间的访问速度上的巨大差异，实现高效的I/O。平衡二叉树的查找效率是非常高的，并可以通过降低树的深度来提高查找的效率。但是当数据量非常大，树的存储的元素数量是有限的，这样会导致二叉查找树结构由于树的深度过大而造成磁盘I/O读写过于频繁，进而导致查询效率低下，同时数据量过大会导致内存空间不够容纳平衡二叉树所有结点的情况，而B树是解决这个问题的很好的结构。</p><p>要想了解B树需要了解一个很重要的概念，B树中所有节点的度的最大值称为B树的阶，记为m，这是一个跟重要值，也就是说m阶B树指的是节点度最大为m的B树。</p><h2 id="定义及特点"><a href="#定义及特点" class="headerlink" title="定义及特点"></a>定义及特点</h2><ul><li>每个节点最多只有m个子节点</li><li>根结点的儿子数为[2, m]</li><li>除根结点以外的非叶子结点的儿子数为[m/2, m]，向上取整</li><li>非叶子结点的关键字个数=子节点数-1</li><li>所有叶子都出现在同一层</li><li>k个关键字把节点拆成k+1段，分别指向k+1个儿子，同时满足查找树的大小关系</li><li>非叶子节点中不仅包含索引，也会包含数据</li></ul><h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><p>B树是一种平衡的多路查找树，主要用作文件的索引。其优势是当你要查找的值恰好处在一个非叶子节点时，查找到该节点就会成功并结束查询，有很多基于频率的搜索是选用B树，越频繁查询的结点越往根上走，前提是需要对查询做统计，而且要对key做一些变化。</p><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>B+树是b树的一种变体，查询性能更好，m阶的b+树具有以下特征：</p><ul><li>有n棵子树的非叶子结点中含有n个关键字（b树是n-1个），这些关键字不保存数据，只用来索引，所有数据都保存在叶子节点（b树是每个关键字都保存数据）</li><li>所有的叶子结点中包含了全部关键字的信息，及指向含这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大顺序链接</li><li>所有的非叶子结点可以看成是索引部分，结点中仅含其子树中的最大（或最小）关键字</li><li>通常在b+树上有两个头指针，一个指向根结点，一个指向关键字最小的叶子结点</li><li>同一个数字会在不同节点中重复出现，根节点的最大元素就是b+树的最大元素</li></ul><h2 id="B-树的优势及应用"><a href="#B-树的优势及应用" class="headerlink" title="B+树的优势及应用"></a>B+树的优势及应用</h2><ul><li><p>B+tree的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多，相对来说IO读写次数也就降低了。</p></li><li><p>由于非叶子结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。</p></li><li><p>B+树支持范围遍历，只要遍历叶子节点就可以实现整棵树的遍历，而在数据库中基于范围的查询是非常频繁的，这一点要明显由于B树。</p></li></ul><p>由于拥有以上特点，B+广泛应用于文件存储系统以及数据库系统中。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>树是一种常见的非线性结构，拥有众多变种</li><li>二叉树是树形结构的一大类，每个节点最多拥有两个子节点树，左右子树顺序固定</li><li>AVL树是平衡二叉树，任意节点的左右子树高度差最大为1</li><li>红黑树是弱平衡二叉树，每个节点记录的自己的颜色，用来控制左右子树高度不大于2倍</li><li>Trie树又叫字典树，是一种用于快速检索的多叉树结构</li><li>B树是一种多路平衡树，用于提高了磁盘IO性能，多用于文件系统的索引</li><li>B+树是对B树的改进，仅在叶子节点存储数据，相比于B树更加矮胖，支持范围遍历</li></ul><hr><h2 id="gt-gt-反爬链接，请勿点击，原地爆炸，概不负责！-lt-lt"><a href="#gt-gt-反爬链接，请勿点击，原地爆炸，概不负责！-lt-lt" class="headerlink" title=" ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== "></a><center><a href="https://blog.csdn.net/albertsh/article/details/122916170" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center></h2><blockquote><p>世间从来没有什么『感同身受』，每个人面对相同的事件和意外都会因为家庭背景、个人经历的差异而有不同的反应，更不要说那些没经历过的人，即使你曾经真的经历过类似的事情，那么在被漫长的时间洗礼之后，一切都会淡化许多，所以“未经他人苦，莫劝他人善。你若经我苦，未必有我善”~</p><p>2022-3-13 22:47:31</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;树形结构相比于数组、链表、队列和栈等线性结构要复杂的多，因为树本身的概念就比较多，通过设定一些条件和限制就可以定义出一种新类型的树，结果造成了树的“变化多端”，所以要学习一种树要从树的定义入手，然后根据定义和特点来熟悉各种树适合的场景，这样就可以做到“树尽其用”目的了。&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://AlbertGithubHome.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A0%91/"/>
    
      <category term="树的特点" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    
      <category term="红黑树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
      <category term="字典树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AD%97%E5%85%B8%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>简单梳理下git的使用感受，思考git中最重要的是什么</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/02/13/%E7%AE%80%E5%8D%95%E6%A2%B3%E7%90%86%E4%B8%8Bgit%E7%9A%84%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97%EF%BC%8C%E6%80%9D%E8%80%83git%E4%B8%AD%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/02/13/简单梳理下git的使用感受，思考git中最重要的是什么/</id>
    <published>2022-02-13T04:05:33.000Z</published>
    <updated>2022-02-13T15:26:03.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作中使用git是从两年前开始的，之前一直<code>add -&gt; commit -&gt;push</code>常规操作，真正在工作中使用之后才渐渐理解了git的强大，这种理解是建立在不断解决问题的基础上的，不断的处理遇到的问题，就像升级打怪一样，对git的理解也越来越全面。因为在使用git之前一直用svn作为版本控制工具，所以对git和svn的区别也有了自己的认识，关于两者的区别网上的文章一搜一大把，我就不重复了，我仅仅从自己的理解来描述下两者的不同。</p><h1 id="git和svn"><a href="#git和svn" class="headerlink" title="git和svn"></a>git和svn</h1><p>关于git和svn的区别，网上的文章确实很多，大多数会提到分布式、存储方式、版本号、完整性等方面，而我今天要写的区别是两者提交记录的结构。</p><p>既然作为版本控制工具，那么每次历史提交都必须可以追溯和回退，在svn中提交记录时线性的，以时间轴为参考基准，所有提交按照时间先后排列，因为svn记录必须提交到服务器才能生效，所有服务器相当于各个svn客户端的总控，各个svn提交到服务器时线性排列，且必须将本地文件状态更新成和服务器相同时才能修改提交。</p><p>正因为在svn中有服务器负责总控操作，所以能保证时间最新的提交记录就是整个svn最新的状态，提交记录不依赖客户端时间，完全由服务器时间进行排序。</p><p>在git中没有这样的总控服务器，虽然一般情况下每个代码库都会有统一的托管服务器，但是它的作用任何一个git客户端都能代替，因为git是可以离线提交的，托管服务器只是我们用来存储代码的地方，与svn服务器按时间排序的做法大不相同。</p><p>git的提交记录通常是一个树形结构，个别时候会变成有“起点”和“终点”的网状结构，在git中时间只具备参考意义，并不能决定提交记录的先后，如果你对这一点还心存怀疑，可能你是个svn的重度用户，一时还没理解git操作原理。</p><p>对于这个问题可以举个例子，操作同一个文件，在svn中2月13日修改一次，2月14日修改一次，那么2月15日看这个文件一定是2月14日修改后的状态；而在git中，同样是那个文件分别在2月13日和2月14日修改一次，2月15日文件的状态取决了两次修改是否在同一分支，以及合并时是怎样处理的，这种错位随着时间的延长和多分支的合并，往往对时间的依赖“微乎其微”，此时再也不能用时间来衡量提交的先后了。</p><p>如果一开始就是git，上面提到的这个问题还不太明显，但是用惯了svn再使用git，处理历史回溯问题时往往容易找错方向，经常通过时间过滤出来的内容并不是自己想要的，这一点在实际操作中需要注意。</p><h1 id="git最重要的是什么"><a href="#git最重要的是什么" class="headerlink" title="git最重要的是什么"></a>git最重要的是什么</h1><p>相信这个问题每个人都有自己的答案，有人认为是分布式，有人认为是切换分支很方便，而我的答案是 <code>commit 的设计哲学</code>，我觉得这是git中的精髓，git中的commit就像一个链表中的元素，用来将自身和其他的commit串联到一起，形成<code>branch</code>、<code>tag</code>、<code>HEAD</code> 等等。</p><p>我们可以通过 <code>git log</code> 命令来看一条 commit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1</span><br><span class="line">commit 7bf665f125a4771db095c83a7ad6ed46692cd314 (HEAD -&gt; 6.0, tag: 6.0.6, origin/6.0)</span><br><span class="line">Author: Oran Agra &lt;oran@redislabs.com&gt;</span><br><span class="line">Date:   Sun Jul 19 14:00:20 2020 +0300</span><br><span class="line"></span><br><span class="line">    Redis 6.0.6.</span><br></pre></td></tr></table></figure><p>这条commit id 为 <code>7bf665f125a4771db095c83a7ad6ed46692cd314</code>，这在整个库是惟一的，通过 <code>git log</code> 可以看到这次提交的时间、作者、简要说明等信息，那么这次提交和库是什么关系呢？</p><p>通过括号中的内容可以知道当前提交是这个库的<code>6.0</code>分支，同时为标签<code>6.0.6</code>，也与远端的<code>6.0</code>分支同步。</p><p>使用 <code>git cat-file</code> 命令可以进一步查询这个commit的组织形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p HEAD</span><br><span class="line">tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595156420 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Redis 6.0.6.</span><br></pre></td></tr></table></figure><p>可以发现这次提交包含了 <code>tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</code>，同时它的父提交就是 <code>parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</code>，有了这两个id就可以递推出当前版本内容和这个历史记录。</p><p>通过 <code>tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</code> 可以递归找出当前版本中的所有文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">040000 tree 6608d88fe6a7a25b137b869040103ab261310da4    .github</span><br><span class="line">100644 blob e445fd2017bb0c13af2f40cd7f24afefdb603ade    .gitignore</span><br><span class="line">100644 blob 484aeb62186033d32e9a4bdf12434cb6b8c56fb5    00-RELEASENOTES</span><br><span class="line">100644 blob 7af2593407805c308cc25739ac9c6520031de60f    BUGS</span><br><span class="line">100644 blob 000edbeaf0270bf3b9e457274ab092b02b176b84    CONTRIBUTING</span><br><span class="line">100644 blob a381681a1c2524ed586c6a87dfeb9ccdf1e86ded    COPYING</span><br><span class="line">100644 blob 3083f1afd50c34e1139ab1577510a17e968b0ed4    INSTALL</span><br><span class="line">100644 blob 3727894624fdabf72995e6f94998a2cad359f760    MANIFESTO</span><br><span class="line">100644 blob e614ede891f2dd183a3ae41ea1ac3b63fe2e7634    Makefile</span><br><span class="line">100644 blob 55537e01fe862dd200ebe1078033122facfc854e    README.md</span><br><span class="line">100644 blob 2d020d0ceb0ddc7fd0bb2a6185e57a9afd5aef79    TLS.md</span><br><span class="line">040000 tree 43ccdd93a80b35e03160d9db34f1e844a62a74b4    deps</span><br><span class="line">100644 blob 8c53f015a20934bdb41c77152fd32a557d719fae    redis.conf</span><br><span class="line">100755 blob ade1bd09a539ecd8dcdd09e59a658539dab9bce6    runtest</span><br><span class="line">100755 blob 27829a5fe8afacf893fe9bafc4245971ce375d6c    runtest-cluster</span><br><span class="line">100755 blob f6cc0a2589dea0f95b77b226e54200a29b8237ae    runtest-moduleapi</span><br><span class="line">100755 blob 3fb1ef61561289b2bf8622e49645f66dab83eeea    runtest-sentinel</span><br><span class="line">100644 blob 4ca5e5f8fc5abe2938c66a6851bba0c90058620f    sentinel.conf</span><br><span class="line">040000 tree e3b3338a7c60eafb3d9c19d3784e2482beea1d4b    src</span><br><span class="line">040000 tree af5de133fa0a0da30fe487be40783ef9644fba6d    tests</span><br><span class="line">040000 tree 5a82556097d23f0c16a8e5432d464f2ab434fd2a    utils</span><br></pre></td></tr></table></figure><p>通过 <code>parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</code> 可以找出上一次提交，进而递归找出所有的提交，要注意有些commit的parent不止一个：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">tree 1adcf548620c6134f7d5fd072c05b981d0f36118</span><br><span class="line">parent e15528bf1da1f1232fd08801ad382c915be94662</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595162001 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Run daily CI on PRs to release a branch</span><br></pre></td></tr></table></figure><p>这个commit的设计真的很神奇，一个个commit串起来就是一个branch，本质来讲<code>branch</code>只是commit的一个别名，包括<code>HEAD</code>也是，而 <code>tag</code> 也是对commit的一个描述，在不加描述信息时和commit也是一样的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p 6.0.6</span><br><span class="line">tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595156420 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Redis 6.0.6.</span><br><span class="line"></span><br><span class="line">$ git cat-file -p HEAD</span><br><span class="line">tree c3d4b2bcd934be7e4ed98edac5aa7e9c054503c3</span><br><span class="line">parent a5696bdf4f2687ab45f633ccb7cdc4ee9c2f957d</span><br><span class="line">author Oran Agra &lt;oran@redislabs.com&gt; 1595156420 +0300</span><br><span class="line">committer Oran Agra &lt;oran@redislabs.com&gt; 1595268506 +0300</span><br><span class="line"></span><br><span class="line">Redis 6.0.6.</span><br></pre></td></tr></table></figure><p>所以理解了commit的定位以后，所有切换分支、切换tag、操作HEAD，本质上都是在对commit进行操作，这些操作的参数完全可以用commit id来替换HEAD、branch name、tag name等等。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>svn的提交记录是一个按时间排序的线性结构，git的提交记录是一个参考时间的树状结构</li><li>git记录中时间先后不能代表commit修改的先后，回溯查找时要注意这一点才能解释很多疑惑</li><li>git中的commit我认为是它的精髓，通过commit的串联和别名，形成分支、标签、HEAD等多种元素，隐藏了细节，方便了操作</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122725846" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>什么才是精彩的人生？扬在脸上的自信、长在心底的善良、融进血里的骨气、刻进生命里的坚强~</p><p>2022-2-13 23:19:05</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作中使用git是从两年前开始的，之前一直&lt;code&gt;add -&amp;gt; commit -&amp;gt;push&lt;/code&gt;常规操作，真正在工作
      
    
    </summary>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/categories/Git/"/>
    
    
      <category term="git" scheme="http://AlbertGithubHome.github.io/blog/tags/git/"/>
    
      <category term="stash" scheme="http://AlbertGithubHome.github.io/blog/tags/stash/"/>
    
      <category term="branch" scheme="http://AlbertGithubHome.github.io/blog/tags/branch/"/>
    
      <category term="commit" scheme="http://AlbertGithubHome.github.io/blog/tags/commit/"/>
    
      <category term="tag" scheme="http://AlbertGithubHome.github.io/blog/tags/tag/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下随时照看服务器进程的ps和top命令</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/01/23/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E9%9A%8F%E6%97%B6%E7%85%A7%E7%9C%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E7%A8%8B%E7%9A%84ps%E5%92%8Ctop%E5%91%BD%E4%BB%A4/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/01/23/linux环境下随时照看服务器进程的ps和top命令/</id>
    <published>2022-01-23T15:40:05.000Z</published>
    <updated>2022-01-27T16:53:44.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在linux环境服务器下通常是不会安装图形界面的，这时如果想看程序是否在正常运行着，就不能像在windows上一样去查看任务管理器，而是需要通过命令来查询程序的进程运行情况，<code>ps</code> 就是一个查询linux环境下进程运行状态的命令，请注意这个可不是我们P图用的那个工具哦。</p><h1 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h1><p><code>ps</code> 命令在man手册中描述是 “report a snapshot of the current processes”，其实它的作用就是上报程序运行时的一个快照。</p><blockquote><p>ps displays information about a selection of the active processes.  If you want a repetitive update of the selection and the displayed information, use top(1) instead.</p></blockquote><p>man手册中的这句话也很好理解，<code>ps</code> 命令执行一次就会显示一次所选进程的信息，若想重复刷新显示所选进程的信息，可以使用 <code>top</code> 命令，从作用上来看，可以简单理解为 <code>top</code> 命令是一个反复执行的 <code>ps</code> 命令。</p><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps [options]</span><br></pre></td></tr></table></figure><p><code>ps</code> 命令的格式很简单，但是为什么感觉同一个查询进程的需求，每个人写出来的命令都不太一样呢？其实这是因为有好几种语法规范，无论怎么写都可以，甚至交叉混合的写命令都是能识别的，比如最常见的查询所有进程有些人会写成 <code>ps -ef</code>，而有的人会写成 <code>ps aux</code>，这两种都是可以的。</p><h2 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h2><p><code>ps -ef</code> 是使用了UNIX选项，是一种标准语法，而 <code>ps aux</code>使用了BSD选项，是一种BSD语法，另外还有一种加两个短横线的写法，例如 <code>ps --pid 3678</code>，这是一种GNU长选项。</p><h2 id="常用的ps选项"><a href="#常用的ps选项" class="headerlink" title="常用的ps选项"></a>常用的ps选项</h2><ol><li>显示所有的进程，一般搭配grep使用</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep processname</span><br></pre></td></tr></table></figure><ol><li>显示指定的列，可以使用 <code>-eo</code> 来指列名，我最常用的 cmd 是启动时的命令，lstart 是启动时的时间</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ps -eo cmd,lstart | grep sshd</span></span><br><span class="line">usr/sbin/sshd -D           Tue Feb  9 11:13:55 2021</span><br></pre></td></tr></table></figure><ol><li>以树形结构显示进程</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -axjf</span><br></pre></td></tr></table></figure><ol><li>查询指定用户的进程</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -fu root</span><br></pre></td></tr></table></figure><ol><li>按cpu使用率降序排序</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux --sort -pcpu</span><br></pre></td></tr></table></figure><ol><li>按内存使用率降序排序</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux --sort +pmem</span><br></pre></td></tr></table></figure><h2 id="ps命令的表头"><a href="#ps命令的表头" class="headerlink" title="ps命令的表头"></a>ps命令的表头</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ps -aux --sort -pcpu</span></span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root     17444  0.4  3.7 994796 71276 ?        Sl    2021 181:54 /usr/<span class="built_in">local</span>/qcloud/YunJing/YDEyes/YDService</span><br><span class="line">root      8572  0.3  0.7 614824 14416 ?        Sl   Jan20  21:35 barad_agent</span><br><span class="line">root         1  0.0  0.1 191084  3336 ?        Ss    2021  76:42 /usr/lib/systemd/systemd --switched-root --system --deserialize 22</span><br><span class="line">root         2  0.0  0.0      0     0 ?        S     2021   0:09 [kthreadd]</span><br><span class="line">root         4  0.0  0.0      0     0 ?        S&lt;    2021   0:00 [kworker/0:0H]</span><br><span class="line">root      1063  0.0  0.0 110208   792 tty1     Ss+   2021   0:00 /sbin/agetty --noclear tty1 linux</span><br><span class="line">root      1064  0.0  0.0 110208   772 ttyS0    Ss+   2021   0:00 /sbin/agetty --keep-baud 115200,38400,9600 ttyS0 vt220</span><br><span class="line">root      2388  0.0  0.1 157696  1952 pts/0    R+   00:27   0:00 ps -aux --sort -pcpu</span><br><span class="line">root         6  0.0  0.0      0     0 ?        S     2021  13:09 [ksoftirqd/0]</span><br></pre></td></tr></table></figure><p>执行 <code>ps</code> 命令通常有以上几列：<code>USER</code>、<code>PID</code>、<code>%CPU</code>、<code>%MEM</code>、<code>VSZ</code>、<code>RSS</code>、<code>TTY</code>、<code>STAT</code>、<code>START</code>、<code>TIME</code>、<code>COMMAND</code></p><p><code>USER</code>：进程所属用户名<br><code>PID</code>：进程ID<br><code>%CPU</code>：进程CPU使用率，注意所有CPU使用率加起来可以超过100%，如果有4个CPU，在不考虑多核的情况下，最大应该为400%<br><code>%MEM</code>：进程内存使用率，可以配合 <code>free -h</code> 命令使用<br><code>VSZ</code>：进程使用的虚拟内存量<br><code>RSS</code>：进程占用的固定内存量<br><code>TTY</code>：进程在哪个终端上运行，若与终端无关，则显示 <code>?</code><br><code>STAT</code>：进程启动的时间<br><code>START</code>：进程状态，是一个组合值，每个符号有单独含义，见下文<br><code>TIME</code>：进程使用CPU运行的时间<br><code>COMMAND</code>：启动进程时执行的命令的名称和参数</p><h2 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h2><p>这一部分是要是对man手册的翻译内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Here are the different values that the s, <span class="built_in">stat</span> and state output specifiers (header <span class="string">"STAT"</span> or <span class="string">"S"</span>)</span><br><span class="line">    will display to describe the state of a process:</span><br><span class="line"></span><br><span class="line">           D    uninterruptible sleep (usually IO)</span><br><span class="line">           R    running or runnable (on run queue)</span><br><span class="line">           S    interruptible sleep (waiting <span class="keyword">for</span> an event to complete)</span><br><span class="line">           T    stopped by job control signal</span><br><span class="line">           t    stopped by debugger during the tracing</span><br><span class="line">           W    paging (not valid since the 2.6.xx kernel)</span><br><span class="line">           X    dead (should never be seen)</span><br><span class="line">           Z    defunct (<span class="string">"zombie"</span>) process, terminated but not reaped by its parent</span><br><span class="line"></span><br><span class="line">   For BSD formats and when the <span class="built_in">stat</span> keyword is used, additional characters may be displayed:</span><br><span class="line"></span><br><span class="line">           &lt;    high-priority (not nice to other users)</span><br><span class="line">           N    low-priority (nice to other users)</span><br><span class="line">           L    has pages locked into memory (<span class="keyword">for</span> real-time and custom IO)</span><br><span class="line">           s    is a session leader</span><br><span class="line">           l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads <span class="keyword">do</span>)</span><br><span class="line">           +    is <span class="keyword">in</span> the foreground process group</span><br></pre></td></tr></table></figure><h3 id="常规状态码"><a href="#常规状态码" class="headerlink" title="常规状态码"></a>常规状态码</h3><p><code>D</code>: 无法中断的休眠状态（通常 IO 的进程）<br><code>R</code>: 正在运行可中在队列中可过行的；<br><code>S</code>: 处于休眠状态<br><code>T</code>: 停止或被追踪<br><code>W</code>: 进入内存交换（从内核2.6开始无效）<br><code>X</code>: 死掉的进程（基本很少见）<br><code>Z</code>: 僵尸进程，想杀死通常需要重启系统</p><h3 id="BSD格式状态码"><a href="#BSD格式状态码" class="headerlink" title="BSD格式状态码"></a>BSD格式状态码</h3><p><code>&lt;</code>: 优先级高的进程<br><code>N</code>: 优先级较低的进程<br><code>L</code>: 有些页被锁进内存<br><code>s</code>: 一个会话进程的领导者（在它之下有子进程）<br><code>l</code>: 多进程的（使用 CLONE_THREAD, 类似 NPTL pthreads）<br><code>+</code>: 位于后台的进程组</p><h2 id="进程相关的后续命令"><a href="#进程相关的后续命令" class="headerlink" title="进程相关的后续命令"></a>进程相关的后续命令</h2><ol><li>查询进程的可执行文件所在位置</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/进程id</span><br></pre></td></tr></table></figure><ol><li>按进程名查询进程id</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pidof 进程名</span><br></pre></td></tr></table></figure><h1 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h1><h2 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top [options]</span><br></pre></td></tr></table></figure><p><code>top</code> 命令的man手册巨长，它的作用是动态显示进程状态，实际上就是一份份静态数据间隔显示而已，虽然他也有很多参数，但是通常仅使用一个 <code>top</code> 命令即可。</p><h2 id="常用的top选项和快捷键"><a href="#常用的top选项和快捷键" class="headerlink" title="常用的top选项和快捷键"></a>常用的top选项和快捷键</h2><ol><li>显示top帮助</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -hV</span><br></pre></td></tr></table></figure><ol><li>按照CPU使用率排序</li></ol><p>运行top命令后，输入大写字母P，也就是按快捷键 <code>ctrl+p</code></p><ol><li>按照内存使用率排序</li></ol><p>运行top命令后，输入大写字母M，也就是按快捷键 <code>ctrl+m</code></p><ol><li>展开多核cpu显示</li></ol><p>运行top命令后，输入数字1</p><ol><li>切换显示命令名称和完整命令行</li></ol><p>运行top命令后，输入小写字母c</p><ol><li>切换显示平均负载和启动时间信息</li></ol><p>运行top命令后，输入小写字母l</p><h2 id="top命令的表头"><a href="#top命令的表头" class="headerlink" title="top命令的表头"></a>top命令的表头</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># top</span></span><br><span class="line"></span><br><span class="line">top - 00:07:35 up 0 min,  0 users,  load average: 0.52, 0.58, 0.59</span><br><span class="line">Tasks:   4 total,   1 running,   3 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  3.4 us,  8.0 sy,  0.0 ni, 88.4 id,  0.0 wa,  0.2 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  8248540 total,  3284196 free,  4727868 used,   236476 buff/cache</span><br><span class="line">KiB Swap: 13107196 total, 13080444 free,    26752 used.  3379816 avail Mem</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class="line">    1 root      20   0    8940    316    272 S   0.0  0.0   0:00.15 init</span><br><span class="line">   10 root      20   0    8940    224    176 S   0.0  0.0   0:00.00 init</span><br><span class="line">   11 albert    20   0   15024   3568   3468 S   0.0  0.0   0:00.24 bash</span><br><span class="line">   38 albert    20   0   15900   1960   1420 R   0.0  0.0   0:00.04 top</span><br></pre></td></tr></table></figure><p>执行 <code>top</code> 命令后默认有这些列 <code>PID</code>、<code>USER</code>、<code>PR</code>、<code>NI</code>、<code>VIRT</code>、<code>RES</code>、<code>SHR</code>、<code>S</code>、<code>%CPU</code>、<code>%MEM</code>、<code>TIME+</code>、<code>COMMAND</code>，它们的含义分表是：</p><p><code>PID</code>：进程id<br><code>USER</code>：进程所有者用户名<br><code>PR</code>：优先级<br><code>NI</code>：NICE值.负值表示高优先级，正值表示低优先级<br><code>VIRT</code>：进程使用的虚拟内存总量，单位KB，VIRT=SWAP+RES<br><code>RES</code>：进程使用的未被换出的物理内存大小，单位KB，RES=CODE+DATA<br><code>SHR</code>：共享内存大小，单位KB，<br><code>S</code>：进程状态，D=不可中断的睡眠状态，R=运行，S=睡眠，T=跟踪/停止，Z=僵尸进程<br><code>%CPU</code>：CPU使用百分比<br><code>%MEM</code>、内存使用百分比<br><code>TIME+</code>：进程使用的CPU时间总计,单位1/100秒<br><code>COMMAND</code>：启动命令</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>显示所有进程可以使用 <code>ps -ef</code> 或者 <code>ps aux</code>，他们通常是后续过滤的第一步</li><li>按cpu使用率降序排序使用 <code>ps aux --sort -pcpu</code>，按内存使用率降序排序使用 <code>ps aux --sort +pmem</code></li><li><code>top</code> 命令结果的第一行是整体信息，包括了当前时间，系统已运行时间，登录用户数，系统负载等信息</li><li><code>top</code> 命令中按大写字母 <code>P</code> 会按照CPU排序，按大写字母 <code>M</code> 会按照内存排序</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122401193" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>小孩子才有对错，长大了都是利益。做选择的本质是分类，权衡利弊的过程是分类，趋利避害的行事生活更是分类，所以遇到选择我们才要考虑方方面面，因为这样我们才有足够的理由来把它归为有利的一类，还是有害的一类~</p><p>2022-1-28 00:41:05</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在linux环境服务器下通常是不会安装图形界面的，这时如果想看程序是否在正常运行着，就不能像在windows上一样去查看任务管理器，而是需要
      
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="ps" scheme="http://AlbertGithubHome.github.io/blog/tags/ps/"/>
    
      <category term="命令" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%91%BD%E4%BB%A4/"/>
    
      <category term="top" scheme="http://AlbertGithubHome.github.io/blog/tags/top/"/>
    
  </entry>
  
  <entry>
    <title>通过WindowsStore安装QuickLook小工具方便文件预览</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/01/09/%E9%80%9A%E8%BF%87WindowsStore%E5%AE%89%E8%A3%85QuickLook%E5%B0%8F%E5%B7%A5%E5%85%B7%E6%96%B9%E4%BE%BF%E6%96%87%E4%BB%B6%E9%A2%84%E8%A7%88/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/01/09/通过WindowsStore安装QuickLook小工具方便文件预览/</id>
    <published>2022-01-09T14:23:18.000Z</published>
    <updated>2022-01-09T15:35:18.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>话说Windows商店一直没有什么存在感，普通大众从互联网野蛮生长开始就一直被各大流氓软件控制着连接互联网的门户，下载软件去官网只是少数人拿来伸张正义的说辞，有些官网的访问速度确实…不过随着手机的普及，应用商店的下载安装方式逐渐被人们所接受，而Windows商店也渐渐进入了人们的视野，毕竟又这么个官方的东西，总比满大街搜索捆绑的软件要方便的多。</p><a id="more"></a><p>今天主要是想记录一下QuickLook这个软件，毕竟小而美的工具可以极大的提高生产力，或者是摸鱼的能力，这个软件可以在你想要预览某个文档或者图片时，轻轻敲一个空格就搞定，比如想看一个压缩包的内容，只需敲个空格就可以。<br><img src="https://img-blog.csdnimg.cn/321aa8cc124c4b6c91577b7d7ca80089.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="ZIP"></p><h1 id="Windows商店"><a href="#Windows商店" class="headerlink" title="Windows商店"></a>Windows商店</h1><p>这个小工具在windows商店里就有，搜索安装比较方便，但是我发现我电脑里的WindowsStore不见了，还真是神奇，前一段时间还用过的，不知不觉就消失了，所以先安装Windows商店吧。</p><p>首先按组合键<code>Win+X</code>，在弹出菜单中左键单击 <code>Windows PowerShell(管理员)</code>选项，输入命令 <code>Get-AppxPackage -allusers | Select Name, PackageFullName</code>，之后会在命令窗口中显示可以安装的软件包。<br><img src="https://img-blog.csdnimg.cn/e4550305e2d947e2a2b9bae74e4f3988.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_8,color_FFFFFF,t_70#pic_center" alt="Win+X"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Albert at HOME-PC in C:\Windows\system32 [19:55:50]</span></span><br><span class="line">$ Get-AppxPackage -allusers | Select Name, PackageFullName</span><br><span class="line"></span><br><span class="line">Name                                         PackageFullName</span><br><span class="line">----                                         ---------------</span><br><span class="line">1527c705-839a-4832-9118-54d4Bd6a0c89         1527c705-839a-4832-9118-54d4Bd6a0c89_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">c5e2524a-ea46-4f67-841f-6a9465d9d515         c5e2524a-ea46-4f67-841f-6a9465d9d515_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">E2A4F912-2574-4A75-9BB0-0D023378592B         E2A4F912-2574-4A75-9BB0-0D023378592B_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE         F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE_10.0.18362.387_neutral_neutral_cw5...</span><br><span class="line">InputApp                                     InputApp_1000.18362.387.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AAD.BrokerPlugin                   Microsoft.AAD.BrokerPlugin_1000.18362.387.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AccountsControl                    Microsoft.AccountsControl_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.AsyncTextService                   Microsoft.AsyncTextService_10.0.18362.387_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BioEnrollment                      Microsoft.BioEnrollment_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.CredDialogHost                     Microsoft.CredDialogHost_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.ECApp                              Microsoft.ECApp_10.0.18362.387_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.LockApp                            Microsoft.LockApp_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.MicrosoftEdgeDevToolsClient        Microsoft.MicrosoftEdgeDevToolsClient_1000.18362.387.0_neutral_neutral_...</span><br><span class="line">Microsoft.MicrosoftEdge                      Microsoft.MicrosoftEdge_44.18362.387.0_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.PPIProjection                      Microsoft.PPIProjection_10.0.18362.387_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Win32WebViewHost                   Microsoft.Win32WebViewHost_10.0.18362.387_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.Apprep.ChxApp              Microsoft.Windows.Apprep.ChxApp_1000.18362.387.0_neutral_neutral_cw5n1h...</span><br><span class="line">Microsoft.Windows.AssignedAccessLockApp      Microsoft.Windows.AssignedAccessLockApp_1000.18362.387.0_neutral_neutra...</span><br><span class="line">Microsoft.Windows.CallingShellApp            Microsoft.Windows.CallingShellApp_1000.18362.387.0_neutral_neutral_cw5n...</span><br><span class="line">Microsoft.Windows.CapturePicker              Microsoft.Windows.CapturePicker_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.CloudExperienceHost        Microsoft.Windows.CloudExperienceHost_10.0.18362.387_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.ContentDeliveryManager     Microsoft.Windows.ContentDeliveryManager_10.0.18362.387_neutral_neutral...</span><br><span class="line">Microsoft.Windows.Cortana                    Microsoft.Windows.Cortana_1.13.0.18362_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.NarratorQuickStart         Microsoft.Windows.NarratorQuickStart_10.0.18362.387_neutral_neutral_8we...</span><br><span class="line">Microsoft.Windows.OOBENetworkCaptivePortal   Microsoft.Windows.OOBENetworkCaptivePortal_10.0.18362.387_neutral__cw5n...</span><br><span class="line">Microsoft.Windows.OOBENetworkConnectionFlow  Microsoft.Windows.OOBENetworkConnectionFlow_10.0.18362.387_neutral__cw5...</span><br><span class="line">Microsoft.Windows.ParentalControls           Microsoft.Windows.ParentalControls_1000.18362.387.0_neutral_neutral_cw5...</span><br><span class="line">Microsoft.Windows.PeopleExperienceHost       Microsoft.Windows.PeopleExperienceHost_10.0.18362.387_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.PinningConfirmationDialog  Microsoft.Windows.PinningConfirmationDialog_1000.18362.387.0_neutral__c...</span><br><span class="line">Microsoft.Windows.SecHealthUI                Microsoft.Windows.SecHealthUI_10.0.18362.387_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.SecureAssessmentBrowser    Microsoft.Windows.SecureAssessmentBrowser_10.0.18362.387_neutral_neutra...</span><br><span class="line">Microsoft.Windows.ShellExperienceHost        Microsoft.Windows.ShellExperienceHost_10.0.18362.387_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.StartMenuExperienceHost    Microsoft.Windows.StartMenuExperienceHost_10.0.18362.387_neutral_neutra...</span><br><span class="line">Microsoft.Windows.XGpuEjectDialog            Microsoft.Windows.XGpuEjectDialog_10.0.18362.387_neutral_neutral_cw5n1h...</span><br><span class="line">Microsoft.XboxGameCallableUI                 Microsoft.XboxGameCallableUI_1000.18362.387.0_neutral_neutral_cw5n1h2tx...</span><br><span class="line">Windows.CBSPreview                           Windows.CBSPreview_10.0.18362.387_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">windows.immersivecontrolpanel                windows.immersivecontrolpanel_10.0.2.1000_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Windows.PrintDialog                          Windows.PrintDialog_6.2.1.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Advertising.Xaml                   Microsoft.Advertising.Xaml_10.1808.3.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.25531.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.25531.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.27011.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.25531.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.25531.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.2             Microsoft.NET.Native.Runtime.2.2_2.2.27011.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.18101.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.18101.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.0                        Microsoft.UI.Xaml.2.0_2.1810.18004.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.26905.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Wallet                             Microsoft.Wallet_2.4.18324.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27323.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27323.0_x86__8wekyb3d8bbwe</span><br><span class="line">RealtekSemiconductorCorp.RealtekAudioControl RealtekSemiconductorCorp.RealtekAudioControl_1.3.179.0_x64__dt26b99r8h8gj</span><br><span class="line">Microsoft.Print3D                            Microsoft.Print3D_3.3.791.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxSpeechToTextOverlay            Microsoft.XboxSpeechToTextOverlay_1.21.13002.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Xbox.TCUI                          Microsoft.Xbox.TCUI_1.24.10001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27810.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.27810.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.0                        Microsoft.UI.Xaml.2.0_2.1810.18004.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.27912.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.27413.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.27912.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.1.7           Microsoft.NET.Native.Framework.1.7_1.7.27413.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.1             Microsoft.NET.Native.Runtime.2.1_2.1.26424.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.1             Microsoft.NET.Native.Runtime.2.1_2.1.26424.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Messaging                          Microsoft.Messaging_4.1901.10241.1000_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Advertising.Xaml                   Microsoft.Advertising.Xaml_10.1811.1.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Advertising.Xaml                   Microsoft.Advertising.Xaml_10.1811.1.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.1           Microsoft.NET.Native.Framework.2.1_2.1.27427.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.1           Microsoft.NET.Native.Framework.2.1_2.1.27427.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.2                        Microsoft.UI.Xaml.2.2_2.21909.17002.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.2                        Microsoft.UI.Xaml.2.2_2.21909.17002.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.27810.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.27810.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.1                        Microsoft.UI.Xaml.2.1_2.11906.6001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.1                        Microsoft.UI.Xaml.2.1_2.11906.6001.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.19011.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Services.Store.Engagement          Microsoft.Services.Store.Engagement_10.0.19011.0_x64__8wekyb3d8bbwe</span><br><span class="line">InputApp                                     InputApp_1000.18362.449.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AAD.BrokerPlugin                   Microsoft.AAD.BrokerPlugin_1000.18362.449.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AccountsControl                    Microsoft.AccountsControl_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.AsyncTextService                   Microsoft.AsyncTextService_10.0.18362.449_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BioEnrollment                      Microsoft.BioEnrollment_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.CredDialogHost                     Microsoft.CredDialogHost_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.ECApp                              Microsoft.ECApp_10.0.18362.449_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.LockApp                            Microsoft.LockApp_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.MicrosoftEdgeDevToolsClient        Microsoft.MicrosoftEdgeDevToolsClient_1000.18362.449.0_neutral_neutral_...</span><br><span class="line">Microsoft.Windows.Apprep.ChxApp              Microsoft.Windows.Apprep.ChxApp_1000.18362.449.0_neutral_neutral_cw5n1h...</span><br><span class="line">Microsoft.Windows.AssignedAccessLockApp      Microsoft.Windows.AssignedAccessLockApp_1000.18362.449.0_neutral_neutra...</span><br><span class="line">Microsoft.Windows.CallingShellApp            Microsoft.Windows.CallingShellApp_1000.18362.449.0_neutral_neutral_cw5n...</span><br><span class="line">Microsoft.Windows.CapturePicker              Microsoft.Windows.CapturePicker_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.OOBENetworkCaptivePortal   Microsoft.Windows.OOBENetworkCaptivePortal_10.0.18362.449_neutral__cw5n...</span><br><span class="line">Microsoft.Windows.OOBENetworkConnectionFlow  Microsoft.Windows.OOBENetworkConnectionFlow_10.0.18362.449_neutral__cw5...</span><br><span class="line">Microsoft.Windows.ParentalControls           Microsoft.Windows.ParentalControls_1000.18362.449.0_neutral_neutral_cw5...</span><br><span class="line">Microsoft.Windows.PinningConfirmationDialog  Microsoft.Windows.PinningConfirmationDialog_1000.18362.449.0_neutral__c...</span><br><span class="line">Microsoft.XboxGameCallableUI                 Microsoft.XboxGameCallableUI_1000.18362.449.0_neutral_neutral_cw5n1h2tx...</span><br><span class="line">1527c705-839a-4832-9118-54d4Bd6a0c89         1527c705-839a-4832-9118-54d4Bd6a0c89_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">c5e2524a-ea46-4f67-841f-6a9465d9d515         c5e2524a-ea46-4f67-841f-6a9465d9d515_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">E2A4F912-2574-4A75-9BB0-0D023378592B         E2A4F912-2574-4A75-9BB0-0D023378592B_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE         F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE_10.0.18362.449_neutral_neutral_cw5...</span><br><span class="line">Microsoft.MicrosoftEdge                      Microsoft.MicrosoftEdge_44.18362.449.0_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.PPIProjection                      Microsoft.PPIProjection_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Win32WebViewHost                   Microsoft.Win32WebViewHost_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.CloudExperienceHost        Microsoft.Windows.CloudExperienceHost_10.0.18362.449_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.ContentDeliveryManager     Microsoft.Windows.ContentDeliveryManager_10.0.18362.449_neutral_neutral...</span><br><span class="line">Microsoft.Windows.NarratorQuickStart         Microsoft.Windows.NarratorQuickStart_10.0.18362.449_neutral_neutral_8we...</span><br><span class="line">Microsoft.Windows.PeopleExperienceHost       Microsoft.Windows.PeopleExperienceHost_10.0.18362.449_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.SecHealthUI                Microsoft.Windows.SecHealthUI_10.0.18362.449_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.SecureAssessmentBrowser    Microsoft.Windows.SecureAssessmentBrowser_10.0.18362.449_neutral_neutra...</span><br><span class="line">Microsoft.Windows.ShellExperienceHost        Microsoft.Windows.ShellExperienceHost_10.0.18362.449_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.StartMenuExperienceHost    Microsoft.Windows.StartMenuExperienceHost_10.0.18362.449_neutral_neutra...</span><br><span class="line">Microsoft.Windows.XGpuEjectDialog            Microsoft.Windows.XGpuEjectDialog_10.0.18362.449_neutral_neutral_cw5n1h...</span><br><span class="line">Windows.CBSPreview                           Windows.CBSPreview_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.UI.Xaml.2.3                        Microsoft.UI.Xaml.2.3_2.32002.13001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.3                        Microsoft.UI.Xaml.2.3_2.32002.13001.0_x86__8wekyb3d8bbwe</span><br><span class="line">AppUp.IntelGraphicsControlPanel              AppUp.IntelGraphicsControlPanel_3.3.0.0_x64__8j3eq9eme6ctt</span><br><span class="line">Microsoft.NET.Native.Runtime.2.2             Microsoft.NET.Native.Runtime.2.2_2.2.28604.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.2.2             Microsoft.NET.Native.Runtime.2.2_2.2.28604.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.EdgeDevtoolsPlugin                 Microsoft.EdgeDevtoolsPlugin_10.0.18362.449_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">CanonicalGroupLimited.Ubuntu16.04onWindows   CanonicalGroupLimited.Ubuntu16.04onWindows_2020.1604.14.0_x64__79rhkp1f...</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.27422.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Runtime.1.7             Microsoft.NET.Native.Runtime.1.7_1.7.27422.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxGameOverlay                    Microsoft.XboxGameOverlay_1.54.4001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxIdentityProvider               Microsoft.XboxIdentityProvider_12.67.21001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.4                        Microsoft.UI.Xaml.2.4_2.42007.9001.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.4                        Microsoft.UI.Xaml.2.4_2.42007.9001.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.ScreenSketch                       Microsoft.ScreenSketch_10.2008.2277.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.OneConnect                         Microsoft.OneConnect_5.2011.3081.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.DesktopAppInstaller                Microsoft.DesktopAppInstaller_1.4.3161.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.29512.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.NET.Native.Framework.2.2           Microsoft.NET.Native.Framework.2.2_2.2.29512.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Office.OneNote                     Microsoft.Office.OneNote_16001.13328.20478.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.5                        Microsoft.UI.Xaml.2.5_2.52012.2002.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.5                        Microsoft.UI.Xaml.2.5_2.52012.2002.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsAlarms                      Microsoft.WindowsAlarms_10.2101.28.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsCamera                      Microsoft.WindowsCamera_2021.105.10.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WebMediaExtensions                 Microsoft.WebMediaExtensions_1.0.40831.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WebpImageExtension                 Microsoft.WebpImageExtension_1.0.41203.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsStore                       Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BingWeather                        Microsoft.BingWeather_4.46.31121.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsCalculator                  Microsoft.WindowsCalculator_10.2103.8.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsSoundRecorder               Microsoft.WindowsSoundRecorder_10.2103.28.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.MSPaint                            Microsoft.MSPaint_6.2105.4017.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.Microsoft3DViewer                  Microsoft.Microsoft3DViewer_7.2105.4012.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.HEIFImageExtension                 Microsoft.HEIFImageExtension_1.0.40978.0_x64__8wekyb3d8bbwe</span><br><span class="line">1527c705-839a-4832-9118-54d4Bd6a0c89         1527c705-839a-4832-9118-54d4Bd6a0c89_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">c5e2524a-ea46-4f67-841f-6a9465d9d515         c5e2524a-ea46-4f67-841f-6a9465d9d515_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">E2A4F912-2574-4A75-9BB0-0D023378592B         E2A4F912-2574-4A75-9BB0-0D023378592B_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE         F46D4000-FD22-4DB4-AC8E-4E1DDDE828FE_10.0.18362.1533_neutral_neutral_cw...</span><br><span class="line">InputApp                                     InputApp_1000.18362.1533.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AAD.BrokerPlugin                   Microsoft.AAD.BrokerPlugin_1000.18362.1533.0_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.AccountsControl                    Microsoft.AccountsControl_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.AsyncTextService                   Microsoft.AsyncTextService_10.0.18362.1533_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.BioEnrollment                      Microsoft.BioEnrollment_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.CredDialogHost                     Microsoft.CredDialogHost_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.ECApp                              Microsoft.ECApp_10.0.18362.1533_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.EdgeDevtoolsPlugin                 Microsoft.EdgeDevtoolsPlugin_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.LockApp                            Microsoft.LockApp_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.MicrosoftEdgeDevToolsClient        Microsoft.MicrosoftEdgeDevToolsClient_1000.18362.1533.0_neutral_neutral...</span><br><span class="line">Microsoft.MicrosoftEdge                      Microsoft.MicrosoftEdge_44.18362.1533.0_neutral__8wekyb3d8bbwe</span><br><span class="line">Microsoft.PPIProjection                      Microsoft.PPIProjection_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Win32WebViewHost                   Microsoft.Win32WebViewHost_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.Apprep.ChxApp              Microsoft.Windows.Apprep.ChxApp_1000.18362.1533.0_neutral_neutral_cw5n1...</span><br><span class="line">Microsoft.Windows.AssignedAccessLockApp      Microsoft.Windows.AssignedAccessLockApp_1000.18362.1533.0_neutral_neutr...</span><br><span class="line">Microsoft.Windows.CallingShellApp            Microsoft.Windows.CallingShellApp_1000.18362.1533.0_neutral_neutral_cw5...</span><br><span class="line">Microsoft.Windows.CapturePicker              Microsoft.Windows.CapturePicker_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.CloudExperienceHost        Microsoft.Windows.CloudExperienceHost_10.0.18362.1533_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.ContentDeliveryManager     Microsoft.Windows.ContentDeliveryManager_10.0.18362.1533_neutral_neutra...</span><br><span class="line">Microsoft.Windows.Cortana                    Microsoft.Windows.Cortana_1.13.1.18362_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.NarratorQuickStart         Microsoft.Windows.NarratorQuickStart_10.0.18362.1533_neutral_neutral_8w...</span><br><span class="line">Microsoft.Windows.OOBENetworkCaptivePortal   Microsoft.Windows.OOBENetworkCaptivePortal_10.0.18362.1533_neutral__cw5...</span><br><span class="line">Microsoft.Windows.OOBENetworkConnectionFlow  Microsoft.Windows.OOBENetworkConnectionFlow_10.0.18362.1533_neutral__cw...</span><br><span class="line">Microsoft.Windows.ParentalControls           Microsoft.Windows.ParentalControls_1000.18362.1533.0_neutral_neutral_cw...</span><br><span class="line">Microsoft.Windows.PeopleExperienceHost       Microsoft.Windows.PeopleExperienceHost_10.0.18362.1533_neutral_neutral_...</span><br><span class="line">Microsoft.Windows.PinningConfirmationDialog  Microsoft.Windows.PinningConfirmationDialog_1000.18362.1533.0_neutral__...</span><br><span class="line">Microsoft.Windows.SecHealthUI                Microsoft.Windows.SecHealthUI_10.0.18362.1533_neutral__cw5n1h2txyewy</span><br><span class="line">Microsoft.Windows.SecureAssessmentBrowser    Microsoft.Windows.SecureAssessmentBrowser_10.0.18362.1533_neutral_neutr...</span><br><span class="line">Microsoft.Windows.ShellExperienceHost        Microsoft.Windows.ShellExperienceHost_10.0.18362.1533_neutral_neutral_c...</span><br><span class="line">Microsoft.Windows.StartMenuExperienceHost    Microsoft.Windows.StartMenuExperienceHost_10.0.18362.1533_neutral_neutr...</span><br><span class="line">Microsoft.Windows.XGpuEjectDialog            Microsoft.Windows.XGpuEjectDialog_10.0.18362.1533_neutral_neutral_cw5n1...</span><br><span class="line">Microsoft.XboxGameCallableUI                 Microsoft.XboxGameCallableUI_1000.18362.1533.0_neutral_neutral_cw5n1h2t...</span><br><span class="line">Windows.CBSPreview                           Windows.CBSPreview_10.0.18362.1533_neutral_neutral_cw5n1h2txyewy</span><br><span class="line">Microsoft.VP9VideoExtensions                 Microsoft.VP9VideoExtensions_1.0.41182.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.WindowsMaps                        Microsoft.WindowsMaps_10.2104.2.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.SkypeApp                           Microsoft.SkypeApp_15.72.94.0_x86__kzf8qxf38zg5c</span><br><span class="line">Microsoft.StorePurchaseApp                   Microsoft.StorePurchaseApp_12105.5555.19.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.GetHelp                            Microsoft.GetHelp_10.2105.41472.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.XboxGamingOverlay                  Microsoft.XboxGamingOverlay_5.721.5282.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.YourPhone                          Microsoft.YourPhone_1.21042.143.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.ZuneVideo                          Microsoft.ZuneVideo_10.21061.10121.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.ZuneMusic                          Microsoft.ZuneMusic_10.21061.10121.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.MicrosoftStickyNotes               Microsoft.MicrosoftStickyNotes_4.1.6.0_x64__8wekyb3d8bbwe                  Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.30035.0_x64__8wekyb3d8bbwe                    Microsoft.XboxApp                            Microsoft.XboxApp_48.78.15001.0_x64__8wekyb3d8bbwe                         Microsoft.MixedReality.Portal                Microsoft.MixedReality.Portal_2000.21051.1282.0_x64__8wekyb3d8bbwe         Microsoft.People                             Microsoft.People_10.2105.4.0_x64__8wekyb3d8bbwe                            Microsoft.MicrosoftOfficeHub                 Microsoft.MicrosoftOfficeHub_18.2106.12410.0_x64__8wekyb3d8bbwe            Microsoft.WindowsTerminal                    Microsoft.WindowsTerminal_1.9.1942.0_x64__8wekyb3d8bbwe                    AppUp.IntelGraphicsExperience                AppUp.IntelGraphicsExperience_1.100.3370.0_x64__8j3eq9eme6ctt              Microsoft.Getstarted                         Microsoft.Getstarted_10.4.41811.0_x64__8wekyb3d8bbwe                       Microsoft.Windows.Photos                     Microsoft.Windows.Photos_2021.21070.22007.0_x64__8wekyb3d8bbwe             Microsoft.MicrosoftSolitaireCollection       Microsoft.MicrosoftSolitaireCollection_4.10.7290.0_x64__8wekyb3d8bbwe      Microsoft.LanguageExperiencePackzh-CN        Microsoft.LanguageExperiencePackzh-CN_18362.41.126.0_neutral__8wekyb3d8... microsoft.windowscommunicationsapps          microsoft.windowscommunicationsapps_16005.14326.20090.0_x64__8wekyb3d8bbwe Microsoft.WindowsFeedbackHub                 Microsoft.WindowsFeedbackHub_1.2106.1801.0_x64__8wekyb3d8bbwe              Microsoft.UI.Xaml.2.7                        Microsoft.UI.Xaml.2.7_7.2109.13004.0_x86__8wekyb3d8bbwe                    Microsoft.UI.Xaml.2.7                        Microsoft.UI.Xaml.2.7_7.2109.13004.0_x64__8wekyb3d8bbwe                    Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.30704.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00                      Microsoft.VCLibs.140.00_14.0.30704.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.30704.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.VCLibs.140.00.UWPDesktop           Microsoft.VCLibs.140.00.UWPDesktop_14.0.30704.0_x64__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.6                        Microsoft.UI.Xaml.2.6_2.62112.3002.0_x86__8wekyb3d8bbwe</span><br><span class="line">Microsoft.UI.Xaml.2.6                        Microsoft.UI.Xaml.2.6_2.62112.3002.0_x64__8wekyb3d8bbwe</span><br></pre></td></tr></table></figure><p>搜索 <code>Store</code> 可以找到 <code>Microsoft.WindowsStore                       Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe</code> 这一项，具体包名根据不同电脑搜索结果而定。</p><p>然后运行安装命令就可以了，注意把其中的 <code>Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe</code>内容替换成自己搜索出的结果，<code>Add-appxpackage...</code> 命令运行完之后Windows商店就出现了。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? <span class="comment"># Albert at HOME-PC in C:\Windows\system32 [20:00:00]</span></span><br><span class="line">$ Add-appxpackage -register <span class="string">"C:\Program Files\WindowsApps\Microsoft.WindowsStore_12104.1001.1.0_x64__8wekyb3d8bbwe\appxmanifest.xml"</span> -disabledevelopmentmode</span><br></pre></td></tr></table></figure><h1 id="QuickLook"><a href="#QuickLook" class="headerlink" title="QuickLook"></a>QuickLook</h1><p>双击打开Windows商店，搜索<code>QuickLook</code>直接安装就可以，一个很不错的小工具，这是来自商店的介绍</p><p><img src="https://img-blog.csdnimg.cn/88389c17ed8040359295208f8e811749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="QuickLook"><br><a href="https://pooi.moe/QuickLook/" target="_blank" rel="noopener">官网传送门</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>Win+x</code> 快速打开管理菜单，<code>Win+i</code>快速打开设置界面</li><li>PowerShell中运行 <code>Get-AppxPackage -allusers | Select Name, PackageFullName</code> 列举可安装的软件包</li><li><code>Add-appxpackage -register &quot;C:\Program Files\WindowsApps\****\appxmanifest.xml&quot; -disabledevelopmentmode</code> 安装指定软件<em>**</em></li><li>QuickLook快速预览小程序，值得一试</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122263789" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>元宇宙，一个人人都想分一杯羹的概念，理想很美好，但是现实往往很残酷，当一个人很上头的时候，任何语言都会显得苍白无力，不要只是头脑发热的一直去想，看看别人都是怎么做的，有多少人已经退了出来？人类往往很诚实，但是这不表现在言语上~</p><p>2022-1-9 23:24:47</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;话说Windows商店一直没有什么存在感，普通大众从互联网野蛮生长开始就一直被各大流氓软件控制着连接互联网的门户，下载软件去官网只是少数人拿来伸张正义的说辞，有些官网的访问速度确实…不过随着手机的普及，应用商店的下载安装方式逐渐被人们所接受，而Windows商店也渐渐进入了人们的视野，毕竟又这么个官方的东西，总比满大街搜索捆绑的软件要方便的多。&lt;/p&gt;
    
    </summary>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/categories/windows/"/>
    
    
      <category term="Win10" scheme="http://AlbertGithubHome.github.io/blog/tags/Win10/"/>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/tags/windows/"/>
    
      <category term="商店" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%95%86%E5%BA%97/"/>
    
      <category term="软件" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="QuickLook" scheme="http://AlbertGithubHome.github.io/blog/tags/QuickLook/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结——脚踏实地，为下一次腾飞积蓄力量</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/01/09/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%E2%80%94%E2%80%94%E8%84%9A%E8%B8%8F%E5%AE%9E%E5%9C%B0%EF%BC%8C%E4%B8%BA%E4%B8%8B%E4%B8%80%E6%AC%A1%E8%85%BE%E9%A3%9E%E7%A7%AF%E8%93%84%E5%8A%9B%E9%87%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/01/09/2021年终总结——脚踏实地，为下一次腾飞积蓄力量/</id>
    <published>2022-01-09T14:19:12.000Z</published>
    <updated>2022-01-09T14:20:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一种幸福叫照片上的人都还在~</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又到了一年一度的交卷时刻，去年的flag可以改个年份继续提上日程了。2021年，平平淡淡的一年，平淡到蜗居在这个寸土寸金的帝都，都没回过几次家。不过平淡并非不好，这份平淡恰恰是一种幸福，感恩我们所在的这个和平的国度，感恩所有为了这份和平付出努力的人们。</p><a id="more"></a><p>人是会慢慢成长的，很多曾经不懂的事情一瞬间全都明白了，有些事情已经晚了，可是还有很多事情可以补救，人生就是不断拿一些东西去换另一些东西的旅程，这种交换无时无刻不在进行着，随着时间这个魔法师渐渐推移，我们突然想换回来了，才发现做了半生的无用功。</p><blockquote><p>太年轻的人 他总是不满足<br>固执地不愿停下 远行的脚步<br>望着高高的天走了长长的路<br>忘了回头看 她有没有哭</p></blockquote><p>生活还要继续，把握当下才能赢得未来，踏踏实实迈出每一步，不需要鲜花和掌声，其实踩出的每一个脚印都是实实在在的生活。</p><h1 id="回顾2021"><a href="#回顾2021" class="headerlink" title="回顾2021"></a>回顾2021</h1><p>既然是年终总结，总要回忆一下去年过的怎么样，最简单的还是来看看去年flag的大脸盛况，拿出我的八股文框架，开整~</p><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><blockquote><p>FLAG</p><ul><li>脚踏实地做好本职工作</li><li>额外挤出时间去尝试技术提升（优化、解决痛点）</li><li>在熟悉业务的同时更多参与设计的工作，拓宽自己的认知范围</li></ul><p>完成度：85%</p></blockquote><p>一直觉得“靠谱”这个词对程序员来说是一个很高的评价，而我也在向这个方向默默努力着，事事有反馈是一个人的态度，同时也是一种良好的品质，在过去的一年中没有出大问题，也没有出彩，总体上算是中规中矩，也实现了自己“脚踏实地做好本职工作”的目标。</p><p>在技术提升方面，也在进一步努力，优化和解决痛点的工作一直在做，但相比较来说有些欠缺，技术提升和补充这方面主要体现在两部分，一部分来源于日常工作，需求推动进步，为了实现需求而提升自己，虽然进步不大，但贵在学以致用。</p><p>另一部分来源于面试，今年发生了角色的转换，我从一个求职者变成了面试官，这是一个可以锻炼自己的宝贵的机会，阅人然后识己，通过准备面试，翻看笔试题，同时观察候选人的表现，来发掘出自己需要提升的部分，循序渐进，总结提升，比如<a href="https://blog.csdn.net/albertsh/article/details/121219321" target="_blank" rel="noopener">《树的带权路径长度和哈夫曼树》</a>、<a href="https://blog.csdn.net/albertsh/article/details/121368339" target="_blank" rel="noopener">《完全图与强连通图的那些坑》</a> 都是在面试之后总结得来的。</p><p>至于更多的参与设计工作，今年也做了不少努力，得益于项目组的调整以及和老大的热心支持，今年抽出了一些时间来做偏向底层的设计工作，将自己的想法融入项目之中，静等花开。</p><h2 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h2><blockquote><p>FLAG</p><ul><li>博客总结继续，基本保持在1周一篇，可以适当偷懒，一年懒10次可以产出40篇</li><li>开源代码还是要继续学习，libevent需要详细看一下，今年的出镜率太高</li><li>读2本技术类书籍，可以是开阔眼界的，也可以是现有技能提升的</li><li>读2本经济学、金融理财相关的书籍</li></ul><p>完成度：70%</p></blockquote><p>关于博客总结这个flag真的是把偷懒发挥到了极致，到年底正好产出40篇总结，内容比较分散，基本上都是日常工作学习中遇到的问题，弄明白之后总结到一起，方便后续翻看查找。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2020/csdn.png" alt="csdn2020"><br><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/csdn.png" alt="csdn2021"></p><p>开源代码看的相对较少，这部分还需继续努力，libevent因为懒没有看进去，只在年初看了几个数据结构，不靠问题驱动着看代码还是挺难的，特别是这种代码量比较多的库，所以后面转变思路，从一些代码量少的小工具入手，比如这个神奇的<a href="http://mirrors.ustc.edu.cn/gnu/grep/" target="_blank" rel="noopener">grep命令</a></p><p>读书方面，并没有完整看完两本技术书籍，但是其他类型的书籍确实看了不少，如果加上各种故事书都堆成小山了：</p><ul><li>小狗钱钱</li><li>富爸爸穷爸爸</li><li>半小时漫画中国史</li><li>半小时漫画中国史2</li><li>半小时漫画中国史3</li><li>半小时漫画中国史4</li><li>半小时漫画中国史5</li><li>半小时漫画世界史</li><li>硬笔行书字帖 ——《樂墨書院》</li><li>不吼不叫培养好孩子</li><li>领导力的本质 ——向松下幸之助和稻盛和夫学习<ul><li>素直之心，以人为本，换位思考，尊重人性，经营哲学</li></ul></li><li>深度思考——不断逼近问题的本质</li><li>一本书读懂财报<ul><li>每一个企业都有它所处行业的烙印</li></ul></li><li>闭环思维——让靠谱成为习惯<ul><li>我会为你的过程鼓掌，但我只会给你的结果买单</li></ul></li><li>底层逻辑——半秒钟看透问题本质<ul><li>一切以结果为导向，没有功劳，苦劳也是无用的</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/book1.jpg" alt="book1"></p><p>刷题方面，今天有点虎头蛇尾了，前几个月还在努力紧跟大佬的脚步，后几个月因为工作、生活中的各种事情吧，刷题速度直线下降，人的精力是有限的，作为一个已经步入社会的人，像学生一样每天拿出大把时间来高强度刷题是不现实的，只能自己来平衡时间了，一段时间刷几道，避免太手生就好了。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/leetcode.png" alt="leetcode"></p><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><blockquote><p>FLAG</p><ul><li>陪娃娃，陪家人，工作内容适应后可以多拿出一点时间和家人在一起（需要比2020多一些）</li><li>投资理财还是要多花一点时间研究下，目标7%（靠工资是不可能财富自由的，必须开源才行）</li><li>注重身体的保养，身体是本钱，可不能把身体搞垮了，愿丢掉体检时的小毛病~</li></ul><p>完成度：65%</p></blockquote><p>陪伴是最长情的告白，今年调整了工作学习方式，尽可能把工作学习时间放到工作日，然后周末节假日就是一心一意陪家人。工作日疯狂输出，周末节假日休养生息，这种方式也不错。</p><p>利用放假时间和小娃娃一起玩耍，比如买几盆多肉，一起体会栽种花草的乐趣，一起做丢手绢、木头人的游戏，宝宝欢喜的不得了，只要有人陪着疯，什么电视、手机都抛到脑后，所以当自家娃娃沉迷于某些东西不能自拔时，需要反思一下自己有没有认真的陪过她。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/home.jpg" alt="home"></p><p>我抱起砖头就没法抱你，放下砖头就没法养你，在这样高速发展的社会，社会分工相当明确，再想守着自己家的一亩三分地来自给自足是不可能了，我们都想争做人上人，但是吃的苦中苦只有自己清楚。</p><p>谈到投资理财，我人没了，之前作为小韭菜在股市摸爬滚打、追涨杀跌赚了一些银子，今年转变思路，拥抱大白马，等待低估值修复，结果成了一个被人割的老韭菜，不过暂时不打算调仓，重仓银地保、中丐互怜，投资是反人性的，只要握紧头寸不撒手，你就别想割到我。</p><p>人的情绪是波动的，想想一个没有任何消息的公司股价为什么会起起伏伏，是因为每个人对后市的股价走向做了预测，然后根据预测进行买入卖出操作，这种短期预测毫无意义，但是价格在价值周围波动这是市场规律，顺大势，勿逆行。</p><p>今年的股票成绩略微惨淡，其实和去年也差不多，坐了几波小板车，加上ETF和基金，浮亏一点点，在今天价值投资被埋在谷底的年头，也还可以吧，继续出清垃圾股。</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/stock.jpg" alt="stock"></p><h1 id="展望2022"><a href="#展望2022" class="headerlink" title="展望2022"></a>展望2022</h1><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>继续踏实做好本职工作，做好工作内容的总结，落实到纸上</li><li>学习和了解常见中间件的使用，更多的参与设计的工作</li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>博客总结不能落，继续保持一周一更，完成40篇基础目标</li><li>刷题不用太频繁，每周总得有贡献，不可抗拒因素除外</li><li>建立自己的技能树，搭配工作总结，统计出自己到底会什么</li><li>选取经典开源代码学习，代码量要少一点，毕竟精力有限了</li><li>读书、读书、读书，书都买好了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/book2.jpg" alt="book2"></p><h2 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h2><ul><li>基金和ETF继续定投，适当配置债券固收</li><li>股票池里把曾经“瞎选”的股票逐渐出清，依旧拥抱大白马，少折腾</li><li>目标收益不太高，8个点，希望不要打脸</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>疫情结束了多回几次老家吧，去看看那些想我又不愿说出口的亲人</li><li>注重身体的保养，锻炼提上日程，降低亮红灯的指标</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>身体有些吃不消了，适当缩减睁着眼睛的时间吧</li><li>工作学习分不开，所以两者会共同产出一颗技能树，为后续选择提供腾飞的力量</li><li>我觉得是时候把投资这项单独拿出来了，靠搬砖是不能实现自由梦的，需要学会借力搬砖</li><li>噢，忘了一点，去年出现在年终总结中的那颗茉莉花挂了，我补两张今年养的多肉吧，希望他能抗住今年的flag~</li></ul><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/flower1.jpg" alt="flower1"><br><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/summary/2021/flower2.jpg" alt="flower2"></p><h1 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h1><hr><blockquote><p><em>每个人都有自己梦想，而我的梦很简单，那里有一个大大的书房，中间摆一个简单的书桌，一把带轮子的小椅，后面是占满整面墙的书柜，书柜上摆放着我喜欢的技术、财经、历史方面的书籍。书桌上斜放着两台电脑，看书累了就写写自己喜欢的代码，我并不喜欢庞大的程序，更热衷于一些实用的小工具，比如像grep这种锋利的小匕首。偶尔小宝宝会跑进来要我陪她玩，我会给它讲讲正在写哪些有趣的东西，玩一玩自己开发的游戏，是的，她很喜欢，一个简单的小球都玩得不亦乐乎~</em></p><p><em>当然了大大的玻璃窗前必须摆满喜欢的花草，他们尽情的吮吸窗外的阳光，同时为书屋提供了生命的颜色，花架旁边是喷壶和铲子，虽然看起来不像是书房里的东西，但是我想把它们摆在那里，这里仿佛是另一番天地。</em></p></blockquote><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122163518" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>空有悲天悯人之心，却无普度众生之力，不愿最后伸出那无助的手，要在可以选择时努力做一个施粥人。</p><p>2021-12-31 23:43:27</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有一种幸福叫照片上的人都还在~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;又到了一年一度的交卷时刻，去年的flag可以改个年份继续提上日程了。2021年，平平淡淡的一年，平淡到蜗居在这个寸土寸金的帝都，都没回过几次家。不过平淡并非不好，这份平淡恰恰是一种幸福，感恩我们所在的这个和平的国度，感恩所有为了这份和平付出努力的人们。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://AlbertGithubHome.github.io/blog/categories/Thinking/"/>
    
    
      <category term="总结" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="工作" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="学习" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Windows设置防火墙允许指定应用正常使用网络</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/26/Windows%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%85%81%E8%AE%B8%E6%8C%87%E5%AE%9A%E5%BA%94%E7%94%A8%E6%AD%A3%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/26/Windows设置防火墙允许指定应用正常使用网络/</id>
    <published>2021-12-26T09:58:52.000Z</published>
    <updated>2021-12-29T08:17:30.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很长一段时间以来，防火墙这个神奇的“玩意”在我的电脑上基本属于名存死亡，因为做网络软件开发的缘故，经常需要别人连接我的电脑来进行测试，打开Windows的防火墙常常出现网络无法联通的情况，所以在我的电脑上防火墙基本处于关闭状态，就像下面这样：</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/1.png" alt="1"></p><p>但这确实不是一个好的习惯，最近学习了一些网络安全相关的课程，发现打开防火墙还是很有必要的，它可以避免我们遭受一些攻击，最起码可以降低受到攻击的概率，所以我还是决定打开防火墙，同时设置防火墙对自己的开发的应用放行，也就是把应用放到防火墙白名单里，这样就既安全又方便了。</p><h1 id="什么是Windows防火墙"><a href="#什么是Windows防火墙" class="headerlink" title="什么是Windows防火墙"></a>什么是Windows防火墙</h1><blockquote><p>防火墙是一项协助确保信息安全的设备，会依照特定的规则，允许或限制传输的数据通过。防火墙可以是一台专属的硬件也可以是架设在一般硬件上的一套软件。总而言之，防火墙就是帮助计算机网络于其内、外网之间构建一道相对隔绝的保护屏障。</p></blockquote><p>这段文字来自于百科，翻译的直白一点就是说：你的电脑就相当于一个城池，然后网络上的病毒、木马等恶意程序就相当于敌对势力派来的间谍，想混进城去，而防火墙就相当于城门口设置的关卡哨兵用来盘查筛选，放合适的人进城，同时放合法的人出去，既要满足城内人与外界的交流，又要防止恶意的坏人蒙混过关。</p><h1 id="设置允许通过防火墙的应用"><a href="#设置允许通过防火墙的应用" class="headerlink" title="设置允许通过防火墙的应用"></a>设置允许通过防火墙的应用</h1><p>要想设置指定应用允许通过防火墙，需要先打开防火墙功能再设置才会生效，下面以Windows10为例操作一次。</p><ol><li>打开<code>控制面板</code></li></ol><p>按键盘上的 <code>Win</code> 键，然后输入控制面板，在筛选结果中点击“控制面板”选项：</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/2.png" alt="2"></p><ol><li>点击<code>系统和安全</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/3.png" alt="3"></p><ol><li>点击<code>Windows Defender防火墙</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/4.png" alt="4"></p><blockquote><p>其实前面这三步可以简化为，按<code>Win+R</code>快捷键，输入<code>firewall.cpl</code>回车即可</p></blockquote><ol><li>点击<code>启用或关闭Windows Defender防火墙</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/5.png" alt="5"></p><ol><li>勾选<code>启用 Windows Defender 防火墙</code> 选项，点击确定按钮</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/6.png" alt="6"></p><ol><li>点击<code>允许应用或功能通过 Windows Defender 防火墙</code>选项</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/7.png" alt="7"></p><ol><li>找到目标应用，把后面两个选项勾选上，然后点击确定即可</li></ol><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/firewall/8.png" alt="8"></p><p>这里以 <code>WeChat</code> 为例，在<code>专用</code> 和 <code>公用</code>两个复选框上打钩，然后单击下面的确定按钮就可以了，如果列表中没有想要添加白名单的应用，还可以点击确定按钮上面的 <code>允许其他应用(R)</code>按钮来自己添加。</p><h1 id="防火墙中的专用和公用"><a href="#防火墙中的专用和公用" class="headerlink" title="防火墙中的专用和公用"></a>防火墙中的专用和公用</h1><p>防火墙中的<code>专用</code> 和 <code>公用</code>是针对网络而言的，Windows中给出的说明：专用网络，例如家庭或工作网络；公用网络，比如机场和咖啡店中的网络。那么是不是当我在家里连网时就是专用网络，而在咖啡厅连接网络时就自动识别为公用网络呢？</p><p>Windows当然没有这么智能，连接新的网络时属于什么类型的网络需要你自己选择，也就是说你自己要做出判断，如果是自己家的网络，基本是上独享的安全的，那就可以设置为专用网络，如果是连接的公共Wifi那必须要选择公用网络。</p><p>而防火墙中对专用网络和公用网络有不同的设置，这个比较好理解，还是以前面城池和哨兵的比喻为例，防火墙作为哨兵在不同的环境下有不同的标准，比如在和平时期，对非常可疑的人才禁止入城，而在战时，除了必要的粮草供应，其他的普通商人可能都不允许入内了。</p><p>所以当一个应用无法联网时，需要检查一下应用设置白名单中是在哪个网络环境下，如果是可以信赖的应用，通常在专用网络和公用网络都会设置允许通过防火墙。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>快捷键 <code>Win+R</code> 输入 <code>firewall.cpl</code> 后回车，可以快速打开防火墙设置</li><li>Windows中的专用网络和公用网络需要自己在连接网络时设置，系统本身没有准确分辨的能力</li><li>防火墙中对专用网络和公用网络有不同的设置，相当于在不同的网络环境下设置了不同的安全级别</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/122032810" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>默默的付出是否值得？一查问题就消耗几个小时，修复个BUG前前后后花了几天，有时会假设站在高处，望着此时的自己，这样做是否值得？成年人的世界往往只看性价比，如果说花了几天时间却一无所获，那之前的付出确实不值得，也就是做了一件性价比很低的事情。但是这个结果是做完才知道的，在做之前并不能准确判断是否值得，无法进行“挑选”，也不应该抱着我不做总有人会做的态度，既然做就全力以赴，若无果也仅仅是我们“赌”输了而已。但要记住，现实的世界只记得功劳，没有结论、没有反馈、毫无借鉴意义的苦劳一文不值~</p><p>2021-12-26 23:54:19</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;很长一段时间以来，防火墙这个神奇的“玩意”在我的电脑上基本属于名存死亡，因为做网络软件开发的缘故，经常需要别人连接我的电脑来进行测试，打开Windows的防火墙常常出现网络无法联通的情况，所以在我的电脑上防火墙基本处于关闭状态，就像下面这样：&lt;/p&gt;
    
    </summary>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/categories/windows/"/>
    
    
      <category term="Win10" scheme="http://AlbertGithubHome.github.io/blog/tags/Win10/"/>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/tags/windows/"/>
    
      <category term="防火墙" scheme="http://AlbertGithubHome.github.io/blog/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
      <category term="firewall" scheme="http://AlbertGithubHome.github.io/blog/tags/firewall/"/>
    
      <category term="白名单" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>git常用配置——git show/diff tab 显示宽度</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/19/git%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E2%80%94%E2%80%94git-show-diff-tab-%E6%98%BE%E7%A4%BA%E5%AE%BD%E5%BA%A6/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/19/git常用配置——git-show-diff-tab-显示宽度/</id>
    <published>2021-12-19T15:44:39.000Z</published>
    <updated>2021-12-19T16:13:49.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>平时在代码开发过程中使用编辑器时一般会使用空格来代替Tab符，而Tab的宽度通常设置为4个空格的宽度。在使用<code>git diff</code> 命令时发现有些老代码的格式混乱，原因就是使用了8个字符宽度的Tab显示格式，经过一番查找发现可以修改 <code>core.pager</code> 来进行调整，特此记录方便日后查找。</p><a id="more"></a><h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><ul><li>设置Tab显示为4个字符的宽度</li></ul><p><code>git config --global core.pager &#39;less -x1,5&#39;</code></p><ul><li>设置Tab显示为8个字符的宽度（默认）</li></ul><p><code>git config --global core.pager &#39;less&#39;</code></p><ul><li>设置用户名</li></ul><p><code>git config --global user.name &quot;albert&quot;</code></p><ul><li>设置邮箱</li></ul><p><code>git config --global user.email &quot;albert52190@gmail.com&quot;</code></p><ul><li>设置别名</li></ul><p><code>git config --global alias.st status</code></p><ul><li>配置自动更新子模块的命令</li></ul><p><code>git config --global alias.pullall &#39;!f(){ git pull &quot;$@&quot; &amp;&amp; git submodule update --init --recursive; }; f&#39;</code></p><ul><li>设置自动处理换行符</li></ul><p><code>git config --global core.autocrlf true</code></p><blockquote><p>true 在提交时将CRLF转换为LF，当签出代码时，LF会被转换成CRLF<br>input 在提交是将CRLF转换为LF，签出时不转换<br>false 不进行转换</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>git config --global core.pager &#39;less -x1,5&#39;</code> 可将 <code>git show/diff</code> 命令的tab按照4字符宽度显示</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121896012" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>时间不多了，还有很多事情没有做呢，虽说欲速则不达，但是有些事如果还不做可能就真的没机会了<br>《一荤一素》</p><p>2021-12-20 00:09:54</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;平时在代码开发过程中使用编辑器时一般会使用空格来代替Tab符，而Tab的宽度通常设置为4个空格的宽度。在使用&lt;code&gt;git diff&lt;/code&gt; 命令时发现有些老代码的格式混乱，原因就是使用了8个字符宽度的Tab显示格式，经过一番查找发现可以修改 &lt;code&gt;core.pager&lt;/code&gt; 来进行调整，特此记录方便日后查找。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/categories/Git/"/>
    
    
      <category term="版本控制" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/tags/Git/"/>
    
      <category term="config" scheme="http://AlbertGithubHome.github.io/blog/tags/config/"/>
    
      <category term="pager" scheme="http://AlbertGithubHome.github.io/blog/tags/pager/"/>
    
  </entry>
  
  <entry>
    <title>网络工具nc的常见使用功能方法</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/12/%E7%BD%91%E7%BB%9C%E5%B7%A5%E5%85%B7nc%E7%9A%84%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%8A%9F%E8%83%BD%E6%96%B9%E6%B3%95/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/12/网络工具nc的常见使用功能方法/</id>
    <published>2021-12-12T12:36:16.000Z</published>
    <updated>2021-12-12T14:30:22.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>nc</code> 是一个Linux环境下常用的工具命令，可以用来帮助开发者查询和解决网路问题，通常被认为是 <code>NetCat</code> 工具的缩写，在网络工具中有“瑞士军刀”的美誉。</p><a id="more"></a><p><code>nc</code> 在Linux环境下常常是自带的，如果你使用的Linux发行版本没有这个工具也可以自行安装，比如在CentOS上的安装命令就是 <code>yum install nc -y</code>，并且这个工具在Windows上也可以直接下载使用，下载页面地址为 <a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="noopener">netcat</a>，简约而不简单。</p><h1 id="nc-netcat-ncat"><a href="#nc-netcat-ncat" class="headerlink" title="nc netcat ncat"></a>nc netcat ncat</h1><p>这三个名字常常出现在一起，也常常混用，可以简单的认为它们都一样，但是如果要追究细节它们还是有些差异的。原始netcat（也就是nc），在2007年发布1.10稳定版本之后，就不再更新了，原作者是Hobbit。而ncat是nmap项目的作者Fyodor，在原始nc之上进行二次开发的另一款强大工具。另外socat、cryptcat等也属于是原始nc的升级，而原始nc在windows上有时会被杀毒软件查杀，这时可以考虑使用ncat、socat。</p><p>关于nc的不同，可以看下我本地的查看情况，第一条是在Ubuntu中的man手册说明，第二条是在CentOS中的man手册说明：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">NC(1)                               BSD General Commands Manual                      NC(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">     nc — arbitrary TCP and UDP connections and listens</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">     nc [-46bCDdhklnrStUuvZz] [-I length] [-i interval] [-O length] [-P proxy_username] [-p source_port] [-q seconds] [-s <span class="built_in">source</span>] [-T toskeyword] [-V rtable] [-w timeout] [-X proxy_protocol] [-x</span><br><span class="line">        proxy_address[:port]] [destination] [port]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">     The nc (or netcat) utility is used <span class="keyword">for</span> just about anything under the sun involving TCP, UDP, or UNIX-domain sockets.  It can open TCP connections, send UDP packets, listen on arbitrary TCP and UDP</span><br><span class="line">     ports, <span class="keyword">do</span> port scanning, and deal with both IPv4 and IPv6.  Unlike telnet(1), nc scripts nicely, and separates error messages onto standard error instead of sending them to standard output, as</span><br><span class="line">     telnet(1) does with some</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">NCAT(1)                         Ncat Reference Guide                       NCAT(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ncat - Concatenate and redirect sockets</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ncat [OPTIONS...] [hostname] [port]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">       Ncat is a feature-packed networking utility <span class="built_in">which</span> reads and writes data across networks from the <span class="built_in">command</span> line. Ncat was written <span class="keyword">for</span> the Nmap Project and is the culmination of the</span><br><span class="line">       currently splintered family of Netcat incarnations. It is designed to be a reliable back-end tool to instantly provide network connectivity to other applications and users. Ncat</span><br><span class="line">       will not only work with IPv4 and IPv6 but provides the user with a virtually limitless number of potential uses.</span><br></pre></td></tr></table></figure><p>ncat 是 nmap 套件的一部分，关于nmap的介绍可以参考下来自百科的以下引用内容：</p><blockquote><p>nmap是linux最早的网络扫描工具和嗅探工具包，它可以用来扫描网络上电脑开放的网络连接端，确定哪些服务运行在那些连接端，并且推断出计算机运行的是哪个操作系统（这是亦称 fingerprinting）。它是网络管理员必用的软件之一，用以评估网络系统安全。</p><p>正如大多数被用于网络安全的工具，nmap 也是不少黑客及骇客爱用的工具 。系统管理员可以利用nmap来探测工作环境中未经批准使用的服务器，但是黑客会利用nmap来搜集目标电脑的网络设定，从而计划攻击的方法。</p></blockquote><h1 id="nc的用法"><a href="#nc的用法" class="headerlink" title="nc的用法"></a>nc的用法</h1><p>nc是一个强大的网络工具，下面列举几个常见的用法。</p><h2 id="测试udp端口是否可用"><a href="#测试udp端口是否可用" class="headerlink" title="测试udp端口是否可用"></a>测试udp端口是否可用</h2><p>如果是测试某个IP地址地址是否可以访问，通常会使用 <code>ping</code> 命令，执行之后如果可以到达就会得到数据反馈：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ ping 82.156.125.169</span><br><span class="line">PING 82.156.125.169 (82.156.125.169) 56(84) bytes of data.</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=1 ttl=54 time=17.8 ms</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=2 ttl=54 time=39.9 ms</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=3 ttl=54 time=12.9 ms</span><br><span class="line">64 bytes from 82.156.125.169: icmp_seq=4 ttl=54 time=6.81 ms</span><br><span class="line">^C</span><br><span class="line">--- 82.156.125.169 ping statistics ---</span><br><span class="line">4 packets transmitted, 4 received, 0% packet loss, time 3008ms</span><br><span class="line">rtt min/avg/max/mdev = 6.816/19.397/39.961/12.502 ms</span><br></pre></td></tr></table></figure><p>想要测试一个tcp端口是否可以访问，映入脑海的第一个命令应该是telnet，直接在IP后面加空格和端口就可以了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ telnet 82.156.125.169 22</span><br><span class="line">Trying 82.156.125.169...</span><br><span class="line">Connected to 82.156.125.169.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">SSH-2.0-OpenSSH_7.4</span><br></pre></td></tr></table></figure><p>如果想测试UDP端口是否可达使用telnet就不行了，因为它是一种基于TCP的应用层协议，用来测试UDP端口会因为长时间没有反应而超时：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ telnet 82.156.125.169 666</span><br><span class="line">Trying 82.156.125.169...</span><br><span class="line">telnet: Unable to connect to remote host: Connection refused</span><br></pre></td></tr></table></figure><p>这时用 <code>nc</code> 命令就可以解决了，命令格式为 <code>nc -nvuz ip port</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ nc -nvuz 82.156.125.169 666</span><br><span class="line">Connection to 82.156.125.169 666 port [udp/*] succeeded!</span><br></pre></td></tr></table></figure><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>这实际实际上是对上一个应用的扩展，使用 <code>nc</code> 命令可以指定一个端口范围，用来扫描多个端口是否可用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ nc -nvz 82.156.125.169 20-24</span><br><span class="line">nc: connect to 82.156.125.169 port 20 (tcp) failed: Connection refused</span><br><span class="line">nc: connect to 82.156.125.169 port 21 (tcp) failed: Connection refused</span><br><span class="line">Connection to 82.156.125.169 22 port [tcp/*] succeeded!</span><br><span class="line">nc: connect to 82.156.125.169 port 23 (tcp) failed: Connection refused</span><br><span class="line">nc: connect to 82.156.125.169 port 24 (tcp) failed: Connection refused</span><br></pre></td></tr></table></figure><h2 id="一对一聊天"><a href="#一对一聊天" class="headerlink" title="一对一聊天"></a>一对一聊天</h2><p>使用 <code>nc</code> 命令可以监听一个端口作为服务器，然后在另一台机器上启动 <code>nc</code> 作为客户端发数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动服务器</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># nc -l 1314</span></span><br><span class="line"><span class="comment"># 以下为接收到客户端发来的数据</span></span><br><span class="line">12</span><br><span class="line">client send msg</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动客户端</span></span><br><span class="line">albert@home-pc:~$ nc 82.156.125.169 1314</span><br><span class="line"><span class="comment"># 以下为输入的数据</span></span><br><span class="line">12</span><br><span class="line">client send msg</span><br></pre></td></tr></table></figure><h2 id="传输文件"><a href="#传输文件" class="headerlink" title="传输文件"></a>传输文件</h2><p>这个用法是对上一种用法的扩展，通过重定向将文件内容通过网络传输：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端将socket内容保存到w文件中</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># nc -l 1314 &gt; w.txt</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:~$ cat w.txt</span><br><span class="line">w</span><br><span class="line">-</span><br><span class="line">r</span><br><span class="line">x</span><br><span class="line">d</span><br><span class="line"><span class="comment"># 客户端将w.txt文件内容发送给服务器</span></span><br><span class="line">albert@home-pc:~$ nc 82.156.125.169 1314 &lt; w.txt</span><br><span class="line">albert@home-pc:~$</span><br></pre></td></tr></table></figure><p>客户端运行完 <code>nc</code> 命令之后就会退出，服务器端的 <code>nc</code> 命令也会结束，<code>w.txt</code> 文件的内容就传送过去了。</p><h2 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h2><p>这其实也是传输数据的命令的一个变种，使用 <code>-c</code> 参数可以完成数据转发：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># nc -l 520 -c "nc 82.156.125.169 1314"</span></span><br></pre></td></tr></table></figure><p>执行命令之后，发送到本机 520 端口的数据就会被转发到 IP 为82.156.125.169的1314端口上了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>nc -nvuz ip port</code> 可以检测指定IP的UDP端口能否访问，如果是TCP端口去掉 <code>-u</code> 选项就可以了</li><li><code>nc -l port</code> 可以启动一个本地服务器，接受发往指定端口的数据，并打印到控制台</li><li><code>nc -l port &gt; filename</code> 可以启动一个本地服务器，接受发往指定端口的数据，并保存到名为 <code>filename</code> 的文件中</li><li><code>nc -l port -c &quot;nc ip new_port&quot;</code> 可以启动一个本地服务器，接受发往指定端口的数据，并转发到ip:new_port的机器上</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121724688" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>人生每时每刻都在积攒素材，能否拼凑出高光的时刻，决定了某些事迹有无机会诉说。</p><p>2021-12-12 22:11:51</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;nc&lt;/code&gt; 是一个Linux环境下常用的工具命令，可以用来帮助开发者查询和解决网路问题，通常被认为是 &lt;code&gt;NetCat&lt;/code&gt; 工具的缩写，在网络工具中有“瑞士军刀”的美誉。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/categories/Network/"/>
    
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/tags/Network/"/>
    
      <category term="nc" scheme="http://AlbertGithubHome.github.io/blog/tags/nc/"/>
    
      <category term="NetCat" scheme="http://AlbertGithubHome.github.io/blog/tags/NetCat/"/>
    
      <category term="ncat" scheme="http://AlbertGithubHome.github.io/blog/tags/ncat/"/>
    
  </entry>
  
  <entry>
    <title>记一次使用Valgrind查找解决内存问题的玄幻旅程</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/12/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8Valgrind%E6%9F%A5%E6%89%BE%E8%A7%A3%E5%86%B3%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98%E7%9A%84%E7%8E%84%E5%B9%BB%E6%97%85%E7%A8%8B/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/12/02/记一次使用Valgrind查找解决内存问题的玄幻旅程/</id>
    <published>2021-12-02T15:42:47.000Z</published>
    <updated>2021-12-05T07:40:28.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>看题目来说这应该是一篇教程式文章，但为了突出“玄幻”二字，我们不讲细节只讲过程，在过程中体会解决问题的方式和方法，以及避免一些我在这个过程中绕的弯路，如果想找工具的详细使用方法可以去参考文章中翻一翻，有几篇文章写的真不错，下面我们开始扯淡啦。</p><a id="more"></a><h1 id="玄幻旅途"><a href="#玄幻旅途" class="headerlink" title="玄幻旅途"></a>玄幻旅途</h1><blockquote><p>本故事并非虚构，如有雷同，纯属命苦~</p></blockquote><h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><p>作为本文主人公的我——小Z，是一个后端C/C++搬运工（这不废话吗，不是C系列谁老倒腾指针和内存？），在一个阳（<del>yue</del>）光（<del>hei</del>）明（<del>feng</del>）媚（<del>gao</del>）的下（<del>wan</del>）午（<del>shang</del>）接到一个完善游戏战斗系统的需求，然后便开始了紧张开发、积极调试的每一天，事情比较顺利，一切都在计划之中，不过平凡的日子总是无趣，没有一点点意外总让人感到有点意外。</p><h2 id="初入泥潭"><a href="#初入泥潭" class="headerlink" title="初入泥潭"></a>初入泥潭</h2><p>好吧，到目前为止一切都很顺利，服务器各个功能模块分批完成，终于完成了最后拼装，启动调试看结果，出现了一点点逻辑问题，这个战斗过程根本停不下来，整个程序一直在递归，最终导致函数调用栈溢出崩溃。不过这都是小问题，简单梳理逻辑后增加必要的出口判断条件，问题很快被解决。</p><p>再次启动调试，程序正常运行，符合预期结果。啥？这就完了，幸福来的有点突然啊，整个流程基本符合需求，只是缺少一些细节逻辑需要补充，感觉胜利就在前方了啊！</p><h2 id="一片混沌"><a href="#一片混沌" class="headerlink" title="一片混沌"></a>一片混沌</h2><p>补充细节的过程中，也需要不断调试来验证结果，咦？怎么连不上服务器了？查看一下进程，果然服务器进程已经不在了，难道是我不小心关掉了，先记一下，解决掉手头上更重要的问题后再来看它。</p><p>上次的问题好几天都没有出现了，可能真的是我不小心把服务器进程关掉了，今天还有个小BUG需要修复一下，先搭建好调试环境准备定位一下问题。整个过程比较顺利，没过几分钟BUG就找到了，修复后调试看看结果，Duang！进程挂了，好在这次是在调试状态，能看到是哪里引发的崩溃，查看函数调用栈来看看是谁捣的鬼。</p><p>什么玩意，智能指针出作用域时自动析构挂了？这是什么鬼，从上到下看了一遍近百层的函数调用关系，感觉没什么问题啊，真是奇怪。</p><p>重新启动进程，开始了疯狂测试，跑了20几次相同的逻辑，没有任何问题啊，那刚刚发生了什么，转过头来继续看刚刚出现崩溃的位置，完全找不到问题。这个问题先放一放，继续补充细节，调试解决发现的BUG，在多次调试之后，Duang！进程又挂了，这次更离谱，在定义lambda表达式的时候崩了，看着函数调用栈依旧一头雾水，看不出是什么问题。</p><p>退出调试状态，重启进程，继续跑了10多次相同的逻辑，这次进程真的崩溃了，看来程序真的是有隐藏的BUG。再次重启，继续跑，这次又不崩溃了，这种状况让人有点头大啊。启动调试状态开始测试，跑了几次就崩溃了，原来和调试有关系呀！经过多次测试发现，如果在调试状态下测试几次就会出现崩溃的情况，如果在非调试状态下大概需要跑10多次才会崩。</p><p>为了查出问题便开始在调试状态下更加疯狂的测试，这次真的开了眼了，每次崩溃的位置都不太一样，有的在析构函数中，有的设置变量值时，有的在发送函数中，有的在申请内存时，总体来看基本都是围绕着内存出现的问题，但是问题原因未知。</p><h2 id="追根溯源"><a href="#追根溯源" class="headerlink" title="追根溯源"></a>追根溯源</h2><p>虽然经过大量测试仍不能准确给出问题原因，但是几十次的崩溃结果中还是能看到一些规律的，其中有50%左右出现在第二场战斗释放之前战斗对象的时候，40%出现在玩家重新登录释放之前战斗对象的时候，这两种情况加在一起就占了绝大多数，所以要从这里开始入手，查看释放战斗对象的函数是不是存在问题。</p><p>因为程序中很少直接使用简单的指针，基本都会用智能指针来代替，所以在战斗对象析构时会有很多小对象自动析构，花了不少时间来看这些代码，结果一无所获，这就怪了，那么多次崩溃都是在这，居然找不到任何问题。</p><h2 id="抽丝剥茧"><a href="#抽丝剥茧" class="headerlink" title="抽丝剥茧"></a>抽丝剥茧</h2><p>因为之前测试时需要完成跑完整个战斗流程，严重影响了测试效率，既然感觉释放战斗对象这部分代码有问题，那就单独跑这一段逻辑呗，单独建个分支，改代码！！！另外还发现一个事情，本来在我机器上需要在调试状态下跑好几次才能重现出的问题，在另一台发布机上两三次就能重现，干脆用它来验证结果。</p><p>说干就干，从原来的逻辑中，剥离出创建、释放战斗对象的代码，每次测试重复创建和释放过程几百次，这样就应该很容易就能重现问题了，修改完本地先测试，结果跑了十几次也没出现，部署到发布机上测试多次也没出现问题，和预想的完全不一样，实验失败，这个结果基本说明我的方向错误，并不是这段释放战斗对象的逻辑代码问题，又得重新寻找线索了。</p><h2 id="大海捞针"><a href="#大海捞针" class="headerlink" title="大海捞针"></a>大海捞针</h2><p>上面的验证虽说失败了，但也给我提了醒，既然释放战斗对象的逻辑代码没问题，但是绝大多数奔溃还发生在这里，那肯定是别人把它影响了，结合之前看到的内存问题，应该是有其他的逻辑写错了内存数据，导致释放战斗对象的内存时出现了问题。</p><p>这个崩溃在主分支是没有出现过的，在我开发完这个新需求之后才出现了这个问题，那么需要查新加了哪些代码，但是这个版本单单是新的文件就增加了几十个，要想从中找到一个内存问题犹如大海捞针一样。</p><h2 id="祭出法宝"><a href="#祭出法宝" class="headerlink" title="祭出法宝"></a>祭出法宝</h2><p>在大量代码中直接寻找内存问题，非寻常人所能企及，这时可以考虑借助第三方力量——比如检测工具，根据以往经验，我用的最多的内存检测工具是 <code>Valgrind</code> 和 <code>AddressSanitizer</code>，起初 <code>Valgrind</code> 用的比较多的，后来认识了 <code>AddressSanitizer</code> 之后发现使用 <code>Valgrind</code> 后程序运行太慢了，而使用 <code>AddressSanitizer</code> 虽然需要重新编译一次，但是基本不影响原有程序的运行速度，所以渐渐偏向了 <code>ASAN</code>。</p><p>但是，这次我先用了 <code>Valgrind</code>，还原代码，重新编译，调整参数后启动服务器程序，果然是半天没反应，测试多次之后居然没崩溃，查看了它的检测报告也没发现什么问题，决定换 <code>ASAN</code> 试试，因为每次用 <code>Valgrind</code> 启动和运行真的太慢了。</p><p>修改Makefile重新编译，使用 <code>AddressSanitizer</code> 来进行检测，这次更奇怪，添加了 <code>ASAN</code> 选项的程序编译后，貌似代码逻辑感觉到了它（ASAN）的存在，程序运行逻辑直接变了，原来能完整跑完的战斗逻辑，总是跑到一半因为条件不满足停下了，不过有几次跑到了最后，也出现了崩溃的情况，但是从检测报告中未查到问题的原因，仅仅找到一处内存泄漏问题，修改完崩溃问题依旧存在。</p><h2 id="屏蔽无关"><a href="#屏蔽无关" class="headerlink" title="屏蔽无关"></a>屏蔽无关</h2><p>既然上面的工具没能提供帮助，那么还得依靠我硬啃代码了，还是先来分析之前各种崩溃结果，发现每次析构对象前都给客户端发了消息，而这些消息使用了 <code>protobuf</code> 中 <code>oneof</code> 结构，这个结构之前没用过，会不会因为使用不当，把内存写坏了。</p><p>这次我没有直接去看代码的细节，而是采用了屏蔽的方式，将一些不影响战斗逻辑的消息数据精简，不断注释代码，不断发布测试，结果依旧崩溃，最后仅剩一处同步技能的协议，其中也用了 <code>oneof</code> 结构，这时我更加感觉它有问题，但是它不能被注释掉，需要通过它发消息给客户端，然后客户端请求放技能才能将战斗进行下去，测试暂时卡在这了。</p><h2 id="移形换位"><a href="#移形换位" class="headerlink" title="移形换位"></a>移形换位</h2><p>必须想一种办法把这仅剩的一条消息同步去掉，如果不给客户端的同步消息，客户端就不能通知服务器放技能，那只好服务器自己把这些事都做了，修改服务器代码，采用延迟触发的方法，来驱动整个战斗进程能进行下去，最终把仅剩的那一条消息屏蔽掉了，同时把所有的try-catch也屏蔽了。</p><p>打包部署发布服，启动测试，问题依旧存在，唉，我麻了！</p><h2 id="再请法宝"><a href="#再请法宝" class="headerlink" title="再请法宝"></a>再请法宝</h2><p>因为 <code>ASAN</code> 这个工具我一直在观察着输出的报告，并没有发现什么值得注意的问题，所以我打算换为 <code>Valgrind</code>，因为它们两个有点冲突，所以得把Makefile还原回去，重新编译再使用 <code>Valgrind</code> 来测试。</p><p>启动程序，依旧卡的像时间静止了一样，启动客户端开始了常规的疯狂测试，Duang！进程挂了，赶紧打开 <code>Valgrind</code> 的输出报告看看，亲人呐，我在里面找到了 <code>Invalid write</code> 的字样。</p><p>赶紧去查看这段报告对应的代码问题，其中包含了 <code>std::sort</code> 函数的使用，但是自定义的排序函数不满足严格弱排序规则，感觉这逻辑确实有问题，把它先注释掉来试一下。</p><h2 id="风平浪静"><a href="#风平浪静" class="headerlink" title="风平浪静"></a>风平浪静</h2><p>注释掉 <code>std::sort</code> 之后，在本地机器测试半小时未发生崩溃，重新编译打包发布，几十次测试之后也没有发生崩溃的情况，一切又恢复了平静。</p><h2 id="若有所思"><a href="#若有所思" class="headerlink" title="若有所思"></a>若有所思</h2><p><strong>如果在第一次使用工具时，我给予<code>Valgrind</code> 多一点点宽容就好了。</strong></p><p>其实事后看来好像没有多磨曲折，但是真实情况却是，前面的步骤交叉进行，经常会出现反复的情况，前前后后调试了近3天。</p><p>为什么如此执着？因为如果类似的问题不再早期发现时解决，后面要想再解决所付出的成本会更大，所以早发现早解决。</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><blockquote><ul><li><a href="https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer" target="_blank" rel="noopener">AddressSanitizerLeakSanitizer</a></li><li><a href="https://blog.csdn.net/qq_15437629/article/details/114440930" target="_blank" rel="noopener">内存错误检测工具-AddressSanitizer（ASAN）</a></li><li><a href="https://blog.csdn.net/jq0123/article/details/103567194" target="_blank" rel="noopener">查找内存错误</a></li><li><a href="https://www.daimajiaoliu.com/daima/4795bb7ff100410" target="_blank" rel="noopener">c++中智能指针使用小结</a></li><li><a href="https://codeantenna.com/a/NwOaRboXci" target="_blank" rel="noopener">静态或者全局智能指针使用的注意几点</a></li><li><a href="https://cloud.tencent.com/developer/article/1671070" target="_blank" rel="noopener">谈谈如何利用 valgrind 排查内存错误</a></li><li><a href="https://developer.aliyun.com/article/270" target="_blank" rel="noopener">几个C++内存泄漏和越界检测工具简介</a></li><li><a href="https://zhuanlan.zhihu.com/p/75416381" target="_blank" rel="noopener">内存泄漏检测工具valgrind神器</a></li><li><a href="https://developer.aliyun.com/article/416192" target="_blank" rel="noopener">使用valgrind检查内存问题</a></li><li><a href="https://www.cnblogs.com/orangeform/archive/2011/06/05/2073338.html" target="_blank" rel="noopener">Valgrind学习笔记(一)</a></li><li><a href="https://www.codenong.com/29776831/" target="_blank" rel="noopener">关于C#：valgrind-地址是在分配大小为16的块之前的8个字节</a></li><li><a href="https://stackoverflow.com/questions/10362241/c-seg-fault-issue" target="_blank" rel="noopener">c++ seg fault issue: <strong>gnu_cxx::</strong>exchange_and_add</a></li><li><a href="https://zhuanlan.zhihu.com/p/37696341" target="_blank" rel="noopener">记一次 TCMalloc Debug 经历</a></li><li><a href="https://blog.csdn.net/shine_journey/&gt;article/details/70160036" target="_blank" rel="noopener">Segmentation fault in <strong>gnu_cxx::</strong>exchange_and_add () from /usr/lib64/libstdc++.so.6</a></li><li><a href="https://blog.csdn.net/albertsh/article/details/119523587" target="_blank" rel="noopener">C++中使用std::sort自定义排序规则时要注意的崩溃问题</a></li></ul></blockquote><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121599177" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>靠想象打开未来一扇扇大门，靠理性选择其中正确的一扇~</p><p>2021-12-5 01:03:26</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;看题目来说这应该是一篇教程式文章，但为了突出“玄幻”二字，我们不讲细节只讲过程，在过程中体会解决问题的方式和方法，以及避免一些我在这个过程中绕的弯路，如果想找工具的详细使用方法可以去参考文章中翻一翻，有几篇文章写的真不错，下面我们开始扯淡啦。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C/"/>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="Valgrind" scheme="http://AlbertGithubHome.github.io/blog/tags/Valgrind/"/>
    
      <category term="内存问题" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下恢复rm误删的文件</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/11/25/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%81%A2%E5%A4%8Drm%E8%AF%AF%E5%88%A0%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/11/25/linux环境下恢复rm误删的文件/</id>
    <published>2021-11-25T15:51:31.000Z</published>
    <updated>2021-11-28T14:19:12.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一提到在 linux 环境下删除文件，那绝对离不开 <code>sudo rm -rf /*</code> 这个梗，每次看到这个命令，我都想到一幅恶搞的图片：</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/funny/rmrf.png" alt="rm"></p><a id="more"></a><p>这个『清理垃圾』的说明真是解释的“恰到好处”，据说有小白在论坛问问题，被人开玩笑的回复了 <code>sudo rm -rf /*</code> 这个命令，结果问题就解决了，人也拜拜了~</p><p>从删库到跑路，一天一个入狱小技巧，所以我们一定要谨慎使用 <code>rm -rf</code> 命令，这相当于我们在 Windows 上使用 <code>Shift+Delete</code> 组合，文件不会放到回收站中，而是直接永久删除了，在 Linux 中执行 <code>rm</code> 命令就相当于永久删除。</p><p>虽说 <code>sudo rm -rf /*</code> 危险无比，但是我们很少会直接这样写，但是 <code>rm</code> 命令还是经常用的，这不就在前几天，辛辛苦苦写的Shell脚本就被我直接 <code>rm -rf</code> 删掉了，幸亏我之前将内容打印到了控制台，否则整个脚本就白写了。</p><h1 id="rm之后还有救吗"><a href="#rm之后还有救吗" class="headerlink" title="rm之后还有救吗"></a>rm之后还有救吗</h1><p>尽管 <code>rm</code> 命令表示永久删除，但是不代表文件就一定找不回来，只是找回的几率有大有小。其实删除命令只是在文件节点中作删除标记，并不真正清除文件内容，如果删除后马上进行恢复，那么成功的概率还是很大的，但是如果其他用户一直在用这台机器，或者有一些写盘操作的进程一直在执行，那么这部分数据可能很快就会被覆盖。这时基本上就无法恢复该文件了。</p><h2 id="使用foremost找回文件"><a href="#使用foremost找回文件" class="headerlink" title="使用foremost找回文件"></a>使用foremost找回文件</h2><p><code>foremost</code> 是一个基于文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，接下来是安装和恢复的步骤：</p><ol><li>安装 <code>foremost</code></li></ol><p>CentOS系统直接运行 <code>sudo yum install https://forensics.cert.org/centos/cert/7/x86_64//foremost-1.5.7-13.1.el7.x86_64.rpm -y</code> 命令就可以完成</p><blockquote><p>如果是Ubuntu系统请尝试命令：<code>sudo apt install foremost</code></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># sudo yum install https://forensics.cert.org/centos/cert/7/x86_64//foremost-1.5.7-13.1.el7.x86_64.rpm -y</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">foremost-1.5.7-13.1.el7.x86_64.rpm                                                     |  46 kB  00:00:01</span><br><span class="line">Examining /var/tmp/yum-root-XJIfxM/foremost-1.5.7-13.1.el7.x86_64.rpm: foremost-1.5.7-13.1.el7.x86_64</span><br><span class="line">Marking /var/tmp/yum-root-XJIfxM/foremost-1.5.7-13.1.el7.x86_64.rpm to be installed</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package foremost.x86_64 0:1.5.7-13.1.el7 will be installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line">epel/7/x86_64                                                                          | 4.7 kB  00:00:00</span><br><span class="line">epel/7/x86_64/group_gz                                                                 |  96 kB  00:00:00</span><br><span class="line">epel/7/x86_64/updateinfo                                                               | 1.0 MB  00:00:00</span><br><span class="line">epel/7/x86_64/primary_db                                                               | 7.0 MB  00:00:01</span><br><span class="line">extras/7/x86_64                                                                        | 2.9 kB  00:00:00</span><br><span class="line">extras/7/x86_64/primary_db                                                             | 243 kB  00:00:00</span><br><span class="line">os/7/x86_64                                                                            | 3.6 kB  00:00:00</span><br><span class="line">updates/7/x86_64                                                                       | 2.9 kB  00:00:00</span><br><span class="line">updates/7/x86_64/primary_db                                                            |  12 MB  00:00:01</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">=====================================================================================================================</span><br><span class="line"> Package                    Arch                 Version                 Repository                           Size</span><br><span class="line">=====================================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> foremost                  x86_64           1.5.7-13.1.el7           /foremost-1.5.7-13.1.el7.x86_64          85 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">=====================================================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total size: 85 k</span><br><span class="line">Installed size: 85 k</span><br><span class="line">Downloading packages:</span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : foremost-1.5.7-13.1.el7.x86_64                                                1/1</span><br><span class="line">  Verifying  : foremost-1.5.7-13.1.el7.x86_64                                                1/1</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  foremost.x86_64 0:1.5.7-13.1.el7</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ol><li>创建一个测试文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># echo "this is a important file"&gt;important.txt</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ls</span></span><br><span class="line">connecttendis.sh  important.txt  restore  tarlist  tendis  test.iso</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># mkdir -p /tmp/restore</span></span><br></pre></td></tr></table></figure><ol><li>删除文件后尝试还原</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># rm important.txt</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># foremost -i /dev/vda1 -o /tmp/restore/</span></span><br><span class="line">Processing: /dev/vda1</span><br><span class="line">|***********Segmentation fault</span><br></pre></td></tr></table></figure><ol><li>执行几分钟之后崩溃，恢复失败，打开目录查看发现：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ls /tmp/restore/</span></span><br><span class="line">audit.txt  bmp  doc   exe  htm  jpg  mov  mpg  pdf  ppt   rar  sdw  sxc  sxw  wav  xls   zip</span><br><span class="line">avi        dll  docx  gif  jar  mbd  mp4  ole  png  pptx  rif  sx   sxi  vis  wmv  xlsx</span><br></pre></td></tr></table></figure><ol><li>看来与需要恢复的文件类型有关，换台机器再换一个png文件试试，先找一个showball.png测试文件，然后确认分区 <code>/dev/vda1</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># df</span></span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs          930496       0    930496   0% /dev</span><br><span class="line">tmpfs             941004      24    940980   1% /dev/shm</span><br><span class="line">tmpfs             941004     508    940496   1% /run</span><br><span class="line">tmpfs             941004       0    941004   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1       51473868 6458344  42692404  14% /</span><br><span class="line">/dev/loop0        361650  361650         0 100% /mnt/iso</span><br><span class="line">tmpfs             188204       0    188204   0% /run/user/0</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ls</span></span><br><span class="line">restore  showball.png</span><br></pre></td></tr></table></figure><ol><li>删除png文件后尝试恢复，进度条结束后即可进入指定的目录 <code>/root/restore/</code> 查看</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># rm showball.png</span></span><br><span class="line">rm: remove regular file ‘showball.png’? y</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># foremost -t png -i /dev/vda1 -o /root/restore/</span></span><br><span class="line">Processing: /dev/vda1</span><br><span class="line">|*********************************************************************************************|</span><br></pre></td></tr></table></figure><ol><li>在指定目录下会有一个 <code>audit.txt</code> 统计文件和一个类型文件夹 <code>png</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ll restore/</span></span><br><span class="line">total 40</span><br><span class="line">-rw-r--r-- 1 root root 24548 Nov 27 22:57 audit.txt</span><br><span class="line">drwxr-xr-- 2 root root 16384 Nov 27 22:56 png</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># cd restore/</span></span><br><span class="line">[root@VM-0-3-centos restore]<span class="comment"># ll png</span></span><br><span class="line">total 43764</span><br><span class="line">-rw-r--r-- 1 root root    3500 Nov 27 22:53 00367400.png</span><br><span class="line">-rw-r--r-- 1 root root    3578 Nov 27 22:53 00367408.png</span><br><span class="line">-rw-r--r-- 1 root root    3445 Nov 27 22:53 00367416.png</span><br><span class="line">-rw-r--r-- 1 root root     368 Nov 27 22:53 00367432.png</span><br><span class="line">-rw-r--r-- 1 root root     363 Nov 27 22:53 00367456.png</span><br><span class="line">-rw-r--r-- 1 root root     392 Nov 27 22:53 00367464.png</span><br><span class="line">-rw-r--r-- 1 root root     199 Nov 27 22:53 00367616.png</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>png目录下的文件名都是一些编号，与原来删除的文件完全不一样了，需要根据 audit.txt 文件确认，打开文件确认一下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos restore]<span class="comment"># head audit.txt</span></span><br><span class="line">Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus</span><br><span class="line">Audit File</span><br><span class="line"></span><br><span class="line">Foremost started at Sat Nov 27 22:53:48 2021</span><br><span class="line">Invocation: foremost -t png -i /dev/vda1 -o /root/restore/</span><br><span class="line">Output directory: /root/restore</span><br><span class="line">Configuration file: /etc/foremost.conf</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">File: /dev/vda1</span><br><span class="line">Start: Sat Nov 27 22:53:48 2021</span><br><span class="line">[root@VM-0-3-centos restore]<span class="comment"># head -n 20 audit.txt</span></span><br><span class="line">Foremost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus</span><br><span class="line">Audit File</span><br><span class="line"></span><br><span class="line">Foremost started at Sat Nov 27 22:53:48 2021</span><br><span class="line">Invocation: foremost -t png -i /dev/vda1 -o /root/restore/</span><br><span class="line">Output directory: /root/restore</span><br><span class="line">Configuration file: /etc/foremost.conf</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">File: /dev/vda1</span><br><span class="line">Start: Sat Nov 27 22:53:48 2021</span><br><span class="line">Length: 49 GB (53686025728 bytes)</span><br><span class="line"></span><br><span class="line">Num  Name (bs=512)         Size  File Offset     Comment</span><br><span class="line"></span><br><span class="line">0:  00367400.png           3 KB       188108800       (16 x 16)</span><br><span class="line">1:  00367408.png           3 KB       188112896       (16 x 16)</span><br><span class="line">2:  00367416.png           3 KB       188116992       (16 x 16)</span><br><span class="line">3:  00367432.png          368 B       188125184       (16 x 16)</span><br><span class="line">4:  00367456.png          363 B       188137472       (16 x 16)</span><br><span class="line">5:  00367464.png          392 B       188141568       (16 x 16)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol><li>audit.txt 文件中记录着恢复文件的简要信息，这需要你知道原来删除文件的相关信息，不然就只能一个个打开查看了，我是通过分辨率查找的</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos restore]<span class="comment"># grep "1217" audit.txt</span></span><br><span class="line">116:    12888200.png          40 KB      6598758400       (1217 x 690)</span><br><span class="line">360:    38088960.png          40 KB      19501547520      (1217 x 690)</span><br></pre></td></tr></table></figure><ol><li>根据过滤出的信息把 <code>12888200.png</code> 打开发现就是自己“误删”的文件这就恢复好了</li></ol><h2 id="使用extundelete找回文件"><a href="#使用extundelete找回文件" class="headerlink" title="使用extundelete找回文件"></a>使用extundelete找回文件</h2><p>extundelete 支持ext3、ext4文件系统下的文件恢复，使用 <code>cat /etc/fstab</code> 可以在linux环境下查看文件系统类型</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># cat /etc/fstab</span></span><br><span class="line">UUID=21dbe030-aa71-4b3a-8610-3b942dd447fa            /                    ext4       noatime,acl,user_xattr 1 1</span><br><span class="line">proc                 /proc                proc       defaults              0 0</span><br><span class="line">sysfs                /sys                 sysfs      noauto                0 0</span><br><span class="line">debugfs              /sys/kernel/debug    debugfs    noauto                0 0</span><br><span class="line">devpts               /dev/pts             devpts     mode=0620,gid=5       0 0</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ol><li>安装依赖文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># yum install e2fsprogs-devel</span></span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Repository epel is listed more than once <span class="keyword">in</span> the configuration</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">epel                                                                                  | 4.7 kB  00:00:00</span><br><span class="line">extras                                                                                | 2.9 kB  00:00:00</span><br><span class="line">os                                                                                    | 3.6 kB  00:00:00</span><br><span class="line">updates                                                                               | 2.9 kB  00:00:00</span><br><span class="line">(1/2): epel/7/x86_64/updateinfo                                                       | 1.0 MB  00:00:00</span><br><span class="line">(2/2): epel/7/x86_64/primary_db                                                       | 7.0 MB  00:00:01</span><br><span class="line">Resolving Dependencies</span><br><span class="line">--&gt; Running transaction check</span><br><span class="line">---&gt; Package e2fsprogs-devel.x86_64 0:1.42.9-19.el7 will be installed</span><br><span class="line">--&gt; Finished Dependency Resolution</span><br><span class="line"></span><br><span class="line">Dependencies Resolved</span><br><span class="line"></span><br><span class="line">===============================================================================================================</span><br><span class="line"> Package                 Arch                     Version                       Repository          Size</span><br><span class="line">===============================================================================================================</span><br><span class="line">Installing:</span><br><span class="line"> e2fsprogs-devel        x86_64                    1.42.9-19.el7                     os              73 k</span><br><span class="line"></span><br><span class="line">Transaction Summary</span><br><span class="line">===============================================================================================================</span><br><span class="line">Install  1 Package</span><br><span class="line"></span><br><span class="line">Total download size: 73 k</span><br><span class="line">Installed size: 162 k</span><br><span class="line">Is this ok [y/d/N]: y</span><br><span class="line">Downloading packages:</span><br><span class="line">e2fsprogs-devel-1.42.9-19.el7.x86_64.rpm                                              |  73 kB  00:00:00</span><br><span class="line">Running transaction check</span><br><span class="line">Running transaction <span class="built_in">test</span></span><br><span class="line">Transaction <span class="built_in">test</span> succeeded</span><br><span class="line">Running transaction</span><br><span class="line">  Installing : e2fsprogs-devel-1.42.9-19.el7.x86_64                                  1/1</span><br><span class="line">  Verifying  : e2fsprogs-devel-1.42.9-19.el7.x86_64                                  1/1</span><br><span class="line"></span><br><span class="line">Installed:</span><br><span class="line">  e2fsprogs-devel.x86_64 0:1.42.9-19.el7</span><br><span class="line"></span><br><span class="line">Complete!</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ol><li>下载extundelete源码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># wget https://src.fedoraproject.org/repo/pkgs/extundelete/extundelete-0.2.4.tar.bz2/77e626ad31433680c0a222069295d2ca/extundelete-0.2.4.tar.bz2</span></span><br><span class="line">--2021-11-28 18:36:15--  https://src.fedoraproject.org/repo/pkgs/extundelete/extundelete-0.2.4.tar.bz2/77e626ad31433680c0a222069295d2ca/extundelete-0.2.4.tar.bz2</span><br><span class="line">Resolving src.fedoraproject.org (src.fedoraproject.org)... 38.145.60.20, 38.145.60.21</span><br><span class="line">Connecting to src.fedoraproject.org (src.fedoraproject.org)|38.145.60.20|:443... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 108472 (106K) [application/x-bzip2]</span><br><span class="line">Saving to: ‘extundelete-0.2.4.tar.bz2’</span><br><span class="line"></span><br><span class="line">100%[============================================================================&gt;] 108,472     33.5KB/s   <span class="keyword">in</span> 3.2s</span><br><span class="line"></span><br><span class="line">2021-11-28 18:36:20 (33.5 KB/s) - ‘extundelete-0.2.4.tar.bz2’ saved [108472/108472]</span><br><span class="line"></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ls</span></span><br><span class="line">extundelete-0.2.4.tar.bz2</span><br></pre></td></tr></table></figure><ol><li>解压extundelete源码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># tar -jxvf extundelete-0.2.4.tar.bz2</span></span><br><span class="line">extundelete-0.2.4/</span><br><span class="line">extundelete-0.2.4/acinclude.m4</span><br><span class="line">extundelete-0.2.4/missing</span><br><span class="line">extundelete-0.2.4/autogen.sh</span><br><span class="line">extundelete-0.2.4/aclocal.m4</span><br><span class="line">extundelete-0.2.4/configure</span><br><span class="line">extundelete-0.2.4/LICENSE</span><br><span class="line">extundelete-0.2.4/README</span><br><span class="line">extundelete-0.2.4/install-sh</span><br><span class="line">extundelete-0.2.4/config.h.in</span><br><span class="line">extundelete-0.2.4/src/</span><br><span class="line">extundelete-0.2.4/src/extundelete.cc</span><br><span class="line">extundelete-0.2.4/src/block.h</span><br><span class="line">extundelete-0.2.4/src/kernel-jbd.h</span><br><span class="line">extundelete-0.2.4/src/insertionops.cc</span><br><span class="line">extundelete-0.2.4/src/block.c</span><br><span class="line">extundelete-0.2.4/src/cli.cc</span><br><span class="line">extundelete-0.2.4/src/extundelete-priv.h</span><br><span class="line">extundelete-0.2.4/src/extundelete.h</span><br><span class="line">extundelete-0.2.4/src/jfs_compat.h</span><br><span class="line">extundelete-0.2.4/src/Makefile.in</span><br><span class="line">extundelete-0.2.4/src/Makefile.am</span><br><span class="line">extundelete-0.2.4/configure.ac</span><br><span class="line">extundelete-0.2.4/depcomp</span><br><span class="line">extundelete-0.2.4/Makefile.in</span><br><span class="line">extundelete-0.2.4/Makefile.am</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># cd extundelete-0.2.4/</span></span><br><span class="line">[root@VM-0-3-centos extundelete-0.2.4]<span class="comment"># ls</span></span><br><span class="line">acinclude.m4  aclocal.m4  autogen.sh   config.h.in  configure  configure.ac  depcomp</span><br><span class="line">install-sh    LICENSE     Makefile.am  Makefile.in  missing    README        src</span><br><span class="line">[root@VM-0-3-centos extundelete-0.2.4]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ol><li>编译xtundelete源码安装</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos extundelete-0.2.4]<span class="comment"># ./configure --prefix=/usr/local/extundelete &amp;&amp; make &amp;&amp; make install</span></span><br><span class="line">Configuring extundelete 0.2.4</span><br><span class="line">Writing generated files to disk</span><br><span class="line">make -s all-recursive</span><br><span class="line">Making all <span class="keyword">in</span> src</span><br><span class="line">extundelete.cc: In <span class="keyword">function</span> ‘ext2_ino_t find_inode(ext2_filsys, ext2_filsys, ext2_inode*, std::string, int)’:</span><br><span class="line">extundelete.cc:1272:29: warning: narrowing conversion of ‘search_flags’ from ‘int’ to ‘ext2_ino_t &#123;aka unsigned int&#125;’ inside &#123; &#125; [-Wnarrowing]</span><br><span class="line">    buf, match_name2, priv, 0&#125;;</span><br><span class="line">                             ^</span><br><span class="line">Making install <span class="keyword">in</span> src</span><br><span class="line">  /usr/bin/install -c extundelete <span class="string">'/usr/local/extundelete/bin'</span></span><br><span class="line">[root@VM-0-3-centos extundelete-0.2.4]<span class="comment"># which extundelete</span></span><br><span class="line">/usr/bin/<span class="built_in">which</span>: no extundelete <span class="keyword">in</span> (/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/root/bin)</span><br><span class="line">[root@VM-0-3-centos extundelete-0.2.4]<span class="comment"># ll /usr/local/extundelete/bin/</span></span><br><span class="line">total 1296</span><br><span class="line">-rwxr-xr-x 1 root root 1323360 Nov 28 18:45 extundelete</span><br></pre></td></tr></table></figure><blockquote><p>如果在这一步报错 <code>configure: error: C++ compiler cannot create executables</code>，可以运行 <code>yum -y install gcc-c++</code> 命令安装编译环境</p></blockquote><ol><li>准备测试文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos examples]<span class="comment"># df -T</span></span><br><span class="line">Filesystem     Type     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs       devtmpfs    930496       0    930496   0% /dev</span><br><span class="line">tmpfs          tmpfs       941004      24    940980   1% /dev/shm</span><br><span class="line">tmpfs          tmpfs       941004     508    940496   1% /run</span><br><span class="line">tmpfs          tmpfs       941004       0    941004   0% /sys/fs/cgroup</span><br><span class="line">/dev/vda1      ext4      51473868 6465732  42685016  14% /</span><br><span class="line">/dev/loop0     iso9660     361650  361650         0 100% /mnt/iso</span><br><span class="line">tmpfs          tmpfs       188204       0    188204   0% /run/user/0</span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment"># cp ../extundelete-0.2.4.tar.bz2 .</span></span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment"># ls</span></span><br><span class="line">extundelete-0.2.4.tar.bz2</span><br></pre></td></tr></table></figure><ol><li>查询文件的inode信息</li></ol><p>我们选择刚刚下载的extundelete源码包作为“误删”的文件，先查看一下信息，<code>-li</code> 可以在第一列查看文件的inode信息，examples文件夹的inode值为1311798：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ls examples/</span></span><br><span class="line">extundelete-0.2.4.tar.bz2</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ls -li</span></span><br><span class="line">total 361676</span><br><span class="line">1311798 drwxr-xr-x 2 root root      4096 Nov 28 20:28 examples</span><br><span class="line">1310761 drwxr-xr-x 3 1000 1000      4096 Nov 28 18:45 extundelete-0.2.4</span><br><span class="line"> 918157 drwxr-xr-x 2 root root      4096 Feb 28  2021 tarlist</span><br><span class="line"> 396057 -rw-r--r-- 1 root root 370329600 Feb 27  2021 test.iso</span><br></pre></td></tr></table></figure><ol><li>删除测试文件，并用查询信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># cd examples/</span></span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment"># ls</span></span><br><span class="line">extundelete-0.2.4.tar.bz2</span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment"># rm extundelete-0.2.4.tar.bz2 -f</span></span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment"># ls</span></span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment"># /usr/local/extundelete/bin/extundelete /dev/vda1 --inode 1311798</span></span><br><span class="line">NOTICE: Extended attributes are not restored.</span><br><span class="line">WARNING: EXT3_FEATURE_INCOMPAT_RECOVER is <span class="built_in">set</span>.</span><br><span class="line">The partition should be unmounted to undelete any files without further data loss.</span><br><span class="line">If the partition is not currently mounted, this message indicates</span><br><span class="line">it was improperly unmounted, and you should run fsck before continuing.</span><br><span class="line">If you decide to <span class="built_in">continue</span>, extundelete may overwrite some of the deleted</span><br><span class="line">files and make recovering those files impossible.  You should unmount the</span><br><span class="line">file system and check it with fsck before using extundelete.</span><br><span class="line">Would you like to <span class="built_in">continue</span>? (y/n)</span><br><span class="line">y</span><br><span class="line">Loading filesystem metadata ... 400 groups loaded.</span><br><span class="line">Group: 160</span><br><span class="line">Contents of inode 1311798:</span><br><span class="line">0000 | ed 41 00 00 00 10 00 00 7a 62 a3 61 1b 7a a3 61 | .A......zb.a.z.a</span><br><span class="line">0010 | 1b 7a a3 61 00 00 00 00 00 00 02 00 08 00 00 00 | .z.a............</span><br><span class="line">0020 | 00 00 08 00 0b 00 00 00 0a f3 01 00 04 00 00 00 | ................</span><br><span class="line">0030 | 00 00 00 00 00 00 00 00 01 00 00 00 79 20 50 00 | ............y P.</span><br><span class="line">0040 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">0050 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">0060 | 00 00 00 00 7c 63 ab ad 00 00 00 00 00 00 00 00 | ....|c..........</span><br><span class="line">0070 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">0080 | 1c 00 00 00 80 da 0d a3 80 da 0d a3 94 24 04 08 | .............$..</span><br><span class="line">0090 | 7a 62 a3 61 94 24 04 08 00 00 00 00 00 00 00 00 | zb.a.$..........</span><br><span class="line">00a0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">00b0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">00c0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">00d0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">00e0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line">00f0 | 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 | ................</span><br><span class="line"></span><br><span class="line">Inode is Allocated</span><br><span class="line">File mode: 16877</span><br><span class="line">Low 16 bits of Owner Uid: 0</span><br><span class="line">Size <span class="keyword">in</span> bytes: 4096</span><br><span class="line">Access time: 1638097530</span><br><span class="line">Creation time: 1638103579</span><br><span class="line">Modification time: 1638103579</span><br><span class="line">Deletion Time: 0</span><br><span class="line">Low 16 bits of Group Id: 0</span><br><span class="line">Links count: 2</span><br><span class="line">Blocks count: 8</span><br><span class="line">File flags: 524288</span><br><span class="line">File version (<span class="keyword">for</span> NFS): 2913690492</span><br><span class="line">File ACL: 0</span><br><span class="line">Directory ACL: 0</span><br><span class="line">Fragment address: 0</span><br><span class="line">Direct blocks: 127754, 4, 0, 0, 1, 5251193, 0, 0, 0, 0, 0, 0</span><br><span class="line">Indirect block: 0</span><br><span class="line">Double indirect block: 0</span><br><span class="line">Triple indirect block: 0</span><br><span class="line"></span><br><span class="line">File name                                       | Inode number | Deleted status</span><br><span class="line">.                                                 1311798</span><br><span class="line">..                                                393219</span><br><span class="line">extundelete-0.2.4.tar.bz2                         396764         Deleted</span><br><span class="line">conftest.err                                      1311833        Deleted</span><br><span class="line">[root@VM-0-3-centos examples]<span class="comment">#</span></span><br></pre></td></tr></table></figure><pre><code>我们发现 extundelete-0.2.4.tar.bz2 文件的状态为 `Deleted`</code></pre><ol><li>使用extundelete恢复文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># /usr/local/extundelete/bin/extundelete /dev/vda1 --restore-directory /tmp</span></span><br><span class="line">NOTICE: Extended attributes are not restored.</span><br><span class="line">WARNING: EXT3_FEATURE_INCOMPAT_RECOVER is <span class="built_in">set</span>.</span><br><span class="line">The partition should be unmounted to undelete any files without further data loss.</span><br><span class="line">If the partition is not currently mounted, this message indicates</span><br><span class="line">it was improperly unmounted, and you should run fsck before continuing.</span><br><span class="line">If you decide to <span class="built_in">continue</span>, extundelete may overwrite some of the deleted</span><br><span class="line">files and make recovering those files impossible.  You should unmount the</span><br><span class="line">file system and check it with fsck before using extundelete.</span><br><span class="line">Would you like to <span class="built_in">continue</span>? (y/n)</span><br><span class="line">y</span><br><span class="line">Loading filesystem metadata ... 400 groups loaded.</span><br><span class="line">Loading journal descriptors ... 31842 descriptors loaded.</span><br><span class="line">*** Error <span class="keyword">in</span> `/usr/<span class="built_in">local</span>/extundelete/bin/extundelete<span class="string">': double free or corruption (!prev): 0x00000000014d6020 ***</span></span><br><span class="line"><span class="string">======= Backtrace: =========</span></span><br><span class="line"><span class="string">/lib64/libc.so.6(+0x81299)[0x7f5c08190299]</span></span><br><span class="line"><span class="string">/usr/local/extundelete/bin/extundelete[0x40cdcb]</span></span><br><span class="line"><span class="string">/usr/local/extundelete/bin/extundelete[0x40fee6]</span></span><br><span class="line"><span class="string">/usr/local/extundelete/bin/extundelete[0x4045b4]</span></span><br><span class="line"><span class="string">/lib64/libc.so.6(__libc_start_main+0xf5)[0x7f5c08131555]</span></span><br><span class="line"><span class="string">/usr/local/extundelete/bin/extundelete[0x404aef]</span></span><br><span class="line"><span class="string">======= Memory map: ========</span></span><br><span class="line"><span class="string">00400000-0041c000 r-xp 00000000 fd:01 1311942                            /usr/local/extundelete/bin/extundelete</span></span><br><span class="line"><span class="string">0061c000-0061d000 r--p 0001c000 fd:01 1311942                            /usr/local/extundelete/bin/extundelete</span></span><br><span class="line"><span class="string">0061d000-0061e000 rw-p 0001d000 fd:01 1311942                            /usr/local/extundelete/bin/extundelete</span></span><br><span class="line"><span class="string">0061e000-0061f000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">014c6000-0176e000 rw-p 00000000 00:00 0                                  [heap]</span></span><br><span class="line"><span class="string">7f5c00000000-7f5c00021000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c00021000-7f5c04000000 ---p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c07ca1000-7f5c07ef3000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c07ef3000-7f5c07f0a000 r-xp 00000000 fd:01 265649                     /usr/lib64/libpthread-2.17.so</span></span><br><span class="line"><span class="string">7f5c07f0a000-7f5c08109000 ---p 00017000 fd:01 265649                     /usr/lib64/libpthread-2.17.so</span></span><br><span class="line"><span class="string">7f5c08109000-7f5c0810a000 r--p 00016000 fd:01 265649                     /usr/lib64/libpthread-2.17.so</span></span><br><span class="line"><span class="string">7f5c0810a000-7f5c0810b000 rw-p 00017000 fd:01 265649                     /usr/lib64/libpthread-2.17.so</span></span><br><span class="line"><span class="string">7f5c0810b000-7f5c0810f000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c0810f000-7f5c082d2000 r-xp 00000000 fd:01 265623                     /usr/lib64/libc-2.17.so</span></span><br><span class="line"><span class="string">7f5c082d2000-7f5c084d2000 ---p 001c3000 fd:01 265623                     /usr/lib64/libc-2.17.so</span></span><br><span class="line"><span class="string">7f5c084d2000-7f5c084d6000 r--p 001c3000 fd:01 265623                     /usr/lib64/libc-2.17.so</span></span><br><span class="line"><span class="string">7f5c084d6000-7f5c084d8000 rw-p 001c7000 fd:01 265623                     /usr/lib64/libc-2.17.so</span></span><br><span class="line"><span class="string">7f5c084d8000-7f5c084dd000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c084dd000-7f5c084f2000 r-xp 00000000 fd:01 291206                     /usr/lib64/libgcc_s-4.8.5-20150702.so.1</span></span><br><span class="line"><span class="string">7f5c084f2000-7f5c086f1000 ---p 00015000 fd:01 291206                     /usr/lib64/libgcc_s-4.8.5-20150702.so.1</span></span><br><span class="line"><span class="string">7f5c086f1000-7f5c086f2000 r--p 00014000 fd:01 291206                     /usr/lib64/libgcc_s-4.8.5-20150702.so.1</span></span><br><span class="line"><span class="string">7f5c086f2000-7f5c086f3000 rw-p 00015000 fd:01 291206                     /usr/lib64/libgcc_s-4.8.5-20150702.so.1</span></span><br><span class="line"><span class="string">7f5c086f3000-7f5c087f4000 r-xp 00000000 fd:01 287349                     /usr/lib64/libm-2.17.so</span></span><br><span class="line"><span class="string">7f5c087f4000-7f5c089f3000 ---p 00101000 fd:01 287349                     /usr/lib64/libm-2.17.so</span></span><br><span class="line"><span class="string">7f5c089f3000-7f5c089f4000 r--p 00100000 fd:01 287349                     /usr/lib64/libm-2.17.so</span></span><br><span class="line"><span class="string">7f5c089f4000-7f5c089f5000 rw-p 00101000 fd:01 287349                     /usr/lib64/libm-2.17.so</span></span><br><span class="line"><span class="string">7f5c089f5000-7f5c08ade000 r-xp 00000000 fd:01 266798                     /usr/lib64/libstdc++.so.6.0.19</span></span><br><span class="line"><span class="string">7f5c08ade000-7f5c08cde000 ---p 000e9000 fd:01 266798                     /usr/lib64/libstdc++.so.6.0.19</span></span><br><span class="line"><span class="string">7f5c08cde000-7f5c08ce6000 r--p 000e9000 fd:01 266798                     /usr/lib64/libstdc++.so.6.0.19</span></span><br><span class="line"><span class="string">7f5c08ce6000-7f5c08ce8000 rw-p 000f1000 fd:01 266798                     /usr/lib64/libstdc++.so.6.0.19</span></span><br><span class="line"><span class="string">7f5c08ce8000-7f5c08cfd000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c08cfd000-7f5c08d3f000 r-xp 00000000 fd:01 267873                     /usr/lib64/libext2fs.so.2.4</span></span><br><span class="line"><span class="string">7f5c08d3f000-7f5c08f3f000 ---p 00042000 fd:01 267873                     /usr/lib64/libext2fs.so.2.4</span></span><br><span class="line"><span class="string">7f5c08f3f000-7f5c08f40000 r--p 00042000 fd:01 267873                     /usr/lib64/libext2fs.so.2.4</span></span><br><span class="line"><span class="string">7f5c08f40000-7f5c08f42000 rw-p 00043000 fd:01 267873                     /usr/lib64/libext2fs.so.2.4</span></span><br><span class="line"><span class="string">7f5c08f42000-7f5c08f45000 r-xp 00000000 fd:01 265948                     /usr/lib64/libcom_err.so.2.1</span></span><br><span class="line"><span class="string">7f5c08f45000-7f5c09144000 ---p 00003000 fd:01 265948                     /usr/lib64/libcom_err.so.2.1</span></span><br><span class="line"><span class="string">7f5c09144000-7f5c09145000 r--p 00002000 fd:01 265948                     /usr/lib64/libcom_err.so.2.1</span></span><br><span class="line"><span class="string">7f5c09145000-7f5c09146000 rw-p 00003000 fd:01 265948                     /usr/lib64/libcom_err.so.2.1</span></span><br><span class="line"><span class="string">7f5c09146000-7f5c09168000 r-xp 00000000 fd:01 265614                     /usr/lib64/ld-2.17.so</span></span><br><span class="line"><span class="string">7f5c092b1000-7f5c0935d000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c09363000-7f5c09367000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7f5c09367000-7f5c09368000 r--p 00021000 fd:01 265614                     /usr/lib64/ld-2.17.so</span></span><br><span class="line"><span class="string">7f5c09368000-7f5c09369000 rw-p 00022000 fd:01 265614                     /usr/lib64/ld-2.17.so</span></span><br><span class="line"><span class="string">7f5c09369000-7f5c0936a000 rw-p 00000000 00:00 0</span></span><br><span class="line"><span class="string">7ffe581db000-7ffe581fc000 rw-p 00000000 00:00 0                          [stack]</span></span><br><span class="line"><span class="string">7ffe581fc000-7ffe581fe000 r-xp 00000000 00:00 0                          [vdso]</span></span><br><span class="line"><span class="string">ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]</span></span><br><span class="line"><span class="string">Aborted</span></span><br><span class="line"><span class="string">[root@VM-0-3-centos ~]#</span></span><br></pre></td></tr></table></figure><ol><li><p>恢复失败，此路不通！！！</p><p> 有其他人成功了，但是我测试失败，释放内存崩溃，有大神给说一下怎么改源码吗？此处存疑，后续再测，先记录一下常用参数</p></li></ol><ul><li>查询inode文件状态：<code>/usr/local/extundelete/bin/extundelete /dev/vda1 --inode 1311798</code></li><li>恢复指定节点数据：<code>/usr/local/extundelete/bin/extundelete /dev/vda1 --restore-inode 1311798</code></li><li>恢复单个文件：<code>/usr/local/extundelete/bin/extundelete /dev/vda1 --restore-file root/examples/extundelete-0.2.4.tar.bz2</code></li><li>恢复一个目录：<code>/usr/local/extundelete/bin/extundelete /dev/vda1 --restore-files root/examples</code></li><li>恢复所有文件：<code>/usr/local/extundelete/bin/extundelete /dev/vda1 --restore-all</code></li></ul><h1 id="预防误删引发的事故"><a href="#预防误删引发的事故" class="headerlink" title="预防误删引发的事故"></a>预防误删引发的事故</h1><ul><li><p>定义别名，提示删除</p><p>  定义别名 <code>alias rm=&#39;rm -i&#39;</code>， 在删除文件前会出现一个提示，使用 <code>-i</code> 选项来需要逐个确认要删除的文件，只有用户输入 <code>y</code> 才会将文件删除，但是这种做法在加上 <code>-f</code> 选项之后会失效。</p></li><li><p>禁用rm，使用mv代替</p><p>  在系统中不允许直接使用rm命令直接删除文件，需要mv文件到指定的回收目录 ~/.delete，然后配合一个定时任务，每周清空~/.delete下文件，相当于手动创建了一个回收站。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>使用foremost恢复时的目标目录最好是另外一个磁盘中的目录，把文件恢复到被删除文件所在的磁盘中很可能会在恢复前覆盖被误删的文件</li><li><code>sodu</code> 的全称目前有 <code>substitute user do</code> 和 <code>super user do</code> 两种说法，使用sudo通常是行驶超级用户的权限，但有时也可以其他普通用户，所以翻译成 <code>substitute user do</code> 代替其他用户来做更准确一点</li><li>foremost 支持的文件系统比较多，其中包括 ext2、 ext3 、vfat、NTFS、ufs、jfs 等，但是只能恢复特定格式的文件，而 extundelete 只支持ext3、ext4文件系统，不过可恢复的文件类型很多。</li><li>除了本文中总结的这两款不怎么好用的恢复软件，还有 testdisk 和 photorec 可以用来恢复，后续可以尝试一下</li><li>数据无价，请谨慎删除，可参考别名方法或禁用 <code>rm -rf</code> 来减少事故的发生</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121368339" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>成年人，结果导向！没有功劳的苦劳是那么的虚弱无力~</p><p>2021-11-28 22:14:54</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一提到在 linux 环境下删除文件，那绝对离不开 &lt;code&gt;sudo rm -rf /*&lt;/code&gt; 这个梗，每次看到这个命令，我都想到一幅恶搞的图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/funny/rmrf.png&quot; alt=&quot;rm&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="rm" scheme="http://AlbertGithubHome.github.io/blog/tags/rm/"/>
    
      <category term="rf" scheme="http://AlbertGithubHome.github.io/blog/tags/rf/"/>
    
      <category term="回收站" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%9B%9E%E6%94%B6%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>完全图与强连通图的那些坑</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/11/17/%E5%AE%8C%E5%85%A8%E5%9B%BE%E4%B8%8E%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%9B%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E5%9D%91/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/11/17/完全图与强连通图的那些坑/</id>
    <published>2021-11-16T16:40:21.000Z</published>
    <updated>2021-11-16T16:43:52.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>图这个数据结构相比队列、栈、树来说算是复杂多了，关于图的问题也多如牛毛，先来看一下常见的问题：</p><p><strong>若无向图 <code>G</code> 中含7个顶点，要想保证图 <code>G</code> 在任何情况下都是连通的，则需要的边数最少是几条？</strong></p><a id="more"></a><p>回答这种问题一定要注意细节，找到关键的点，不然一定会掉到坑里的。这个题关键点有以下几个：</p><ul><li>7个顶点</li><li>任何条件下连通</li><li>最少几条边</li></ul><p>其中第1点和第3点不容易出错，比较容易出现问题的是第2点，要想保证任何条件下连通，意思给定边数以后无论怎么连都能通？</p><p>先说下答案是16，至于为什么，我们后面先复习一下图相关的概念再慢慢解释，因为此刻的我连什么是强联通图都忘了~</p><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><ul><li><strong>图</strong>：是由顶点V集和边E集构成，边表示了与之相连的两点间的关系，因此图可以表示成G = (V, E)</li><li><strong>有向图</strong>：是指图中的两个顶点从A到B和从B到A的含义是不同的，我们认为两点的关系是有方向的，则称其为有向图</li><li><strong>无向图</strong>：是指两点间的连接线无方向无关，这种图叫做无向图</li><li><strong>连通性</strong>：从图中一个顶点到达另一顶点，若存在至少一条路径，则称这两个顶点是连通着的</li><li><strong>连通图</strong>：在无向图中，如果任意两个顶点之间都能够连通，则称此无向图为连通图</li><li><strong>完全图</strong>：在无向图中，如果任意两个顶点之间都边直接相连，则称此无向图为完全图</li><li><strong>连通分量</strong>：若无向图不是连通图，但图中存在某个子图符合连通图的性质，则称该子图为连通分量</li><li><strong>强连通图</strong>：在有向图中，若任意两个顶点之间包含至少来回两条通路，则称此有向图为强连通图</li><li><strong>有向完全图</strong>：在有向图中，如果任意两个顶点之间都有相反的两条弧直接相连，则称此有向图为有向完全图</li><li><strong>强连通分量</strong>：若有向图不是强连通图，但图中存在某个子图符合强连通图的性质，则称该子图为强连通分量</li></ul><h1 id="关于题目的解释"><a href="#关于题目的解释" class="headerlink" title="关于题目的解释"></a>关于题目的解释</h1><p>这是一个无向图，要想在任何情况下都连通，那考虑极端情况就是孤立一个顶点，让尽可能多的边连接剩余的顶点，那会构成一个 <code>n-1</code> 个顶点的完全图，然后再考虑加一条边把剩下的孤立顶点连起来，这样得到的边数是 N = 5+4+3+2+1 + 1 = 16，用组合数表示就是</p><p>$$<br>C^2_{n-1} + 1= (n-1) * (n-2) / 2 + 1<br>$$</p><h1 id="题目变型"><a href="#题目变型" class="headerlink" title="题目变型"></a>题目变型</h1><ul><li><p>若无向图 <code>G</code> 中含7个顶点，要想保证图 <code>G</code> 在是连通的，至少需要几条边？</p><blockquote><p>答案6条，即 (n-1)</p></blockquote></li><li><p>一个包含7个顶点的无向图 <code>G</code> 为完全图，那么它共有几条边？</p><blockquote><p>答案21条，即 n * (n-1) / 2</p></blockquote></li><li><p>若有向图 <code>G</code> 中含7个顶点，要想保证图 <code>G</code> 在是强连通的，至少需要几条弧？</p><blockquote><p>答案7条，即 n，也就是形成一个环</p></blockquote></li><li><p>一个包含7个顶点的有向图 <code>G</code> 为完全图，那么它共有几条弧？</p><blockquote><p>答案42条，即 n * (n-1)</p></blockquote></li></ul><!--- 具有 7 个顶点的有向图至少应有多少条边一定成为一个强连通图？  >答案37条，即 (n-1) * (n-1) + 1--><h1 id="补充两个图例"><a href="#补充两个图例" class="headerlink" title="补充两个图例"></a>补充两个图例</h1><ul><li><strong>完全图</strong>，特点是任何两个顶点都有直接的边相连</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A((A))---B((B));</span><br><span class="line">    A((A))---C((C));</span><br><span class="line">    A((A))---D((D));</span><br><span class="line">    A((A))---E((E));</span><br><span class="line"></span><br><span class="line">    B((B))---C((C));</span><br><span class="line">    B((B))---D((D));</span><br><span class="line">    B((B))---E((E));</span><br><span class="line"></span><br><span class="line">    C((C))---D((D));</span><br><span class="line">    C((C))---E((E));</span><br><span class="line"></span><br><span class="line">    D((D))---E((E));</span><br></pre></td></tr></table></figure><ul><li><strong>强连通图</strong>，任意两点间都有路径可达</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A((A))--&gt;B((B));</span><br><span class="line">    B((B))--&gt;C((C));</span><br><span class="line">    C((C))--&gt;D((D));</span><br><span class="line">    D((D))--&gt;E((E));</span><br><span class="line">    E((E))--&gt;A((A));</span><br><span class="line">    A((A))--&gt;F((F));</span><br><span class="line">    F((F))--&gt;A((A));</span><br></pre></td></tr></table></figure><!--<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A((A))---B((B));</span><br><span class="line">    A((A))---C((C));</span><br><span class="line">    A((A))---D((D));</span><br><span class="line">    A((A))---E((E));</span><br><span class="line"></span><br><span class="line">    B((B))---A((A));</span><br><span class="line">    B((B))---C((C));</span><br><span class="line">    B((B))---D((D));</span><br><span class="line">    B((B))---E((E));</span><br><span class="line"></span><br><span class="line">    C((C))---A((A));</span><br><span class="line">    C((C))---B((B));</span><br><span class="line">    C((C))---D((D));</span><br><span class="line">    C((C))---E((E));</span><br><span class="line"></span><br><span class="line">    D((D))---A((A));</span><br><span class="line">    D((D))---C((C));</span><br><span class="line">    D((D))---B((B));</span><br><span class="line">    D((D))---E((E));</span><br><span class="line"></span><br><span class="line">    E((E))---A((A));</span><br><span class="line">    E((E))---C((C));</span><br><span class="line">    E((E))---D((D));</span><br><span class="line">    E((E))---B((B));</span><br></pre></td></tr></table></figure><p>–&gt;</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>解答关于图的问题可以从概念入手，更要注意题目中至多、至少、任何等字眼</li><li>弄清楚连通图、完全图、连通分量、强联通图、强连通分量等概念，迷糊的时候可以画一画</li><li>使用<code>mermaid</code>语法画的图确实不怎么好看，不过它强在了描述性的语言</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121219321"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>那些看似漫不经心的成功，其实都是蓄谋已久；那些你以为的驾轻就熟，其实都是有备而来。一个人越活越好的样子应该是不沮当下，不弃未来。你要相信，所有的事与愿违或许都是惊喜的铺垫，所有的坚持不懈终将得到岁月的奖赏~</p><p>2021-11-17 00:24:00</p></blockquote>-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;图这个数据结构相比队列、栈、树来说算是复杂多了，关于图的问题也多如牛毛，先来看一下常见的问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;若无向图 &lt;code&gt;G&lt;/code&gt; 中含7个顶点，要想保证图 &lt;code&gt;G&lt;/code&gt; 在任何情况下都是连通的，则需要的边数最少是几条？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://AlbertGithubHome.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="图" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%9B%BE/"/>
    
      <category term="完全图" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AE%8C%E5%85%A8%E5%9B%BE/"/>
    
      <category term="强连通图" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>树的带权路径长度和哈夫曼树</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/11/07/%E6%A0%91%E7%9A%84%E5%B8%A6%E6%9D%83%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6%E5%92%8C%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/11/07/树的带权路径长度和哈夫曼树/</id>
    <published>2021-11-07T13:23:09.000Z</published>
    <updated>2021-11-13T15:12:41.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>树的所有叶子结点的带权路径长度之和，称为树的带权路径长度，英文缩写为 <code>WPL</code>，从百度百科中得到的信息为 “树的带权路径长度（weighted path length of tree）是2018年公布的计算机科学技术名词”，这就有点奇怪了，这个词印象中在大学课本里学过啊，怎么会是2018年的名词呢？难道我穿越了？</p><p>我赶紧找来严蔚敏、吴伟民老师编著的《数据结构》翻开来看，在2009年9月第30次印刷的图书的144页中，明确的用加粗字体描述了这样个概念：</p><blockquote><p>树的带权路径长度为树中所有叶子结点的带权路径之和，通常记作 WPL = …</p></blockquote><a id="more"></a><p>看来我没记错，不是这个百科弄错了，就是2018年重新公布了一次，并不是新的概念，它确实是一个古老的名词了，接下来可以复习一下了。</p><h1 id="树的带权路径长度"><a href="#树的带权路径长度" class="headerlink" title="树的带权路径长度"></a>树的带权路径长度</h1><p>前面虽然已经给出了定义，可什么是路径，为什么要带权，还要一步步来解释。</p><p>路径是指从树的一个结点到另一个结点所走过的部分，路径长度也可以理解为两个结点之间的距离，可以简单理解为路过的结点数，那为什么要带权呢？这和我们生活中的路径一样，并不是距离短的路所花费的时间就少，还要考虑路况、成本等多种因素，而权值就是在特定场景下我们赋予每条路的选择概率。</p><p>解释了这几个概念之后我们就可以理解文章开头的定义了，把树的每个叶子结点到根结点的带权路径长度加在一起，就是树的带权路径长度。</p><h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><p>当使用已知结点作为叶子结点，用其构成的所有树中，带全路径长度最小的树被称为最优二叉树，也就是哈夫曼树。</p><p>我们先来计算一下一颗二叉树的带权路径长度，二叉树形态如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A((ROOT))--&gt;B((P));</span><br><span class="line">    A((ROOT))--&gt;C[[2]];</span><br><span class="line">    B((P))--&gt;D[[4]];</span><br><span class="line">    B((P))--&gt;F((R));</span><br><span class="line">    F((P))--&gt;G[[7]];</span><br><span class="line">    F((P))--&gt;H[[5]];</span><br></pre></td></tr></table></figure><p>计算二叉树的带权路径长度涉及到树的层数和权值，以上面这个图为例，<code>ROOT</code> 结点所在的层数为0层，往下数字2结点为1层，数字4结点为2层，数字7结点和5结点为3层，方块中的数字代表了该叶子结点的权值，那个这颗树的带权路径长度为：</p><blockquote><p>7 <em> 3 + 5 </em> 3 + 4 <em> 2 + 2 </em> 1 = 46</p></blockquote><p>那么这是一颗最优树吗？显然不是，因为它的带权路径长度不是最短，其实从计算公式也可以看出一点门道，计算带权路径长度时会用层数乘以权值，因为权值不会变，那么唯一能减小结果的就是调整层数，一个很直观的贪心思路就是把权值大的放在低层，权值小的放在高层，这样就可以减小最后的值，比如调整成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A((ROOT))--&gt;B((P));</span><br><span class="line">    A((ROOT))--&gt;C((P));</span><br><span class="line">    B((P))--&gt;D[[4]];</span><br><span class="line">    B((P))--&gt;F[[2]];</span><br><span class="line">    C((P))--&gt;G[[7]];</span><br><span class="line">    C((P))--&gt;H[[5]];</span><br></pre></td></tr></table></figure><p>这颗树的带权路径长度计算结果为36，比之前的值小了很多：</p><blockquote><p>4 <em> 2 + 2 </em> 2 + 7 <em> 2 + 5 </em> 2 = 36</p></blockquote><p>其实这还不是一颗最优的树，最优的结构应该是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A((ROOT))--&gt;B[[7]];</span><br><span class="line">    A((ROOT))--&gt;C((P));</span><br><span class="line">    C((P))--&gt;D[[5]];</span><br><span class="line">    C((P))--&gt;F((P));</span><br><span class="line">    F((P))--&gt;G[[2]];</span><br><span class="line">    F((P))--&gt;H[[4]];</span><br></pre></td></tr></table></figure><p>它的带权路径长度计算结果为5，从这可以看出，树的层数高的不一定计算成的带权路径长度就大。</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>前面说了这么多，那么哈夫曼树有什么作用呢？你应该听说过哈夫曼编码吧，这其实就是哈夫曼树的一个应用，用来找到存放一串字符所需的最少的二进制编码。存放二进制还要单独编码吗？也许你想说什么英文字母不都是编好的吗？</p><p>单纯用字母来传递信息有一个问题，那就是会造成浪费，因为每个字母在日常交流中出现的次数并不一样，比如字母 <code>e</code> 是英文中出现频率最高的字母，而字母 <code>z</code> 却出现的很少，所以可以用较短的编码来表示 <code>e</code> 用较长的编码来表示字母 <code>z</code>，这样很直观的就能感觉到同样的信息采取这种方式处理之后会占用更小的空间。</p><h2 id="构建哈夫曼树"><a href="#构建哈夫曼树" class="headerlink" title="构建哈夫曼树"></a>构建哈夫曼树</h2><p>假设有一段英文文件，我们先统计这个文件中每个字母的出现得到次数，统计如下（别问我这个文件写的什么，我胡诌的(#^.^#)）：</p><blockquote><p>a:19<br>b:6<br>c:7<br>d:3<br>e:32<br>f:10<br>g:21<br>h:2</p></blockquote><p>因为哈夫曼树使用叶子结点来推导最终的编码，所有我们先用这些数字作为叶子结点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A[[19]]</span><br><span class="line">    B[[6]]</span><br><span class="line">    C[[7]]</span><br><span class="line">    D[[3]]</span><br><span class="line">    E[[32]]</span><br><span class="line">    F[[10]]</span><br><span class="line">    G[[21]]</span><br><span class="line">    H[[2]]</span><br></pre></td></tr></table></figure><hr><p>接下来记住一个原则，那就是<strong>找当前树的根结点和剩余叶子结点的最小的两个值，然后组成新的树杈。</strong></p><hr><p>首先，从19、6、7、3、32、10、21、2 中选择频数最小的两个叶子结点，分别为2和3，计算两个结点的和5作为根：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    A[[19]]</span><br><span class="line">    B[[6]]</span><br><span class="line">    C[[7]]</span><br><span class="line"></span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    E[[32]]</span><br><span class="line">    F[[10]]</span><br><span class="line">    G[[21]]</span><br></pre></td></tr></table></figure><p>接着，从19、6、7、5、32、10、21 中选择两个最小的结点，分别是根结点5和叶子结点6，计算两个结点的和11作为新的树根：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    A[[19]]</span><br><span class="line">    C[[7]]</span><br><span class="line"></span><br><span class="line">    R2((11))--&gt;R((5))</span><br><span class="line">    R2((11))--&gt;B[[6]]</span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    E[[32]]</span><br><span class="line">    F[[10]]</span><br><span class="line">    G[[21]]</span><br></pre></td></tr></table></figure><p>然后，从19、7、11、32、10、21 中选择两个最小的结点，这次都是叶子结点，分别为7和10，计算两个结点的和17形成一颗新的树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    A[[19]]</span><br><span class="line"></span><br><span class="line">    R2((11))--&gt;R((5))</span><br><span class="line">    R2((11))--&gt;B[[6]]</span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    E[[32]]</span><br><span class="line"></span><br><span class="line">    R3((17))--&gt;C[[7]]</span><br><span class="line">    R3((17))--&gt;F[[10]]</span><br><span class="line"></span><br><span class="line">    G[[21]]</span><br></pre></td></tr></table></figure><p>继续，从 19、11、32、17、21 中选择最小的 11 和 17 这两个树的根结点，计算两个结点的和 28 作为组合树的根结点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    A[[19]]</span><br><span class="line"></span><br><span class="line">    R2((11))--&gt;R((5))</span><br><span class="line">    R2((11))--&gt;B[[6]]</span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    E[[32]]</span><br><span class="line"></span><br><span class="line">    R3((17))--&gt;C[[7]]</span><br><span class="line">    R3((17))--&gt;F[[10]]</span><br><span class="line"></span><br><span class="line">    R4((28))--&gt;R2((11))</span><br><span class="line">    R4((28))--&gt;R3((17))</span><br><span class="line"></span><br><span class="line">    G[[21]]</span><br></pre></td></tr></table></figure><p>然后，从 19、32、28、21 中选择最小的 19 和 21 这两个叶子结点，计算两个结点的和 40 形成一棵新的树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    R2((11))--&gt;R((5))</span><br><span class="line">    R2((11))--&gt;B[[6]]</span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    E[[32]]</span><br><span class="line"></span><br><span class="line">    R3((17))--&gt;C[[7]]</span><br><span class="line">    R3((17))--&gt;F[[10]]</span><br><span class="line"></span><br><span class="line">    R4((28))--&gt;R2((11))</span><br><span class="line">    R4((28))--&gt;R3((17))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    R5((40))--&gt;A[[19]]</span><br><span class="line">    R5((40))--&gt;G[[21]]</span><br></pre></td></tr></table></figure><p>接下来，从 32、28、 40 中选择最小的 32 和 28 这两个结点，求和 60 构成一棵树，根结点为60：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    R2((11))--&gt;R((5))</span><br><span class="line">    R2((11))--&gt;B[[6]]</span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    R3((17))--&gt;C[[7]]</span><br><span class="line">    R3((17))--&gt;F[[10]]</span><br><span class="line"></span><br><span class="line">    R4((28))--&gt;R2((11))</span><br><span class="line">    R4((28))--&gt;R3((17))</span><br><span class="line"></span><br><span class="line">    R6((60))--&gt;E[[32]]</span><br><span class="line">    R6((60))--&gt;R4((28))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    R5((40))--&gt;A[[19]]</span><br><span class="line">    R5((40))--&gt;G[[21]]</span><br></pre></td></tr></table></figure><p>最后把剩下的 40 和 60 两个结点连在一起，和为100就得到了一颗哈夫曼树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    R2((11))--&gt;R((5))</span><br><span class="line">    R2((11))--&gt;B[[6]]</span><br><span class="line">    R((5))--&gt;D[[3]]</span><br><span class="line">    R((5))--&gt;H[[2]]</span><br><span class="line"></span><br><span class="line">    R3((17))--&gt;C[[7]]</span><br><span class="line">    R3((17))--&gt;F[[10]]</span><br><span class="line"></span><br><span class="line">    R4((28))--&gt;R2((11))</span><br><span class="line">    R4((28))--&gt;R3((17))</span><br><span class="line"></span><br><span class="line">    R6((60))--&gt;E[[32]]</span><br><span class="line">    R6((60))--&gt;R4((28))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    R5((40))--&gt;A[[19]]</span><br><span class="line">    R5((40))--&gt;G[[21]]</span><br><span class="line"></span><br><span class="line">    R7((100))--&gt;R6((60))</span><br><span class="line">    R7((100))--&gt;R5((40))</span><br></pre></td></tr></table></figure><p>按照上面的定义来算，这颗二叉树的带权路径长度为：</p><blockquote><p>WPL = 2 <em> (32 + 19 + 21) + 4 </em> (6 + 7 + 10) + 5 * (3 + 2) = 261</p></blockquote><p>其实还有另一种计算带权路径长度的方法，那就是把除根结点以外的所有数字都加起来：</p><blockquote><p>WPL = 60 + 40 + 28 + 32 + 19 + 21 + 11 + 17 + 5 + 6 + 7 + 10 + 3 + 2 = 261</p></blockquote><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>我们用统计数量的字母来替换频数，然后在树的左右指针上分别标上数字就可以得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line"></span><br><span class="line">    R2((11))--0--&gt;R((5))</span><br><span class="line">    R2((11))--1--&gt;B[[b]]</span><br><span class="line">    R((5))--0--&gt;D[[d]]</span><br><span class="line">    R((5))--1--&gt;H[[h]]</span><br><span class="line"></span><br><span class="line">    R3((17))--0--&gt;C[[c]]</span><br><span class="line">    R3((17))--1--&gt;F[[f]]</span><br><span class="line"></span><br><span class="line">    R4((28))--0--&gt;R2((11))</span><br><span class="line">    R4((28))--1--&gt;R3((17))</span><br><span class="line"></span><br><span class="line">    R6((60))--1--&gt;E[[e]]</span><br><span class="line">    R6((60))--0--&gt;R4((28))</span><br><span class="line"></span><br><span class="line">    R5((40))--0--&gt;A[[a]]</span><br><span class="line">    R5((40))--1--&gt;G[[g]]</span><br><span class="line"></span><br><span class="line">    R7((100))--0--&gt;R6((60))</span><br><span class="line">    R7((100))--1--&gt;R5((40))</span><br></pre></td></tr></table></figure><p>至此我们就可以给出编码了呀，从根结点走到每个叶子结点路径上经过的0和1就是编码内容，编码表如下：</p><blockquote><p>a–&gt;10<br>b–&gt;0001<br>c–&gt;0010<br>d–&gt;00000<br>e–&gt;01<br>f–&gt;0011<br>g–&gt;11<br>h–&gt;00001</p></blockquote><p>要想等长编码这8个字母最少需要4个bit，采用哈夫曼编码以后最少用2bit，最多用5bit，这是考虑了出现频率以后的结果，在传输大量数据的时候，采用哈夫曼编码会是一个更优的解决方案。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>树的带权路径长度是指树的所有叶子结点的带权路径长度之和，简称WPL</li><li>当使用已知结点作为叶子结点，用其构造的所有树中，带全路径长度最小的树被称为最优二叉树，也就是哈夫曼树</li><li>哈夫曼树可以用来编码，采用哈夫曼编码后的信息可以可以使空间利用更加高效</li><li>哈夫曼树的构造并不是唯一的，相同的权值结点完全可以构造出不同形态的哈夫曼树，甚至连高度都不同</li><li>哈夫曼编码还保证了长编码不与短编码冲突的的特点，这个后续有时间我们再聊</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/121072796" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>埋下高昂的头颅，为一飞冲天的壮举积蓄力量，我就在这静静的等，期待你的绽放~</p><p>2021-11-12 00:42:33</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;树的所有叶子结点的带权路径长度之和，称为树的带权路径长度，英文缩写为 &lt;code&gt;WPL&lt;/code&gt;，从百度百科中得到的信息为 “树的带权路径长度（weighted path length of tree）是2018年公布的计算机科学技术名词”，这就有点奇怪了，这个词印象中在大学课本里学过啊，怎么会是2018年的名词呢？难道我穿越了？&lt;/p&gt;
&lt;p&gt;我赶紧找来严蔚敏、吴伟民老师编著的《数据结构》翻开来看，在2009年9月第30次印刷的图书的144页中，明确的用加粗字体描述了这样个概念：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;树的带权路径长度为树中所有叶子结点的带权路径之和，通常记作 WPL = …&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://AlbertGithubHome.github.io/blog/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A0%91/"/>
    
      <category term="WPL" scheme="http://AlbertGithubHome.github.io/blog/tags/WPL/"/>
    
      <category term="哈夫曼树" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    
      <category term="带权路径长度" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%B8%A6%E6%9D%83%E8%B7%AF%E5%BE%84%E9%95%BF%E5%BA%A6/"/>
    
  </entry>
  
  <entry>
    <title>MD5是用来加密的吗？BCrypt又是什么呢？</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/10/31/MD5%E6%98%AF%E7%94%A8%E6%9D%A5%E5%8A%A0%E5%AF%86%E7%9A%84%E5%90%97%EF%BC%9FBCrypt%E5%8F%88%E6%98%AF%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/10/31/MD5是用来加密的吗？BCrypt又是什么呢？/</id>
    <published>2021-10-31T10:29:03.000Z</published>
    <updated>2021-10-31T16:25:41.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近经常看到一种关于 <code>MD5</code> 的说法，比如某某系统的登录模块使用了 <code>MD5</code> 加密算法，保证了用户密码的安全。那么 <code>MD5</code> 究竟是不是一种加密算法呢？从概念上来说『加密』对应的是『解密』，我们把数据采用某种方式加密之后，可以在之后的某一时刻进行解密来获得原始数据，照此观点来说 <code>MD5</code> 并不是一种加密算法，它只能把原文加密成密文，而不能将密文解密成原文。但是 <code>MD5</code> 确实把明文变成了不容易被破解的密文，达到了 “加密” 的目的，好像说它可以用来加密勉强也可以。</p><a id="more"></a><p>更准确的说法，<code>MD5</code> 是一种哈希算法，又叫散列算法或者摘要算法，是一类把任意长度数据转换为定长数据的算法统称，它广泛应用于错误检查，经常通过计算 <code>MD5</code> 来检验下载到的文件的完整性，优秀的哈希算法通常需要具有低碰撞概率，<code>MD5</code> 就是其中的一种。</p><h1 id="MD5的八卦"><a href="#MD5的八卦" class="headerlink" title="MD5的八卦"></a>MD5的八卦</h1><blockquote><p>可用于处理密码，是不可逆的</p></blockquote><p>刚刚前面已经提到它可以把原始数据变成定长的摘要信息，而不能把摘要信息再还原成原始数据。就比如 <code>110+119=229</code>，通过原始信息 110 和 119 可以转化成摘要信息229，而已知229却无法知道它是由那两个数相加得到的，当然这个例子只是象征性的，它的碰撞率太高了。</p><p>既然不可逆，那么怎样才能判断密码信息呢？这可以利用比较hash值来判断，我们在注册时计算密码的 <code>MD5</code> 值入库，当玩家登录时再次使用玩家输入的明文密码再次计算 MD5 值，如果一致就验证成功，这就是为什么哈希算法要有低碰撞率了。</p><blockquote><p>MD5现在不太安全了</p></blockquote><p>因为MD5算法是确定，用一个字符串计算出来的哈希值也是固定的，所以出现了一些针对该算法的破解方法。</p><ol><li>暴力枚举法：因为可以不断尝试，并且随着计算机硬件能力的快速提升，使得这种方法来破解短密码称为了可能</li><li>字典法：也就是撞库，黑客通过收集互联网已泄露的用户和密码信息，生成对应的字典表，通过撞库来完成破解</li><li>彩虹表：在字典法的基础上改进，以时间换空间，使用预计算的哈希链集来降低存储空间，是目前最常用的方法</li></ol><blockquote><p>MD5可以为自己代言（带盐）</p></blockquote><p>对于固定的哈希算法，相同的输入会得到相同的输出，那么针对MD5算法只需要准备一个字典或者一个彩虹表就可以一直沿用，如果在原有的密码上加点料，那么即使两个用户使用相同的密码，因为盐不同，得到的输出值也就不同，那么破解难度大大提高了。</p><h1 id="BCrypt加密"><a href="#BCrypt加密" class="headerlink" title="BCrypt加密"></a>BCrypt加密</h1><p>上面说过单独使用MD5加密不太安全，但是加盐以后可以大大提高破解的难度，为什么BCrypt加密火了起来，大有代替MD5的趋势~</p><p>BCrypt 是 Niels Provos 和 DavidMazières 基于 Blowfish 密码设计的，是 OpenBSD 的默认密码哈希算法。 目前有针对 C、C++、Python 、C# 、Java、JS、PHP 等多种编程语言的实现，使用起来非常方便。</p><p>它相对于MD5有哪些优势呢？</p><h2 id="自己加盐"><a href="#自己加盐" class="headerlink" title="自己加盐"></a>自己加盐</h2><p>首先他不用自己来管理用户的“盐”，如果所有的用户使用相同的盐不太安全，每个人生成不同的盐，需要自己单独来存储使用，而BCrypt内部自己实现了随机加盐处理，可以实现每次加密后的密文是不一样的。</p><p>对于同一个密码，Bcrypt每次生成的哈希结果都不一样，那么它是如何进行校验的？</p><p>其实BCrypt算法将盐随机生成并混入最终加密后的密码之中，验证时会自动提取，无需单独提供“盐”信息，生成的Hash值通常格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$2b$12$ABJPtagiuqTVhnIPvOLoB.hbIlZ3joRkpck3joDsX6xe3O2KShuty</span><br></pre></td></tr></table></figure><p>其中 <code>$</code> 为分隔符，<code>2b</code>是bcrypt加密版本号，<code>12</code>是工作负载，紧接着22位是盐，剩下的字符串就是密码的密文了。</p><p>看到这个密码仿佛就是明牌了跟对手打呀，如果你真的获得了加密后的密码，那你就知道了加密版本、工作负载，盐的信息，这样会不会很危险呢？是挺危险的，但是即使你使用MD5加密，那个盐也是要存储的，也会面临同样的问题，另外BCrypt还有其他的法宝。</p><h2 id="工作负载"><a href="#工作负载" class="headerlink" title="工作负载"></a>工作负载</h2><p>BCrypt的工作负载有时也称为加密轮数、成本因子等等（一提到工作负载就想到比特币，数字游戏而已），目的就是提高破解难度，带来的缺点就是速度慢。MD5的Hash值生成通常是微妙级别的，但是Bcrypt一个密码出来的时间比较长，Python环境使用默认12轮负载需要0.25秒生成一个密码（C++环境需要进一步测试）。</p><p>所以如果使用Bcrypt，需要考虑它的成本，负责做认证的服务器，可能在原基础上扩容几十倍或者几百倍，它是靠把计算成本提高多个数量级来换取安全的。</p><h2 id="使用方便"><a href="#使用方便" class="headerlink" title="使用方便"></a>使用方便</h2><p>目前在各大主流编程语言中都可以方便的使用BCrypt相关函数，下面以Python为例：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> bcrypt</span><br><span class="line"></span><br><span class="line">passwd = <span class="string">b'123456nx'</span></span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line">salt = bcrypt.gensalt(<span class="number">12</span>)</span><br><span class="line">pwsd = bcrypt.hashpw(passwd, salt)</span><br><span class="line"></span><br><span class="line">cost = time.time() - start</span><br><span class="line">print(<span class="string">"[salt]"</span>, salt)</span><br><span class="line">print(<span class="string">"[pwsd]"</span>, pwsd)</span><br><span class="line">print(<span class="string">"[cost]"</span>, cost)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[salt] b&apos;$2b$12$lEsQ9dGnRe2vKfFDRUZYAO&apos;</span><br><span class="line">[pwsd] b&apos;$2b$12$lEsQ9dGnRe2vKfFDRUZYAOmmmdlgWfHfNO94C/UqCKGGRioruF77u&apos;</span><br><span class="line">[cost] 0.24636435508728027</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>MD5</code>从严格意义上来说并不是一个加密算法，更准确的说法应该是单向散列算法，因为无法逆向进行解密</li><li>通过 <code>MD5</code> 计算后的密码，可以使用的破解方法有暴力枚举、字典表、彩虹表等，其中<a href="http://project-rainbowcrack.com/table.htm" target="_blank" rel="noopener">《彩虹表》</a>最常用</li><li><code>BCrypt</code>算法可以随机生成盐，并将盐信息混入最终加密后的密码之中，验证时会自动提取</li><li><code>BCrypt</code>算法引入了工作负载机制，生成Hash值的时间大大延长，相应的破解难度也随之增加</li><li><code>BCrypt</code>算法在Python环境下使用默认参数需0.25秒生成一个密码，选用这种方式需考虑时间成本</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/120941471" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>以史为鉴，理解今天，展望未来~<br>时刻准备着，这次的大团圆无需担心，可能某个清晨的早间新闻，你们已经回来了！</p><p>2021-11-1 00:21:44</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近经常看到一种关于 &lt;code&gt;MD5&lt;/code&gt; 的说法，比如某某系统的登录模块使用了 &lt;code&gt;MD5&lt;/code&gt; 加密算法，保证了用户密码的安全。那么 &lt;code&gt;MD5&lt;/code&gt; 究竟是不是一种加密算法呢？从概念上来说『加密』对应的是『解密』，我们把数据采用某种方式加密之后，可以在之后的某一时刻进行解密来获得原始数据，照此观点来说 &lt;code&gt;MD5&lt;/code&gt; 并不是一种加密算法，它只能把原文加密成密文，而不能将密文解密成原文。但是 &lt;code&gt;MD5&lt;/code&gt; 确实把明文变成了不容易被破解的密文，达到了 “加密” 的目的，好像说它可以用来加密勉强也可以。&lt;/p&gt;
    
    </summary>
    
      <category term="加密与认证" scheme="http://AlbertGithubHome.github.io/blog/categories/%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%AE%A4%E8%AF%81/"/>
    
    
      <category term="MD5" scheme="http://AlbertGithubHome.github.io/blog/tags/MD5/"/>
    
      <category term="BCrypt" scheme="http://AlbertGithubHome.github.io/blog/tags/BCrypt/"/>
    
      <category term="Hash" scheme="http://AlbertGithubHome.github.io/blog/tags/Hash/"/>
    
      <category term="单项散列" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8D%95%E9%A1%B9%E6%95%A3%E5%88%97/"/>
    
      <category term="加密算法" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下从路径字符串中截取目录和文件名信息</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/10/24/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BB%8E%E8%B7%AF%E5%BE%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%88%AA%E5%8F%96%E7%9B%AE%E5%BD%95%E5%92%8C%E6%96%87%E4%BB%B6%E5%90%8D%E4%BF%A1%E6%81%AF/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/10/24/linux环境下从路径字符串中截取目录和文件名信息/</id>
    <published>2021-10-24T09:01:30.000Z</published>
    <updated>2021-10-24T13:59:57.825Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前在文章<a href="https://blog.csdn.net/albertsh/article/details/120818017" target="_blank" rel="noopener">《.bat批处理（十）：从路径字符串中截取盘符、文件名、后缀名等信息》</a>中总结了在批处理文件中，也就是Windows环境下怎样从路径字符串中截取文件名、盘符等信息，利用的是Windows的扩展变量，而这种截取路径的需求在linux脚本中也很常见，实现方法相比批处理脚本而言要简单一些，下面列举一下常见的方法。</p><a id="more"></a><h1 id="使用系统命令完成路径截取"><a href="#使用系统命令完成路径截取" class="headerlink" title="使用系统命令完成路径截取"></a>使用系统命令完成路径截取</h1><p>针对于路径的操作很基础，所以在linux环境下提供了专门的命令来完成路径字符串的截取工作，分别是 <code>basename</code> 和 <code>dirname</code>，从名字就可以很容易知道他们的作用，具体的使用方法如下：</p><h2 id="使用-basename-命令获取文件名"><a href="#使用-basename-命令获取文件名" class="headerlink" title="使用 basename 命令获取文件名"></a>使用 basename 命令获取文件名</h2><p>获取文件名时直接在命令后面添加待截取的路径即可，表现如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ basename /mnt/d/data/shell/test.txt</span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><p>在shell脚本的写法通常是这样：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mypath=/mnt/d/data/shell/test.txt</span><br><span class="line"><span class="built_in">echo</span> $(basename <span class="variable">$mypath</span>)</span><br></pre></td></tr></table></figure><p>运行之后得到的带有后缀的文件名，如果想去掉后缀使用 <code>-s</code> 参数指定要去掉的后缀即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ basename -s .txt /mnt/d/data/shell/test.txt</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p><code>-s</code> 选项也可省略，将后缀名直接放到完整路径后面也可以：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ basename /mnt/d/data/shell/test.txt .txt</span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>其实 <code>-s</code> 参数后面不一定非得加后缀名，它就是在结果的末尾去掉匹配的字符串，所以可以指定任何结尾字符：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ basename /mnt/d/data/shell/test.txt xt</span><br><span class="line">test.t</span><br></pre></td></tr></table></figure><h2 id="使用-dirname-命令获取目录名"><a href="#使用-dirname-命令获取目录名" class="headerlink" title="使用 dirname 命令获取目录名"></a>使用 dirname 命令获取目录名</h2><p>顾名思义 <code>dirname</code> 就是获取目录名的命令，直接在命令后面跟上待截取的路径即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ dirname /mnt/d/data/shell/test.txt</span><br><span class="line">/mnt/d/data/shell</span><br></pre></td></tr></table></figure><p>这个命令不仅可以获取文件所在目录，还可以获取目录的上一级目录，实际上它处理的仅仅是字符串，截取的目标字符也是 <code>/</code>，并不要求目录是有效的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ dirname /mnt/d/data/</span><br><span class="line">/mnt/d</span><br></pre></td></tr></table></figure><h1 id="利用变量提取操作完成截取"><a href="#利用变量提取操作完成截取" class="headerlink" title="利用变量提取操作完成截取"></a>利用变量提取操作完成截取</h1><p>通过对 <code>${var}</code> 表达式进行变形可以完成对原变量的部分提取和替换，下面先列举一些主要的截取操作：</p><table><thead><tr><th style="text-align:left">表达式</th><th style="text-align:center">含义</th><th style="text-align:center">示例</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:left"><code>${var}</code></td><td style="text-align:center"><code>var</code>字符串原始值</td><td style="text-align:center"><code>${var}</code></td><td style="text-align:center">^Can you can a can as a canner can can a can$</td></tr><tr><td style="text-align:left"><code>${\#var}</code></td><td style="text-align:center"><code>var</code>字符串的长度</td><td style="text-align:center"><code>${\#var}</code></td><td style="text-align:center">^43$</td></tr><tr><td style="text-align:left"><code>${var:pos}</code></td><td style="text-align:center">在字符串<code>var</code>中从位置pos提取子串</td><td style="text-align:center"><code>${var:30}</code></td><td style="text-align:center">^can can a can$</td></tr><tr><td style="text-align:left"><code>${var:pos:len}</code></td><td style="text-align:center">在<code>var</code>中从位置pos提取长度为len的子串</td><td style="text-align:center"><code>${var:30:5}</code></td><td style="text-align:center">^can c$</td></tr><tr><td style="text-align:left"><code>${var#substr}</code></td><td style="text-align:center">在<code>var</code>左侧删除最短匹配$substr的子串</td><td style="text-align:center"><code>${var#*can a}</code></td><td style="text-align:center">^ can as a canner can can a can$</td></tr><tr><td style="text-align:left"><code>${var##substr}</code></td><td style="text-align:center">在<code>var</code>左侧删除最长匹配$substr的子串</td><td style="text-align:center"><code>${var##*can a}</code></td><td style="text-align:center">^ can$</td></tr><tr><td style="text-align:left"><code>${var%substr}</code></td><td style="text-align:center">在<code>var</code>右侧删除最短匹配$substr的子串</td><td style="text-align:center"><code>${var%can a*}</code></td><td style="text-align:center">^Can you can a can as a canner can $</td></tr><tr><td style="text-align:left"><code>${var%%substr}</code></td><td style="text-align:center">在<code>var</code>右侧删除最长匹配$substr的子串</td><td style="text-align:center"><code>${var%%can a*}</code></td><td style="text-align:center">^Can you $</td></tr></tbody></table><p>好了，知道了这些规则我们就可以利用这些截取规则，来完成截取目录的需求了，下面假设 var 的值为 <code>./d/data/shell/test.txt</code> 开始具体操作。</p><h2 id="截取根目录"><a href="#截取根目录" class="headerlink" title="截取根目录"></a>截取根目录</h2><p>要想截取根目录就是要把第一个 <code>/</code> 后面的内容删除就可以了，使用 <code>${var%%/*}</code> 在<code>var</code>右侧删除最长匹配<code>/*</code>的子串，结果就只剩下 <code>.</code> 了:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ var=<span class="string">"./d/data/shell/test.txt"</span></span><br><span class="line">albert@home-pc:/mnt/d/data/shell$ <span class="built_in">echo</span> <span class="variable">$&#123;var%%/*&#125;</span></span><br><span class="line">.</span><br></pre></td></tr></table></figure><h2 id="截取文件名"><a href="#截取文件名" class="headerlink" title="截取文件名"></a>截取文件名</h2><p>截取文件名需要把最后一个 <code>/</code>前面的内容删除，使用 <code>${var##*/}</code> 在<code>var</code>左侧删除最长匹配 <code>*/</code> 的子串，结果为包含后缀的文件名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ var=<span class="string">"./d/data/shell/test.txt"</span></span><br><span class="line">albert@home-pc:/mnt/d/data/shell$ <span class="built_in">echo</span> <span class="variable">$&#123;var##*/&#125;</span></span><br><span class="line">test.txt</span><br></pre></td></tr></table></figure><h2 id="截取文件后缀"><a href="#截取文件后缀" class="headerlink" title="截取文件后缀"></a>截取文件后缀</h2><p>截取文件名后缀与截取文件名类似，需要包最后一个 <code>.</code> 前面的内容删除，使用 <code>${var##*.}</code> 在<code>var</code>左侧删除最长匹配 <code>*.</code> 的子串，只保留后缀内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ var=<span class="string">"./d/data/shell/test.txt"</span></span><br><span class="line">albert@home-pc:/mnt/d/data/shell$ <span class="built_in">echo</span> <span class="variable">$&#123;var##*.&#125;</span></span><br><span class="line">txt</span><br></pre></td></tr></table></figure><h2 id="截取文件所在的目录"><a href="#截取文件所在的目录" class="headerlink" title="截取文件所在的目录"></a>截取文件所在的目录</h2><p>截取文件坐在目录就是只删除文件名，把文件名前面的 <code>/</code> 包括之前的内容进行保留，使用 <code>${var%/*}</code> 在<code>var</code>右侧删除最短匹配 <code>/*</code> 的子串：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">albert@home-pc:/mnt/d/data/shell$ var=<span class="string">"./d/data/shell/test.txt"</span></span><br><span class="line">albert@home-pc:/mnt/d/data/shell$ <span class="built_in">echo</span> <span class="variable">$&#123;var%/*&#125;</span></span><br><span class="line">./d/data/shell</span><br></pre></td></tr></table></figure><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>假设 var 的值为 <code>./d/data/shell/test.txt</code>，具体实现的表格总结如下：</p><table><thead><tr><th style="text-align:left">需求</th><th style="text-align:center">表达式</th><th style="text-align:center">结果</th></tr></thead><tbody><tr><td style="text-align:left">根目录</td><td style="text-align:center"><code>${var%%/*}</code></td><td style="text-align:center"><code>.</code></td></tr><tr><td style="text-align:left">文件名</td><td style="text-align:center"><code>${var##*/}</code></td><td style="text-align:center"><code>test.txt</code></td></tr><tr><td style="text-align:left">文件后缀</td><td style="text-align:center"><code>${var##*.}</code></td><td style="text-align:center"><code>txt</code></td></tr><tr><td style="text-align:left">文件所在目录</td><td style="text-align:center"><code>${var%/*}</code></td><td style="text-align:center"><code>./d/data/shell</code></td></tr></tbody></table><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>basename</code> 和 <code>dirname</code> 是linux环境下专门截取文件名和目录名的命令工具</li><li>处理文件路径截取的通常使用 <code>${var}</code> 形式的变量提取方法，这种方法很方便，但不仅限于相关目录的处理</li><li>常用截取表达式：文件名 <code>${var##*/}</code>、文件后缀 <code>${var##*.}</code>、文件所在目录 <code>${var%/*}</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/120818017" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>今年的1024和去年一样又是周末，凌晨登陆冰封了4、5年的对战平台账号，看着全部灰色的dota好友列表，再想凑齐所有人一起开黑几乎不可能了。<br>打了半宿输多赢少，还是那个手残的我。出了新的英雄，添了新的装备，面对这个曾经挚爱的游戏感觉有些陌生，历史的车轮不会因为你不关注就会停止，相反，这些“平行世界”总是在向前奔跑着，唯一不变的就是变化~</p><p>2021-10-24 19:46:47</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前在文章&lt;a href=&quot;https://blog.csdn.net/albertsh/article/details/120818017&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《.bat批处理（十）：从路径字符串中截取盘符、文件名、后缀名等信息》&lt;/a&gt;中总结了在批处理文件中，也就是Windows环境下怎样从路径字符串中截取文件名、盘符等信息，利用的是Windows的扩展变量，而这种截取路径的需求在linux脚本中也很常见，实现方法相比批处理脚本而言要简单一些，下面列举一下常见的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="dirname" scheme="http://AlbertGithubHome.github.io/blog/tags/dirname/"/>
    
      <category term="basename" scheme="http://AlbertGithubHome.github.io/blog/tags/basename/"/>
    
      <category term="路径截取" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%B7%AF%E5%BE%84%E6%88%AA%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>.bat批处理（十）：从路径字符串中截取盘符、文件名、后缀名等信息</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/10/16/%E6%89%B9%E5%A4%84%E7%90%86%E4%BB%8E%E8%B7%AF%E5%BE%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%88%AA%E5%8F%96%E7%9B%98%E7%AC%A6%E3%80%81%E6%96%87%E4%BB%B6%E5%90%8D%E3%80%81%E5%90%8E%E7%BC%80%E5%90%8D%E7%AD%89%E4%BF%A1%E6%81%AF/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/10/16/批处理从路径字符串中截取盘符、文件名、后缀名等信息/</id>
    <published>2021-10-16T14:26:35.000Z</published>
    <updated>2021-10-17T15:11:17.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>又是实际开发中的问题，想要截取一个文件路径中的盘符、文件名等信息，第一反应是正则表达式？或者是 <code>split</code> 函数？这些往往都是“高级”语言中才会有的实现方法，对于批处理来说有点“带不动”啊，那么在bat批处理中要怎样处理类似的请求呢？最近找到了两种方法，接下来会逐一展示一下，不过在展示具体的写法前，我们先来看一下 <code>%~dp0</code>的含义。</p><a id="more"></a><h1 id="dp0的含义"><a href="#dp0的含义" class="headerlink" title="%~dp0的含义"></a><code>%~dp0</code>的含义</h1><p>关于 <code>%~dp0</code> 的作用在之前的总结中 <a href="https://blog.csdn.net/shihengzhen101/article/details/52807345" target="_blank" rel="noopener">《.bat批处理（四）：路径相关%cd%和%~dp0的区别》</a> 有提到过，它表示当前运行的批处理文件所在的目录，那么它是一个特殊的变量吗？</p><p>可以说算是吧，这个变量特殊在它是从参数变量 <code>%0</code> 扩展而来的，提到 <code>%0</code> 很多人都会想到它是批处理脚本的第一个参数，表示当前运行的脚本全路径，可以写个脚本试一下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">03</span>:<span class="number">25</span>]</span><br><span class="line">% Get-Content showparams.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">03</span>:<span class="number">31</span>]</span><br><span class="line">% ./showparams.bat good</span><br><span class="line">"D:\data\bat\showparams.bat"</span><br><span class="line">good</span><br></pre></td></tr></table></figure><p>类似的变量还有 <code>1%</code>、<code>2%</code>、<code>3%</code>…. 一直到<code>9%</code>，都依次表示运行批处理脚本时传入的参数，这些变量还有一个本领，那就是支持扩展，写起来花里胡哨的。</p><h1 id="扩展字符串"><a href="#扩展字符串" class="headerlink" title="扩展字符串"></a>扩展字符串</h1><p>扩展字符串是批处理自带的功能，可以实现对表示文件路径的字符串进行特殊的处理，以<code>%0</code> 参数为例，具体功能列举如下：</p><ul><li><code>%~0</code> - 删除路径中的引号</li><li><code>%~f0</code> - 将 %0 扩展到一个完全合格的路径名</li><li><code>%~d0</code> - 将 %0 扩展到一个驱动器号</li><li><code>%~p0</code> - 将 %0 扩展到一个路径</li><li><code>%~n0</code> - 将 %0 扩展到一个文件名</li><li><code>%~x0</code> - 将 %0 扩展到一个文件扩展名</li><li><code>%~s0</code> - 将 %0 扩展的路径只含有短名</li><li><code>%~a0</code> - 将 %0 扩展到文件的文件属性</li><li><code>%~t0</code> - 将 %0 扩展到文件的日期/时间</li><li><code>%~z0</code> - 将 %0 扩展到文件的大小</li><li><code>%~$PATH:0</code> 查找变量<code>0%</code>在路径环境变量<code>$PATH</code>的目录，并将 <code>%0</code> 扩展到找到的第一个完全合格的名称，<code>$PATH</code>未被定义或没找到文件，则结果为空字符串</li></ul><p>当然这个写法也可以进行组合，比如 <code>%~d0</code> 和 <code>%~p0</code> 组合后变成 <code>%~dp0</code> 也就是我们常见的那个变量啦~</p><p>可以将这些变量打印出来看一下具体的值：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">26</span>:<span class="number">17</span>]</span><br><span class="line">% Get-Content showparams.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %~<span class="number">0</span></span><br><span class="line"><span class="built_in">echo</span> %~f0</span><br><span class="line"><span class="built_in">echo</span> %~d0</span><br><span class="line"><span class="built_in">echo</span> %~p0</span><br><span class="line"><span class="built_in">echo</span> %~n0</span><br><span class="line"><span class="built_in">echo</span> %~x0</span><br><span class="line"><span class="built_in">echo</span> %~s0</span><br><span class="line"><span class="built_in">echo</span> %~a0</span><br><span class="line"><span class="built_in">echo</span> %~t0</span><br><span class="line"><span class="built_in">echo</span> %~z0</span><br><span class="line"><span class="built_in">echo</span> %~dp0</span><br><span class="line"><span class="built_in">echo</span> %~nx0</span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">0</span>:<span class="number">26</span>:<span class="number">28</span>]</span><br><span class="line">% .\showparams.bat</span><br><span class="line">"D:\data\bat\showparams.bat"</span><br><span class="line"><span class="function">D:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:</span></span><br><span class="line"><span class="function">\<span class="title">data</span>\<span class="title">bat</span>\</span></span><br><span class="line"><span class="function"><span class="title">showparams</span></span></span><br><span class="line"><span class="function">.<span class="title">bat</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\<span class="title">showparams.bat</span></span></span><br><span class="line"><span class="function">--<span class="title">a</span>--------</span></span><br><span class="line"><span class="function">2021/10/17 00:26</span></span><br><span class="line"><span class="function">156</span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">data</span>\<span class="title">bat</span>\</span></span><br><span class="line"><span class="function"><span class="title">showparams.bat</span></span></span><br></pre></td></tr></table></figure><h1 id="从字符串中截取路径、文件名"><a href="#从字符串中截取路径、文件名" class="headerlink" title="从字符串中截取路径、文件名"></a>从字符串中截取路径、文件名</h1><!-- 132903***********736 --><p>上面的部分解释了<code>%~dp0</code>，同时也知道了这些脚本参数指出扩展语法，如果是普通变量的话就不能使用扩展语法了，那么对于一个普通的包含字符串怎么才能使用扩展语法，截取到想要的部分呢？目前我知道的有两种方法：一种是传参使其变成脚本参数，也就是 <code>%n</code>的形式，另一种方法就是使用 <code>for</code> 语句，接下来分别看一下。</p><h2 id="脚本传参"><a href="#脚本传参" class="headerlink" title="脚本传参"></a>脚本传参</h2><p>普通的字符串无法进行扩展，如果想把这种变量就需要把它们变成脚本参数，这就需要将参数传递给另一个脚本，这样实现起来会将脚本调用变得复杂一些，实际上可以在一个脚本中完成截取工作，类似于C/C++中的函数调用，可以在批处理中使用 <code>call</code> 命令搭配标签实现，具体代码如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">37</span>:<span class="number">54</span>]</span><br><span class="line">% Get-Content extract1.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr="C:/Demo/myproject/example.txt"</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%OriginStr%</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> :extract <span class="variable">%OriginStr%</span></span><br><span class="line"><span class="keyword">goto</span> :eof</span><br><span class="line"></span><br><span class="line">:extract</span><br><span class="line"><span class="comment">rem 获取到文件路径</span></span><br><span class="line"><span class="built_in">echo</span> %~dp1</span><br><span class="line"><span class="comment">rem 获取到文件盘符</span></span><br><span class="line"><span class="built_in">echo</span> %~d1</span><br><span class="line"><span class="comment">rem 获取到文件名称</span></span><br><span class="line"><span class="built_in">echo</span> %~n1</span><br><span class="line"><span class="comment">rem 获取到文件后缀</span></span><br><span class="line"><span class="built_in">echo</span> %~x1</span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">41</span>:<span class="number">25</span>]</span><br><span class="line">% .\extract1.bat</span><br><span class="line">"C:/Demo/myproject/example.txt"</span><br><span class="line"><span class="function">C:\<span class="title">Demo</span>\<span class="title">myproject</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:</span></span><br><span class="line"><span class="function"><span class="title">example</span></span></span><br><span class="line"><span class="function">.<span class="title">txt</span></span></span><br></pre></td></tr></table></figure><p>在这段代码中 <code>:eof</code> 标签是一个默认的标签，表示文件结尾，实际需求中需根据具体要求进行调整。</p><h2 id="for语法扩展"><a href="#for语法扩展" class="headerlink" title="for语法扩展"></a>for语法扩展</h2><p>使用 for 循环是另一种实现方式，因为循环变量也可以支持扩展，可以将需要截取的字符串路径放在循环范围中，然后先循环输出测试下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">46</span>:<span class="number">29</span>]</span><br><span class="line">% Get-Content extract2.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr="C:/Demo/myproject/example.txt"</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%I</span></span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">46</span>:<span class="number">57</span>]</span><br><span class="line">% .\extract2.bat</span><br><span class="line">"C:/Demo/myproject/example.txt"</span><br></pre></td></tr></table></figure><p>在批处理中的循环变量是 <code>%%I</code>的形式，需要两个 % 才可以，后面的变量名可以换成26个字母中的任意一个，并且字母会区分大小写，然后利用这些循环变量就可以进行扩展，然后完成最开始的需求，实现代码如下：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">53</span>:<span class="number">53</span>]</span><br><span class="line">% Get-Content extract2.bat</span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OriginStr="C:/Demo/myproject/example.txt"</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%I</span></span><br><span class="line"></span><br><span class="line"><span class="comment">rem 获取到文件路径</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>dpI</span><br><span class="line"><span class="comment">rem 获取到文件盘符</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>dI</span><br><span class="line"><span class="comment">rem 获取到文件名称</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>nI</span><br><span class="line"><span class="comment">rem 获取到文件后缀</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">%%I</span> <span class="keyword">in</span> (<span class="variable">%OriginStr%</span>) <span class="keyword">do</span> <span class="built_in">echo</span> <span class="variable">%%~</span>xI</span><br><span class="line"></span><br><span class="line"># Albert <span class="built_in">at</span> home-pc <span class="keyword">in</span> D:\data\bat [<span class="number">17</span>:<span class="number">54</span>:<span class="number">01</span>]</span><br><span class="line">% .\extract2.bat</span><br><span class="line">"C:/Demo/myproject/example.txt"</span><br><span class="line"><span class="function">C:\<span class="title">Demo</span>\<span class="title">myproject</span>\</span></span><br><span class="line"><span class="function"><span class="title">C</span>:</span></span><br><span class="line"><span class="function"><span class="title">example</span></span></span><br><span class="line"><span class="function">.<span class="title">txt</span></span></span><br></pre></td></tr></table></figure><p>这种写法的好处就是无需控制标签跳转流程，通过循环命令 for 就可以获取想要的参数，使用起来会方便很多。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>在批处理文件中 <code>%~dp0</code> 表示批处理文件所在的目录，而 <code>%cd%</code> 表示执行命令时所在的目录</li><li>在批处理文件中想要截取目录操作可以使用变量扩展来实现，而变量必须是 <code>%i</code> 的形式，其中的 <code>i</code> 是可以是 <code>a~zA~Z0~9</code></li><li>for 表达式中的循环变量在cmd命令行中是 <code>%i</code> 的形式，而在批处理文件中需要协程 <code>%%i</code> 的形式</li><li>常用的变量扩展有：获取到文件盘符使用 <code>%~d0</code>，获取到文件名称使用 <code>%~n0</code>，获取到文件后缀使用 <code>%~x0</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/120611073" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>反人性需要不断修炼，逆向思维才能战胜人性的弱点，很多时候事情往往不是你想的那样~</p><p>2021-10-17 18:01:07</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;又是实际开发中的问题，想要截取一个文件路径中的盘符、文件名等信息，第一反应是正则表达式？或者是 &lt;code&gt;split&lt;/code&gt; 函数？这些往往都是“高级”语言中才会有的实现方法，对于批处理来说有点“带不动”啊，那么在bat批处理中要怎样处理类似的请求呢？最近找到了两种方法，接下来会逐一展示一下，不过在展示具体的写法前，我们先来看一下 &lt;code&gt;%~dp0&lt;/code&gt;的含义。&lt;/p&gt;
    
    </summary>
    
      <category term="bat" scheme="http://AlbertGithubHome.github.io/blog/categories/bat/"/>
    
    
      <category term="实用工具" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
      <category term="bat" scheme="http://AlbertGithubHome.github.io/blog/tags/bat/"/>
    
  </entry>
  
  <entry>
    <title>C++11中的std::atomic保证的原子性是什么</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/10/13/C-11%E4%B8%AD%E7%9A%84std-atomic%E4%BF%9D%E8%AF%81%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/10/13/C-11中的std-atomic保证的原子性是什么/</id>
    <published>2021-10-13T15:13:54.000Z</published>
    <updated>2021-10-13T15:15:48.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>提到atomic这个词，你首先想到的是什么呢？作为一个长时间混迹于编程世界的菜鸟，我首先想到的一个词是“原子性”，接着飞入脑海的是 “ACID” 这个缩写词组，既然提到了 <code>ACID</code> 我们就来简单的复习一下。</p><p><code>ACID</code> 是指事务管理的4个特性，常见于数据库操作管理中，它们分别是：原子性，一致性，隔离性和持久性。</p><a id="more"></a><ul><li><strong>原子性</strong>（Atomicity）是指事务是一个不可分割的工作单位，事务中的操作要么都执行，要么都不执行。</li><li><strong>一致性</strong>（Consistency）是指事务前后数据的完整性必须保持一致，完全符合逻辑原运算。</li><li><strong>隔离性</strong>（Isolation）是指在多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作数据所干扰，多个并发事务之间要相互隔离，无需感知其他事务的存在。</li><li><strong>持久性</strong>（Durability）是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来即使数据库发生故障也不应该对数据造成损坏。</li></ul><h1 id="C-中的atomic"><a href="#C-中的atomic" class="headerlink" title="C++中的atomic"></a>C++中的atomic</h1><p>原子（atom）是在化学反应中不可分割基本微粒，而编程世界中的原子性也是取自这里的不可分割的含义，不可分割与事务管理中的原子性含义一致，指的是一个操作或者一系列操作只能全都执行或者都不执行，不会只执行其中一部分，那么C++11中引入atomic有什么用？不使用atomic能不能保证原子性呢？</p><p>其实C++11中引入atomic主要还是降低了编程的复杂度，如果不使用atomic同样可以使用锁机制来保证原子性，接下来我们来看看为什么需要原子性。</p><h1 id="一个简单的自增运算"><a href="#一个简单的自增运算" class="headerlink" title="一个简单的自增运算"></a>一个简单的自增运算</h1><p><code>i++</code> 是个再简单不过的语句了，我们可以使用它来做一个计数器，每次自增加1，假设我们有一个工程项目有两条商品生产的流水线，每个流水线生产出一件商品则需要计数器加1，这时我们用两个线程来模拟两条流水线，每个线程函数来调用自增的计数器，来看看有什么问题？</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = argc &gt; <span class="number">1</span> ? atoi(argv[<span class="number">1</span>]) : <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(func, n)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(func, n)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如上所示，执行 <code>g++ -std=c++20 -O0 -pthread main.cpp &amp;&amp; ./a.out 10</code> 命令编译并运行得到结果 <code>i=20</code>，貌似很正常，一共两个线程，每个线程执行10次自增操作，结果就应该是20啊，先别太早下结论，增大自增范围试试。</p><p>执行 <code>g++ -std=c++20 -O0 -pthread main.cpp &amp;&amp; ./a.out 100000</code> 得到结果 <code>i=112831</code>，多次执行发现每次运行结果都不太一样，但是数据范围在 <code>100000~200000</code>，这就有些奇怪了，每个线程执行循环执行一条语句，那么程序结果应该等于 <code>2n</code> 才对，为什么结果总是小于 <code>2n</code> 呢，难道有些循环没有执行？</p><p>其实不是这样的，<code>i++</code>从C++语言的层面来看确实是一条语句，但是真正再和机器打交道时一般会解释成类似于下面这样3条汇编指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// x86 msvc v19.latest</span><br><span class="line">mov     eax, DWORD PTR _i$[ebp]</span><br><span class="line">add     eax, 1</span><br><span class="line">mov     DWORD PTR _i$[ebp], eax</span><br></pre></td></tr></table></figure><p>3条指令的含义可以理解为读取、自增，设置共三步，既然不是真正的一条语句，那么在多线的环境下就会生语句的交叉执行，比如第一个线程执行读取变量i的值之后，第二个线程也读取了变量i的值，这样两个线程都进行后续的自增和设置指令后，会发现比预期的值少了一个，这种情况在循环次数较多时尤为明显。</p><h1 id="通过加锁把自增变为原子操作"><a href="#通过加锁把自增变为原子操作" class="headerlink" title="通过加锁把自增变为原子操作"></a>通过加锁把自增变为原子操作</h1><p>既然每个自增操作可能会被分解成3条指令，那么我们可以加锁来将3条指令捆绑，当一个线程执行自增操作时加锁来防止其他进程“捣乱”，具体修改如下，可以在自增操作前直接加锁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::mutex mt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; l(mt);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) inc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = argc &gt; <span class="number">1</span> ? atoi(argv[<span class="number">1</span>]) : <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point start = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(func, n)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(func, n)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; duration_cost = <span class="built_in">std</span>::chrono::duration_cast&lt;</span><br><span class="line">        <span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; &gt;(<span class="built_in">std</span>::chrono::steady_clock::now() - start);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;  <span class="string">"total cost "</span> &lt;&lt; duration_cost.count() &lt;&lt; <span class="string">" seconds."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>g++ -std=c++20 -O0 -pthread main.cpp &amp;&amp; ./a.out 10000000</code> 命令后运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=20000000</span><br><span class="line">total cost 2.39123 seconds.</span><br></pre></td></tr></table></figure><p>通过加锁，我们已经保证了结果的正确性，但是我们知道加锁的额外消耗还是很大的，有没有其他的方式来实现原子操作呢？</p><h1 id="使用atomic来保证自增的原子性"><a href="#使用atomic来保证自增的原子性" class="headerlink" title="使用atomic来保证自增的原子性"></a>使用atomic来保证自增的原子性</h1><p>其实在C++11之前可以通过嵌入汇编指令来实现，不过自从C++11引入atomic之后，类似的需求变得简单了许多，可以直接使用autmic这个模板类来实现，代码几乎不需要修改，只需将变量 <code>i</code> 改为 <code>atomic&lt;int&gt;</code> 类型，再把锁去掉就可以了，修改后的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; i = <span class="number">0</span>; <span class="comment">// int -&gt; atomic&lt;int&gt;</span></span><br><span class="line"><span class="built_in">std</span>::mutex mt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//std::lock_guard&lt;std::mutex&gt; l(mt);  //remove lock</span></span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) inc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = argc &gt; <span class="number">1</span> ? atoi(argv[<span class="number">1</span>]) : <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">std</span>::chrono::steady_clock::time_point start = <span class="built_in">std</span>::chrono::steady_clock::now();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t1</span><span class="params">(func, n)</span></span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function">thread <span class="title">t2</span><span class="params">(func, n)</span></span>;</span><br><span class="line"></span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"i="</span> &lt;&lt; i &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; duration_cost = <span class="built_in">std</span>::chrono::duration_cast&lt;</span><br><span class="line">        <span class="built_in">std</span>::chrono::duration&lt;<span class="keyword">double</span>&gt; &gt;(<span class="built_in">std</span>::chrono::steady_clock::now() - start);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt;  <span class="string">"total cost "</span> &lt;&lt; duration_cost.count() &lt;&lt; <span class="string">" seconds."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 <code>g++ -std=c++20 -O0 -pthread main.cpp &amp;&amp; ./a.out 10000000</code> 命令后运行结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i=20000000</span><br><span class="line">total cost 1.6554 seconds.</span><br></pre></td></tr></table></figure><p>通过对比可以发现，使用 <code>std::atomic</code> 模板类之后，在保证了结果正确的同时，相比于加锁实现原子性速度上有了明显的提升。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>ACID</code> 是指事务管理中的原子性，一致性，隔离性和持久性4个特性。</li><li>加锁（写锁）的目的通常是将可能同时发生的操作串行化，以此来避免对资源的竞争出现问题</li><li>操作的并行加快了任务的处理速度，而“加锁”使部分操作回归到串行，两者相互配合是为了在<strong>更短</strong>的时间内得到<strong>正确</strong>的结果</li><li><code>std::atomic</code> 降低了原子性操作编程的难度，同时相比于加锁实现原子性还有了性能的提升</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/120245600" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>时光时光慢些吧，不要再让你变老了，我愿用我一切，换你岁月长留~</p><blockquote><p>时间对于每个人来说，都是公平的，真的是这样吗？我觉得未必吧！</p></blockquote><p>2021-10-6 00:32:33–</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;提到atomic这个词，你首先想到的是什么呢？作为一个长时间混迹于编程世界的菜鸟，我首先想到的一个词是“原子性”，接着飞入脑海的是 “ACID” 这个缩写词组，既然提到了 &lt;code&gt;ACID&lt;/code&gt; 我们就来简单的复习一下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ACID&lt;/code&gt; 是指事务管理的4个特性，常见于数据库操作管理中，它们分别是：原子性，一致性，隔离性和持久性。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C/"/>
    
      <category term="C++11" scheme="http://AlbertGithubHome.github.io/blog/tags/C-11/"/>
    
      <category term="atomic" scheme="http://AlbertGithubHome.github.io/blog/tags/atomic/"/>
    
      <category term="原子性" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8E%9F%E5%AD%90%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Dijkstra——通过不断松弛来解决单源最短路径问题的算法</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/09/11/Dijkstra%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87%E4%B8%8D%E6%96%AD%E6%9D%BE%E5%BC%9B%E6%9D%A5%E8%A7%A3%E5%86%B3%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/09/11/Dijkstra——通过不断松弛来解决单源最短路径问题的算法/</id>
    <published>2021-09-11T15:28:12.000Z</published>
    <updated>2021-09-12T15:31:06.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Dijkstra算法又称迪杰斯特拉算法，它采用的是一种贪心的策略，使用广度优先搜索的方式解决带权有向图或者无向图的单源最短路径问题，需要注意的是它不能处理带负边权的情况，核心思想就是“<strong>守住现有阵地不断攻占底盘</strong>”，这一点可以在后面代码实现中慢慢体会，接下来梳理一下算法思路。</p><a id="more"></a><h1 id="Dijkstra思路"><a href="#Dijkstra思路" class="headerlink" title="Dijkstra思路"></a>Dijkstra思路</h1><p>Dijkstra 算法的思路是维护一个点集合 <code>S</code> 和一个用来保存起点 <code>m</code> 到各个顶点到各个顶点最短距离的数组 <code>dis</code>，用邻接数组来表示带权图信息。</p><p>初始情况时，集合 <code>S</code> 中只包括起点<code>m</code>，通过图信息来初始化 <code>dis</code> 数组，将起点 <code>m</code> 可以直接到达的点设置为边的权值，不能到达的点设置为无穷大，比如点 <code>m</code> 到点 <code>n</code> 的距离是d，则 <code>dis[n] = d</code>。</p><p>然后从带权图中选择不在集合<code>S</code> 中的到点 <code>m</code> 距离最近的点，假设为 <code>n</code>，把它加到集合 <code>S</code> 中，然后尝试通过点 <code>n</code> “松弛” 那些不在集合 <code>S</code> 中的点到点 <code>m</code>的距离，更新 <code>dis</code> 数组信息，具体操作就是使用点 <code>n</code> 作为中转，如果距离如果点 <code>m</code> 到任意点 <code>x</code> 通过点 <code>n</code> 中转距离变短了，那么就更新 <code>dis[x]</code> 的值。</p><p>之后不断重复上面的“松弛”操作，直到集合 <code>S</code> 中包含了所有得到顶点，至此就通过Dijkstra算法求解出了从点 <code>m</code> 到图中任意点的最短距离。</p><h1 id="图解实例"><a href="#图解实例" class="headerlink" title="图解实例"></a>图解实例</h1><!--看了上面的关于Dijkstra算法的文字描述可能还是有点蒙，这时候需要画个图来解释一下，对于算法问题，特别是图论方面的算法题，有时候真的是一图胜千言，奈何我真的是不想画图，一方面因为“懒”，另一方面就是图片的搬运比较麻烦，所以对于大部分问题我都是文字描述，但是为了解释这个Dijkstra我还是决定画一画，假如求解从点`a` 到各个顶点的最短距离，初始图信息如下：第一步，我们把点 `a` 添加到集合 `S` 中变为 `S = {a}`，然后初始化dis数组为 `dis = {0, 1, 12, ∞, ∞, ∞}`，加入集合的点用红色表示，操作之后更新如下：第二步，找到距离点 `a` 最近的且不在 `S` 中的点，根据 `dis` 数组计算应该是点 `b`，将点 `b` 添加到集合 `S` 中，通过点 `b` 中转更新 `dis` 数组，dis[c]变为8，dis[d]变为4，更新后集合为 `S = {a, b}`， 距离数组为 `dis = {0, 1, 8, 4, ∞, ∞}`, 图信息如下：第三步，找到距离点 `a` 最近的且不在 `S` 中的点，根据 `dis` 数组计算应该是点 `d`，将点 `d` 添加到集合 `S` 中，通过点 `d` 中转更新 `dis` 数组，dis[e]变为14，dis[f]变为17，更新后集合为 `S = {a, b, d}`， 距离数组为 `dis = {0, 1, 8, 4, 14, 17}`, 图信息如下：第四步，找到距离点 `a` 最近的且不在 `S` 中的点，根据 `dis` 数组计算应该是点 `c`，将点 `c` 添加到集合 `S` 中，通过点 `c` 中转更新 `dis` 数组，dis[e]变为13，更新后集合为 `S = {a, b, d, c}`， 距离数组为 `dis = {0, 1, 8, 4, 13, 17}`, 图信息如下：第五步，找到距离点 `a` 最近的且不在 `S` 中的点，根据 `dis` 数组计算应该是点 `e`，将点 `e` 添加到集合 `S` 中，通过点 `e` 中转更新 `dis` 数组，通过距离判断发现此次不需要更新dis数组，更新后集合为 `S = {a, b, d, c, e}`， 距离数组为 `dis = {0, 1, 8, 4, 13, 17}`, 图信息如下：第六步，找到距离点 `a` 最近的且不在 `S` 中的点，根据 `dis` 数组计算应该是点 `f`，将点 `f` 添加到集合 `S` 中，至此集合 `S` 中包含了所有的顶点，Dijkstra算法执行结束，集合信息为 `S = {a, b, d, c, e, f}`， 距离数组为 `dis = {0, 1, 8, 4, 13, 17}`, 图信息如下：--><p>看了上面的关于Dijkstra算法的文字描述可能还是有点蒙，这时候需要画个图来解释一下，对于算法问题，特别是图论方面的算法题，有时候真的是一图胜千言，奈何我真的是不想画图，一方面因为“懒”，另一方面就是图片的搬运比较麻烦，所以对于大部分问题我都是文字描述，但是为了解释这个Dijkstra我还是决定画一画，假如求解从点<code>a</code> 到各个顶点的最短距离，初始图信息如下：</p><p><img src="https://img-blog.csdnimg.cn/0bdcb09cb6574b32b194e25087c4f9a3.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_0"></p><p>第一步，我们把点 <code>a</code> 添加到集合 <code>S</code> 中变为 <code>S = {a}</code>，然后初始化dis数组为 <code>dis = {0, 1, 12, ∞, ∞, ∞}</code>，加入集合的点用红色表示，操作之后更新如下：</p><p><img src="https://img-blog.csdnimg.cn/51fcb81971eb4d3c8cfdd24ee82e5494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_1"></p><p>第二步，找到距离点 <code>a</code> 最近的且不在 <code>S</code> 中的点，根据 <code>dis</code> 数组计算应该是点 <code>b</code>，将点 <code>b</code> 添加到集合 <code>S</code> 中，通过点 <code>b</code> 中转更新 <code>dis</code> 数组，dis[c]变为8，dis[d]变为4，更新后集合为 <code>S = {a, b}</code>， 距离数组为 <code>dis = {0, 1, 8, 4, ∞, ∞}</code>, 图信息如下：</p><p><img src="https://img-blog.csdnimg.cn/9e3b38dd6ab943979002b646bb79c9e4.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_2"></p><p>第三步，找到距离点 <code>a</code> 最近的且不在 <code>S</code> 中的点，根据 <code>dis</code> 数组计算应该是点 <code>d</code>，将点 <code>d</code> 添加到集合 <code>S</code> 中，通过点 <code>d</code> 中转更新 <code>dis</code> 数组，dis[e]变为14，dis[f]变为17，更新后集合为 <code>S = {a, b, d}</code>， 距离数组为 <code>dis = {0, 1, 8, 4, 14, 17}</code>, 图信息如下：</p><p><img src="https://img-blog.csdnimg.cn/bf9efd1a9f7247318cc3c609af99b46a.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_3"></p><p>第四步，找到距离点 <code>a</code> 最近的且不在 <code>S</code> 中的点，根据 <code>dis</code> 数组计算应该是点 <code>c</code>，将点 <code>c</code> 添加到集合 <code>S</code> 中，通过点 <code>c</code> 中转更新 <code>dis</code> 数组，dis[e]变为13，更新后集合为 <code>S = {a, b, d, c}</code>， 距离数组为 <code>dis = {0, 1, 8, 4, 13, 17}</code>, 图信息如下：</p><p><img src="https://img-blog.csdnimg.cn/4fc4077f20d141ddaf95ab07940c1bb7.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_4"></p><p>第五步，找到距离点 <code>a</code> 最近的且不在 <code>S</code> 中的点，根据 <code>dis</code> 数组计算应该是点 <code>e</code>，将点 <code>e</code> 添加到集合 <code>S</code> 中，通过点 <code>e</code> 中转更新 <code>dis</code> 数组，通过距离判断发现此次不需要更新dis数组，更新后集合为 <code>S = {a, b, d, c, e}</code>， 距离数组为 <code>dis = {0, 1, 8, 4, 13, 17}</code>, 图信息如下：</p><p><img src="https://img-blog.csdnimg.cn/37b5260c109f41d1bdb43bf347d88088.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_5"></p><p>第六步，找到距离点 <code>a</code> 最近的且不在 <code>S</code> 中的点，根据 <code>dis</code> 数组计算应该是点 <code>f</code>，将点 <code>f</code> 添加到集合 <code>S</code> 中，至此集合 <code>S</code> 中包含了所有的顶点，Dijkstra算法执行结束，集合信息为 <code>S = {a, b, d, c, e, f}</code>， 距离数组为 <code>dis = {0, 1, 8, 4, 13, 17}</code>, 图信息如下：</p><p><img src="https://img-blog.csdnimg.cn/17a7704ff3c943b987a7e85b9411b3f2.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_18,color_FFFFFF,t_70#pic_center" alt="Dijkstra_6"></p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>通过上面的图解实例对于Dijkstra的实现应该有了一些思路，那么接下来我们把它转化成代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis = graph[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = dis.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = <span class="number">0</span>; i &lt; n; i++, x = <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find  minimum weight</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (!S.count(j) &amp;&amp; (x == <span class="number">0</span> || dis[j] &lt; dis[x])) x = j;</span><br><span class="line"></span><br><span class="line">        S.insert(x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// relax</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (!S.count(j) &amp;&amp; dis[x] + graph[x][j] &lt; dis[j]) dis[j] = dis[x] + graph[x][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上述代码之后我们便得到了节点0到任意点的最短路径长度数组 <code>dis</code>。</p><p>从上面的分析我们可以知道从点 <code>a</code> 到点 <code>f</code> 的最短路径长度是 17，那么最短路径怎样求呢？</p><p>其实只要在做松弛操作时记录每个节点是从哪个节点松弛得到的就可以了，比如可以使用一个pre数组来记录这个信息，当计算 dis 结束时通过pre数组反推就可以得到最短路径，简单实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; graph)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis = graph[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> n = dis.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(n, <span class="number">0</span>); <span class="comment">// save previous point index</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, x = <span class="number">0</span>; i &lt; n; i++, x = <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// find  minimum weight</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (!S.count(j) &amp;&amp; (x == <span class="number">0</span> || dis[j] &lt; dis[x])) x = j;</span><br><span class="line"></span><br><span class="line">        S.insert(x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// relax</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) <span class="keyword">if</span> (!S.count(j) &amp;&amp; dis[x] + graph[x][j] &lt; dis[j]) &#123;</span><br><span class="line">            dis[j] = dis[x] + graph[x][j];</span><br><span class="line">            pre[j] = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// output path info</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; path&#123;<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span>(path.back() != <span class="number">0</span>) &#123;</span><br><span class="line">        path.push_back(pre[path.back()]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> it = path.rbegin(); it != path.rend(); it++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Dijkstra算法的时间复杂度为<code>O(N^2)</code>，空间复杂度为 <code>O(N)</code>，如果对时间复杂度有更高要求可以使用堆结构进行优化</li><li>Dijkstra是一种求解单源最短路径的算法，在时间复杂度这一项要优于之前所说的 Floyd 算法</li><li>Dijkstra不能处理带负边权的情况，不过实际生活中类似于行车路线、管道铺设等问题都不会有负边权，应用还是比较广泛的</li><li>该算法仔细分析之后还是比较好理解的，不过还是有一些变型和编程技巧，需要在实际问题中灵活变通</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/120148274" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>历史总是惊人的相似，却不会简单的重复。在柯立芝实行了以放任自流的经济政策之后，紧接着便迎来了1929年的大萧条；而在克林顿到小布什任期内采取的经济自由化的政策，引发了之后2008年的国际金融危机；如今我们抬头看看大洋彼岸那疯狂运转的印钞机，这次的泡泡或许很快就能迎来炸裂的时刻~</p><p>2021-9-12 23:29:46</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Dijkstra算法又称迪杰斯特拉算法，它采用的是一种贪心的策略，使用广度优先搜索的方式解决带权有向图或者无向图的单源最短路径问题，需要注意的是它不能处理带负边权的情况，核心思想就是“&lt;strong&gt;守住现有阵地不断攻占底盘&lt;/strong&gt;”，这一点可以在后面代码实现中慢慢体会，接下来梳理一下算法思路。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C/"/>
    
      <category term="Dijkstra" scheme="http://AlbertGithubHome.github.io/blog/tags/Dijkstra/"/>
    
      <category term="算法" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最短路径" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>Floyd-Warshall——仅用4行代码就能解决多源最短路径问题的算法</title>
    <link href="http://AlbertGithubHome.github.io/blog/2021/09/05/Floyd-Warshall%E2%80%94%E2%80%94%E4%BB%85%E7%94%A85%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%B0%B1%E8%83%BD%E8%A7%A3%E5%86%B3%E5%A4%9A%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E7%9A%84%E7%AE%97%E6%B3%95/"/>
    <id>http://AlbertGithubHome.github.io/blog/2021/09/05/Floyd-Warshall——仅用5行代码就能解决多源最短路径问题的算法/</id>
    <published>2021-09-04T16:42:38.000Z</published>
    <updated>2021-09-06T17:25:24.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Floyd-Warshall算法简记Floyd算法，又称弗洛伊德算法，是解决任意两点间的最短路径问题的一种常用算法，核心思想就是“<strong>不断利用第三者影响原配关系</strong>”，这一点在4行核心代码中表现的淋漓尽致，接下来梳理一下算法思路。</p><a id="more"></a><h1 id="Floyd思路"><a href="#Floyd思路" class="headerlink" title="Floyd思路"></a>Floyd思路</h1><p>从A点走到B点要想路径最短只有两种可能，一种就是直接从A到B，另一种就是通过其他点来中转，Floyd的思路就是先把直接能到达的点固定下来，然后不断的尝试从其他点来中转来降低路程。</p><p>Floyd算法实现通常使用一个二维数组来表示任意两点之间的初始距离，每个点到自身的距离为0，若两个点之间没有直接连通，则赋值为 <code>+∞</code>，我们假设这个二维数组是 <code>v</code>，则 <code>v[i][j]</code> 代表了从点 <code>i</code> 到点 <code>j</code> 的初始距离。</p><p>假设不允许中转，那么二维数组 <code>v</code> 中的数据就代表了任意两点间的距离。</p><p>如果允许中转一次，我们假设只允许从节点1进行中转，那么点 <code>i</code> 到点 <code>j</code> 的最近距离最小为 <code>v[i][j]</code> 或者 <code>v[i][1] + v[1][j]</code>，如果 <code>v[i][1] + v[1][j]</code> 的值更小，我们可以使用它来更新 <code>v[i][j]</code> 的值，这时 <code>v[i][j]</code> 就不仅仅是一个值了，而是隐含着 <code>i-&gt;1-&gt;j</code> 这样一条路径，这个过程实际上翻译成代码就是：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        v[i][j] = min(v[i][j], v[i][<span class="number">1</span>] + v[<span class="number">1</span>][j]);</span><br></pre></td></tr></table></figure><p>那么这条路径怎样才能更短呢？</p><p>答案就是引入另一个点，比如我们不仅允许从节点1中转，也允许从节点2中转，从上一步我们知道从从点 <code>i</code> 到点 <code>j</code> 的最短距离是从 <code>i-&gt;1-&gt;j</code> 得到的，实际上经过上面一步，任意两点的距离都是允许从节点1中转条件下的最小值， 那么引入节点2之后就是要看看 <code>v[i][j]</code> 和 <code>v[i][2] + v[2][j]</code> 谁更小一点，然后遍历更新即可，类似的代码可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        v[i][j] = min(v[i][j], v[i][<span class="number">2</span>] + v[<span class="number">2</span>][j]);</span><br></pre></td></tr></table></figure><p>看到套路了没有，就是每个点都作为一个可能中转的点来试一下，整个算法就结束了，好神奇~ 完整4行代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            v[i][j] = min(v[i][j], v[i][k] + v[k][j]);</span><br></pre></td></tr></table></figure><p>简单粗暴又不失美感！</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>初始路径及每条边的距离如图：</p><p><img src="https://img-blog.csdnimg.cn/7a32a9cd366a4d8eaab56d8916b08953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_15,color_FFFFFF,t_70#pic_center" alt="路径"></p><ol><li>翻译成二维数组如下：</li></ol><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">7</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">∞</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">∞</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">∞</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">∞</td><td style="text-align:center">15</td><td style="text-align:center">0</td></tr></tbody></table><ol><li>仅通过节点0作为中转，二维数组更新如下：</li></ol><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">7</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">∞</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">∞</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">13</td><td style="text-align:center">0</td></tr></tbody></table><ol><li>增加节点1作为中转，二维数组更新如下：</li></ol><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">6</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">∞</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">∞</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">12</td><td style="text-align:center">0</td></tr></tbody></table><ol><li>再增加节点2作为中转，二维数组更新如下：</li></ol><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">6</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">17</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">12</td><td style="text-align:center">0</td></tr></tbody></table><ol><li>最后增加节点3作为中转，二维数组更新如下：</li></ol><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">6</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">0</td><td style="text-align:center">4</td><td style="text-align:center">17</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">13</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">12</td><td style="text-align:center">0</td></tr></tbody></table><p>至此我们就求解出了任意两点间的最小距离。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Floyd算法的时间复杂度为<code>O(N^3)</code>，空间复杂度为 <code>O(N^2)</code></li><li>Floyd是一种求解多源最短路径的算法，如果是求解单源最短路径这 N^3 的时间复杂度确实有点伤</li><li>Floyd可以正确处理有向图或存在负权边的图，但不能处理存在负权回路的图的最短路径问题</li><li>4行代码3层循环或许可以助它称为最容易让人理解的最短路径算法</li><li>这4行代码只是一个理想化的模型，实际在编码时要注意加法的越界问题，因为两个无穷大相加理论上是无穷大，但在代码里可能就崩溃了</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/119722553" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>人生到底是追求到达目的地还是准备欣赏沿途的风景，一味地向前奔跑忽略了周围的一切，很多美好的事物就在身边却不自知，我们已经被世俗蒙蔽了双眼，什么时候可以慢下来呢？</p><p>2021-9-7 01:14:05</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Floyd-Warshall算法简记Floyd算法，又称弗洛伊德算法，是解决任意两点间的最短路径问题的一种常用算法，核心思想就是“&lt;strong&gt;不断利用第三者影响原配关系&lt;/strong&gt;”，这一点在4行核心代码中表现的淋漓尽致，接下来梳理一下算法思路。&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++" scheme="http://AlbertGithubHome.github.io/blog/categories/C-C/"/>
    
    
      <category term="C++" scheme="http://AlbertGithubHome.github.io/blog/tags/C/"/>
    
      <category term="算法" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最短路径" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="Floyd" scheme="http://AlbertGithubHome.github.io/blog/tags/Floyd/"/>
    
  </entry>
  
</feed>
