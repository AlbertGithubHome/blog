<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Albert World</title>
  <icon>https://www.gravatar.com/avatar/8ccc6291d5bfd34e7aaf601c4ebec7e1</icon>
  
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="http://AlbertGithubHome.github.io/blog/"/>
  <updated>2023-02-05T08:56:56.277Z</updated>
  <id>http://AlbertGithubHome.github.io/blog/</id>
  
  <author>
    <name>Albert Shi</name>
    <email>347070901@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跟风试试ChatGPT</title>
    <link href="http://AlbertGithubHome.github.io/blog/2023/02/05/%E8%B7%9F%E9%A3%8E%E8%AF%95%E8%AF%95ChatGPT/"/>
    <id>http://AlbertGithubHome.github.io/blog/2023/02/05/跟风试试ChatGPT/</id>
    <published>2023-02-05T08:55:19.000Z</published>
    <updated>2023-02-05T08:56:56.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>其实现在也不算是跟风了，从 <code>ChatGPT</code> 出现至今已经有几个月的时间，这股风似乎已经刮过去了，虽然各种新闻铺天盖地，但因为懒一直没有亲手试一试，这两天尝试了一下，发现要想使用还是有点门槛的，它使用方式很简单，可以把它想象成一个智能机器人，可以回答你的各种提问，当然它比淘宝机器人客服智能多了，它的门槛在于地域限制非常强，中国用户要想使用须得费一番功夫。</p><a id="more"></a><h1 id="什么是ChatGPT"><a href="#什么是ChatGPT" class="headerlink" title="什么是ChatGPT"></a>什么是ChatGPT</h1><p><code>ChatGPT</code> 以其强大的信息整合和对话能力惊艳了全球，是人工智能研究实验室OpenAI新推出的一种人工智能技术驱动的自然语言处理工具，使用了Transformer神经网络架构，也是GPT-3.5架构，能够在输入序列中捕捉长期依赖性。它还使用了大量的语料库来训练模型，这些语料库包含了真实世界中的对话，以便模型能够更好地理解人类语言。</p><h1 id="ChatGPT怎么玩"><a href="#ChatGPT怎么玩" class="headerlink" title="ChatGPT怎么玩"></a>ChatGPT怎么玩</h1><p>要想使用 <code>ChatGPT</code> 主要有以下几步：</p><ol><li>注册 ChatGPT 账号</li><li>完成 ChatGPT 手机号验证后登录</li><li>输入任意话题，探索 ChatGPT 的强大功能</li></ol><h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><ul><li>需要将网络环境切换成国外IP完成整个注册步骤（美国、加拿大、日本等，大陆IP肯定不行，香港澳门 IP 据说也不行）</li><li>访问 <a href="https://chat.openai.com/auth/login" target="_blank" rel="noopener">https://chat.openai.com/auth/login</a> 链接并使用自己的邮箱进行账号注册，我就偷了个懒使用 <code>Microsoft Account</code> 直接登录的</li><li>不管是用邮箱注册，还是第三方账号登录都需要打开邮箱查收 OpenAI 账号验证邮件，并完成邮箱验证</li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><ul><li>登录成功之后需要验证手机号，这一步中国大陆手机号不好使，需要借助短信接码平台 <a href="https://sms-activate.org" target="_blank" rel="noopener">sms-activate.org</a></li><li>具体使用方法比较简单，可以自己试试或者百度一下，其实就是提供一个外国号码给我们验证使用，在网站上可以收验证码，把收到的验证码填到 ChatGPT 平台就可以完成验证了</li><li>使用前需要先用邮箱在 <code>sms-activate.org</code> 注册账号后充值，用支付宝可以自动转汇率充值，佣金2.3%，我充值的这段过年时间好像免佣金</li><li>一般充值0.2美元就可以，因为免佣金我充了0.5，方便以后再用</li><li>选择号码地区时尽量使用印度尼西亚，这个地区验证过了，没有问题</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>直接在最下方的框中输入想问的问题就可以了，下面随便截两个问题，有些问题它还是答不上来的，我曾让它用 Python 画一个猪猪，每次代码生成约10分钟就卡主了，让它画一个兔子结果只画了耳朵。</p><h3 id="设计型"><a href="#设计型" class="headerlink" title="设计型"></a>设计型</h3><p><img src="https://img-blog.csdnimg.cn/8f92a30516954be1b5bc1aca27db583e.png#pic_center" alt="write_game"></p><hr><h3 id="开发型"><a href="#开发型" class="headerlink" title="开发型"></a>开发型</h3><p><img src="https://img-blog.csdnimg.cn/832b39cc853d453c82fc9f1a0bb212e1.png#pic_center" alt="c++"></p><hr><h3 id="强人所难型"><a href="#强人所难型" class="headerlink" title="强人所难型"></a>强人所难型</h3><p><img src="https://img-blog.csdnimg.cn/c2b194eec9eb4d00957f1d3478c311df.png#pic_center" alt="song"></p><h1 id="Python调用ChatGPT"><a href="#Python调用ChatGPT" class="headerlink" title="Python调用ChatGPT"></a>Python调用ChatGPT</h1><p>先去 <a href="https://beta.openai.com/account/api-keys" target="_blank" rel="noopener">https://beta.openai.com/account/api-keys</a> 点击 <code>Create new secret key</code> 按钮创建一个API密钥，然后赋值给下面代码中的 <code>openai.api_key</code> 变量直接运行就可以了</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_openai</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Set your API key</span></span><br><span class="line">    openai.api_key = <span class="string">"YOUR_API_KEY"</span></span><br><span class="line">    <span class="comment"># Use the GPT-3 model</span></span><br><span class="line">    completion = openai.Completion.create(</span><br><span class="line">        engine=<span class="string">"text-davinci-002"</span>,</span><br><span class="line">        prompt=<span class="string">"今天中午吃什么"</span>,</span><br><span class="line">        max_tokens=<span class="number">1024</span>,</span><br><span class="line">        temperature=<span class="number">0.5</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># Print the generated text</span></span><br><span class="line">    print(completion.choices[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    use_openai()</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>ChatGPT</code> 是经过训练的语言模型，以GPT-3.5为基础，其强大的信息整合和对话能力惊艳了全球</li><li><code>ChatGPT</code> 有时很聪明，仿佛是一个拥有了自己的智力，可以应对许多问题，甚至可以直接写代码</li><li><code>ChatGPT</code> 有时却很蠢，特意回避了一些问题，并认为加了一些限制，所以目前来看局限性还很大</li><li><code>ChatGPT</code> 注册登录地址 <a href="https://chat.openai.com/auth/login" target="_blank" rel="noopener">https://chat.openai.com/auth/login</a></li><li><code>ChatGPT</code> 短信验证可使用的第三方平台 <a href="https://sms-activate.org" target="_blank" rel="noopener">https://sms-activate.org</a></li><li><code>ChatGPT</code> 创建密钥地址 <a href="https://beta.openai.com/account/api-keys" target="_blank" rel="noopener">https://beta.openai.com/account/api-keys</a></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/128731058" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>试图窥探整个世界的运行规律，至今一无所获~</p></blockquote><!-->2023-1-31 00:57:05-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;其实现在也不算是跟风了，从 &lt;code&gt;ChatGPT&lt;/code&gt; 出现至今已经有几个月的时间，这股风似乎已经刮过去了，虽然各种新闻铺天盖地，但因为懒一直没有亲手试一试，这两天尝试了一下，发现要想使用还是有点门槛的，它使用方式很简单，可以把它想象成一个智能机器人，可以回答你的各种提问，当然它比淘宝机器人客服智能多了，它的门槛在于地域限制非常强，中国用户要想使用须得费一番功夫。&lt;/p&gt;
    
    </summary>
    
      <category term="AI" scheme="http://AlbertGithubHome.github.io/blog/categories/AI/"/>
    
    
      <category term="python" scheme="http://AlbertGithubHome.github.io/blog/tags/python/"/>
    
      <category term="OpenAI" scheme="http://AlbertGithubHome.github.io/blog/tags/OpenAI/"/>
    
      <category term="人工智能" scheme="http://AlbertGithubHome.github.io/blog/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
      <category term="智能机器人" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%99%BA%E8%83%BD%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Windows10彻底关闭自动更新</title>
    <link href="http://AlbertGithubHome.github.io/blog/2023/02/05/Windows10%E5%BD%BB%E5%BA%95%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/"/>
    <id>http://AlbertGithubHome.github.io/blog/2023/02/05/Windows10彻底关闭自动更新/</id>
    <published>2023-02-05T08:53:53.000Z</published>
    <updated>2023-02-05T08:54:50.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在写这篇总结之前，我已经尝试过多次关闭<code>Win10</code>的自动更新了，一般来说更新之后可以使操作系统更加健壮，但总会有一些原因让我们不想更新，比如我最近总是需要远程操作电脑，如果它临时更新会导致我无法继续使用，所以我一般会关掉更新，然后在一个空闲的时间让他尽情更新个够。</p><a id="more"></a><p>网上有很多关于停止自动更新的文章，有些操作起来比较简单，有些则非常繁琐，但大多数教程都不太好使，很多时候就是临时有效，过段时间就又开始自动更新了，这让我想起了很久之前设计的流氓软件。</p><h1 id="无赖"><a href="#无赖" class="headerlink" title="无赖"></a>无赖</h1><p>一个软件会有一个正常的A进程，然后还有一个默默守护着A进程的B进程，当B进程发现一段时间内A进程不见了，就自动启动A进程，如果担心B进程被发现，还可以搞一个默默守护B进程的C进程，子子孙孙无穷尽也。</p><p>操作系统的自动更新当然不会这么直白，但是禁用之后还能自动启动，说明一定有其他的东西在默默的守护着他，如果找到这些守护者，把他们干掉，自动更新也就被真正禁止了。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="关闭自动更新服务"><a href="#关闭自动更新服务" class="headerlink" title="关闭自动更新服务"></a>关闭自动更新服务</h2><p>按下快捷键 <code>Win+R</code> 打开运行对话框，输入<code>services.msc</code>，点击『确定』按钮或者直接回车打开服务页面</p><p><img src="https://img-blog.csdnimg.cn/3997daa12352465eb471729574b2c31e.png#pic_center" alt="win-update1"></p><p>如图所示，找到 <code>Windows Update</code> 双击打开属性</p><p><img src="https://img-blog.csdnimg.cn/e75a4b851099431c9f16597b2d57a6cd.png#pic_center" alt="win-update2"></p><p>在 <code>Windows Update</code> 属性页面的『常规』选项卡中，将启动类型设置为选择『禁用』，一次点击『停止』『应用』按钮</p><p><img src="https://img-blog.csdnimg.cn/6981925bd9964cde850a3c9931765907.png#pic_center" alt="win-update3"></p><p>我们点击切换到『恢复』选项卡中，将失败后的操作均设置为『无操作』后，点击『应用』按钮</p><p><img src="https://img-blog.csdnimg.cn/d5eb184dbfe64fbfb39db7dadb61371a.png#pic_center" alt="win-update4"></p><p>按照相同的方式处理 <code>Update Orchestrator Service</code> 服务，有些电脑中名字是 <code>更新 Orchestrator  服务</code>，也是按照上面的方法设置『常规』和『恢复』两个选项卡就好。</p><h2 id="关闭自动更新策略"><a href="#关闭自动更新策略" class="headerlink" title="关闭自动更新策略"></a>关闭自动更新策略</h2><p>上面的步骤是很多教程中都提到的，一开始耗时，过一段时间发现又开始自动更新了，所以要按照后面的步骤继续操作一下。</p><p>按下快捷键 <code>Win+R</code> 打开运行对话框，输入<code>gpedit.msc</code>，点击『确定』按钮或者直接回车打开组策略编辑器</p><p><img src="https://img-blog.csdnimg.cn/348414254f2c4d718d3ae65ec4620336.png#pic_center" alt="win-update5"></p><p>依次打开树形结构中『计算机配置』-『管理模板』-『Windows组件』-『Windows更新』，双击打开右侧『配置自动更新』选项</p><p><img src="https://img-blog.csdnimg.cn/0db795e01c614b25ad29dbcf1128ba92.png#pic_center" alt="win-update6"></p><p>在弹出的界面中选择『已禁用』，然后点击『应用』『确定』按钮</p><p><img src="https://img-blog.csdnimg.cn/1aeea34f09a64a3b81e3b8fa51582b59.png#pic_center" alt="win-update7"></p><p>继续在右侧找到『删除使用所有Windows更新功能的访问权限』选项，双击打开</p><p><img src="https://img-blog.csdnimg.cn/1afd215705ce4014a5a069fbde01ec1e.png#pic_center" alt="win-update8"></p><p>在弹出的界面中选择『已启用』，然后点击『应用』『确定』按钮</p><p><img src="https://img-blog.csdnimg.cn/7ed9717b421c4c7d9186b46ab9a4dc3f.png#pic_center" alt="win-update9"></p><p>至此就设置完了，以后Windows10就不会偷偷摸摸的自动更新了</p><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p>我司的电脑上安装有安全监测软件，之前我关闭自动更新服务器时该软件只是给我提示个警告，提醒我要保持自动更新的好习惯，但是当我设置完更新组策略之后，安全软件直接提示我已经高危风险了，并且提示将在10分钟后给我自动断网，说明这次的禁用真的生效了，无奈，为了上网我还是还原了更新组策略的设置。</p><p><img src="https://img-blog.csdnimg.cn/6160d8c31ee045549c1685aa6b7c3788.png#pic_center" alt="win-update10"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>网上的教程虽然多，但要注意甄别，找到好使的方案记下来，方便日后重复操作</li><li>关闭Windows自动更新，不仅要关闭自动更新的服务，还要设置更新组策略，防止死灰复燃</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/128509220" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>得不到的永远在躁动，被偏爱的都有恃无恐~</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在写这篇总结之前，我已经尝试过多次关闭&lt;code&gt;Win10&lt;/code&gt;的自动更新了，一般来说更新之后可以使操作系统更加健壮，但总会有一些原因让我们不想更新，比如我最近总是需要远程操作电脑，如果它临时更新会导致我无法继续使用，所以我一般会关掉更新，然后在一个空闲的时间让他尽情更新个够。&lt;/p&gt;
    
    </summary>
    
      <category term="windows" scheme="http://AlbertGithubHome.github.io/blog/categories/windows/"/>
    
    
      <category term="Win10" scheme="http://AlbertGithubHome.github.io/blog/tags/Win10/"/>
    
      <category term="update" scheme="http://AlbertGithubHome.github.io/blog/tags/update/"/>
    
      <category term="关闭自动更新，自动更新，service" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0%EF%BC%8Cservice/"/>
    
  </entry>
  
  <entry>
    <title>2022年终总结——人生中最美好的一站</title>
    <link href="http://AlbertGithubHome.github.io/blog/2023/02/05/2022%E5%B9%B4%E7%BB%88%E7%BB%93%E2%80%94%E2%80%94%E4%BA%BA%E7%94%9F%E4%B8%AD%E6%9C%80%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%80%E7%AB%99/"/>
    <id>http://AlbertGithubHome.github.io/blog/2023/02/05/2022年终结——人生中最美好的一站/</id>
    <published>2023-02-05T08:51:25.000Z</published>
    <updated>2023-02-05T08:58:29.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有一种责任与压力，叫做上有老下有小，但有一种幸福也叫做上有老下有小，当你遭遇挫折与困难时，这些“老小”以及那个同龄的“她”是你坚实的后盾，同时也是你最后的港湾~</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>2022年已经接近尾声，在经历了多次封控之后终于趁着元旦假期回到老家，和家人聚在了一起，这种平淡的幸福正是我想要的，作为普通平淡的人，我没有拯救世界的梦想，也没达到忧国忧民的高度，我就是芸芸众生中的一员，渴望过着普通而平淡的人生。</p><a id="more"></a><p>我深知这种平凡的生活来之不易，更知许多人为了这份平凡在负重前行，感恩我们这个和平的环境和为了这份和平在努力付出的人，我会好好珍惜。</p><h1 id="回顾2022"><a href="#回顾2022" class="headerlink" title="回顾2022"></a>回顾2022</h1><p>去年依旧设立了不少目标，虽然总体上完成的不太好，但还是要勇敢面对，接下来会逐个回顾一下。</p><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><blockquote><p>FLAG</p><ul><li>继续踏实做好本职工作，做好工作内容的总结，落实到纸上</li><li>学习和了解常见中间件的使用，更多的参与设计的工作</li></ul><p>完成度 ： 90%</p></blockquote><p>个人的性格决定了我不能摆烂，所以对待任何事情都比较认真，对待各项工作也是比较谨慎的，一直在踏踏实实的完成，做好日报记录和周报总结，好记性不如烂笔头，有些问题记录下来再回过头查找时会非常方便。</p><p>时代在发展，落实到纸上已经不单单指的是“纸”，而是一切可以记录新的媒介，电子版的记录还有一个非常大的好处就是查找信息方便，这可以大大加快我们解决问题的速度，不过我读书时还是喜欢写在纸上，不太喜欢电子版的书籍。</p><p>今年工作上有一个比较大的变化就是，从一个被动的执行者转变成了一个初级的管理者，这个身份的转变给我带来了机会，同时也带来了不小的挑战，关于设计工作也一直在进行，因为目前的身份导致我必须做一些决定，所以这部分工作是逃不开的。</p><p>通过一些课程学习和与大佬的沟通的交流后发现，管理重点不在“管”而在“理”，管理者并没有身份上的优越感，而在于合理的分配自己拥有的资源，巧妇难为无米之炊，手上什么也没有，最后肯定完不成任务。</p><p>在管理者的岗位上，自己能调动的一切皆为“资源”，这些包括时间、金钱、合作、甚至是人员，合理的调配这些才能达到最大的效果，否则就会产生浪费，效果也大大折扣。</p><p>这个Flag中的扣分项应该是学习和了解常见中间件的使用，今年确实使用和配置过一些中间件，但是没有好好的系统的学习，这方面后面要加油了。</p><p>今年关于工作上的付出基本达到最大化了，最近一段时间为了阶段性版本，大多数都是后半夜才能回家了，很累，但是并不排斥，我喜欢自己做的东西，为了取得好的结果，目前的付出是值得的。</p><h2 id="学习上"><a href="#学习上" class="headerlink" title="学习上"></a>学习上</h2><blockquote><p>FLAG</p><ul><li>博客总结不能落，继续保持一周一更，完成40篇基础目标</li><li>刷题不用太频繁，每周总得有贡献，不可抗拒因素除外</li><li>建立自己的技能树，搭配工作总结，统计出自己到底会什么</li><li>选取经典开源代码学习，代码量要少一点，毕竟精力有限了</li><li>读书、读书、读书，书都买好了</li></ul><p>完成度 ： 70%</p></blockquote><p>博客总结flag达标，依旧是40篇踩线通过，今年CSDN改变挺大的，但不影响我在上面记录工作学习内容的初衷，40篇博客内容比较基础，大多数来源于工作之中，也有一部分来源与生活需求，简单记录，记忆珍存，以下是近两年的数据对比。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/a3c1985ca04500715bbdc1bf96e6c042.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2021csdn"><br><img src="https://img-blog.csdnimg.cn/14783313ca054a32b757f8891a07624b.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022csdn"><br>今年的博客还诞生了第一篇浏览量过10W的文章，<a href="https://blog.csdn.net/albertsh/article/details/92385277" target="_blank" rel="noopener">《float的精度和取值范围》</a>，目前浏览量到达了117805，这篇总结当初确实花了不少时间，也侧面说明了高质量的文章才能得到粉丝的认可。</p><p>今年的CSDN玩出了不少新花样，特别是与博主的互动上，经常会发一些实体的证书，虽然这些东西不值什么钱，但是对博主来说得到认可还是很开心的。</p><p><img src="https://img-blog.csdnimg.cn/ad5b7fa66d3f4d63990f04aa1ff88752.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="csdn证书"><br>关于刷题这个Flag今年的情况有点拉跨，别说参加比赛了，每周的刷题数也保证不了，时间真的不太够用，虽然这听起来像是在找理由，但确实是客观存在的，毕竟从早上9点工作到凌晨4点，我是真的抽不出时间来刷题了，还是要命的，活着才有未来，噶了就什么都没了。</p><p><img src="https://img-blog.csdnimg.cn/4a551c2c1ca44c68ae4415e5281ca036.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="LeetCode2022"></p><p>建立自己的技能树，这方面已经着手开始做了，目前只列举了一个大概的<a href="http://www.008ct.top/images/knowledgehierarchy.png" target="_blank" rel="noopener">知识框架</a>，今后会随着工作和学习继续补充，主要是总结自己，为今后的职业发展打好基础。</p><p><img src="https://img-blog.csdnimg.cn/d082096395ac4863893dfb4a9edd2058.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022知识框架"><br>读取经典开源代码这个Flag今年完成的最差了，几乎没有什么进展，阅读代码一直被项目牵着走，代码确实没少读，一直在Code Review，完整的开源项目几乎没有读，不过发现了一个 magic_enum 项目还不错，把他按照项目需求改造了一下，目前正在使用。</p><p>读书一直在进行，中间因为身体原因和项目忙的原因暂停过一段时间，不过去年Flag列举的书单都翻了翻，毕竟书都买回来了，但是有些真的不适合精读，比如民法典，有空了翻一翻还是比较有意思的。</p><ul><li>股票大作手回忆录（2022-02-12 22:58:39）<ul><li>顺势而为，不与大盘做对，永远朝着阻力小的方向操作</li></ul></li><li>世界很烦，但你要很可爱（2022-02-28 07:09:45）<ul><li>不管别人对你如何，请记得一定要对自己好一点儿</li></ul></li><li>洛克菲勒写给儿子的38封信<ul><li>商人就是靠创造资源、掠夺他人的资源，甚至逼迫他人转让自己的资源来致富的。</li></ul></li><li>两次全球大危机的比较研究<ul><li>经济发展比较注重效率，收入分配比较关注公平</li></ul></li><li>创华为 —— 任正非传（2022-07-17 11:00:19）<ul><li>你不要说未来有什么贡献，万一活不到未来，未来的贡献和我们没有关系</li></ul></li><li>孙子兵法与三十六计（没看完）<ul><li>历史总是在重演，只有胜利的人才能诉说</li></ul></li><li>世界经济简史（看了一点）<ul><li>原始的经济就不纯粹</li></ul></li><li>民法典（翻阅）<ul><li>没想到这么薄薄的一本干掉了那么多大部头</li></ul></li><li>活着（2022-12-17 11:22:10）<ul><li>生活是属于每个人自己的感受，不属于任何别人的看法</li></ul></li></ul><p>《创华为》是一部任正非的传记，这是继《乔布斯传》之后我读的有一本比较厚的传记书籍了，大佬们的经历总是能鼓舞人心，虽然有些描写我觉得不真实，但是所有的经历不太可能都是伪造的，去伪存真，相信那些正能量的内容。</p><p>《活着》这本书很出名，但是我读了一遍感觉这本书宣传时给我的印象完全不同，整本书的描写朴实无华，就真的像我等小老百姓在村头树下闲聊，很多情景并没有刻意描写，“她死了”——仅仅三个字就断送了别人姓名，并没有更多的叙述。读过之后我并没有觉得富贵有多惨，这就是那个时代的一个缩影，他不仅不惨，而且也经历过很多人没有经历过的幸福，有一个衣食无忧的童年，有一个不离不弃的妻子，经历战乱却活了下来…</p><h2 id="投资上"><a href="#投资上" class="headerlink" title="投资上"></a>投资上</h2><blockquote><p>FLAG</p><ul><li>基金和ETF继续定投，适当配置债券固收</li><li>股票池里把曾经“瞎选”的股票逐渐出清，依旧拥抱大白马，少折腾</li><li>目标收益不太高，8个点，希望不要打脸</li></ul><p>完成度：85%</p></blockquote><p>今年的投资严格按照Flag策略执行，基金和ETF持续定投，目前有周定投和月定投两套策略，中概、恒生、红利还设置了智能条件单，不主动干预，实现被动调仓，只是最后的收益结果没有达标(ಥ_ಥ)</p><p>曾经瞎选的股票也出清了一部分，有一只最多赔了90%的票拿了5年，今年回本之后也卖掉了，所以只要股票不退市都有回本的机会。</p><p>持仓依旧银地保三傻和大白马——万安招富，虽然没挣钱，但今年的回撤控制的还可以，做了一波过山车，4月份感觉股市要崩了，6月份股市要飞了，不仅回本还有了盈利，10月份股市要炸了，12月份又飘起来了，可谓一波三折。</p><p><img src="https://img-blog.csdnimg.cn/49493ec0b75a4f3ea24b89a43c390832.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022投资"></p><p>本来在2021年已经预测2022在加息周期中，能保住本金就可以了，没想到又遭遇俄乌战争，疫情反复，股市受到了比较大的冲击，不过结果还是不错的，虽然Flag想达到8%，最终收益达到了6.72%，也还可以接受，不过基金和ETF有点浮亏，吃掉了股票的部分收益，整体上略有盈余。</p><h2 id="生活上"><a href="#生活上" class="headerlink" title="生活上"></a>生活上</h2><blockquote><p>FLAG</p><ul><li>疫情结束了多回几次老家吧，去看看那些想我又不愿说出口的亲人</li><li>注重身体的保养，锻炼提上日程，降低亮红灯的指标</li></ul><p>完成度60%</p></blockquote><p>生活上的Flag是完成的最差的，本来想今年疫情结束多回几次老家，结果今天封闭的时间最长，刚刚统计完2022年算上春节假期一共回家14天，达到了历史最低值。</p><p>身体的保养和锻炼更是拉跨，年初的时候因为胸腔疼痛，3、4月份吃了两个月的中药来调理，医生告诉我不要熬夜，晚上10点准时睡觉，这几乎是不可能完成的任务，每天有太多的事情需要忙了，不过今年体检各项指标比较稳定，注意血压、视力和肝脏。</p><p>有趣的是这个中医岁数不大，但是找他看病的人很多，每次门诊都持续到晚上12点钟，医生门诊持续到12点这还是我第一次遇到，所以我每次挂号都看一下时间，大概每次都赶在周六晚上9点去找他，当有一次他告诉我要10点钟睡觉时，我反问还在忙碌的他为什么不10点睡，他只说了一句：“你比我幸福”。其实就是生活所迫呗，他因为工作无法按时睡觉，我又何尝不是呢？</p><p>今年陪娃的时间不太多，娃娃也顺利的上了幼儿园，认识了很多小伙伴，虽然因为疫情只上了1个多月，但每天还是开开心心的。我因为有两个月封控在家，在一起相处的时间还蛮多的，但是也在忙于工作，居家办公导致生活和工作融在一起，无法分割，个人不太喜欢长时间处在这种环境下，还是喜欢公司办公，回家陪娃的日子。</p><p><img src="https://img-blog.csdnimg.cn/ce62daf422b44245899491810d55e7d4.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022花草"></p><p><img src="https://img-blog.csdnimg.cn/f2a844cb01e64694978d44c0eb052cc9.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022花草2"></p><p>去年总结中提到的那批多肉，今年一年过得不错，长势喜人，已经成了我的小花园中重要的组成部分，今年12月初的时候又买了一批，还买了几颗文竹，结果花盆到了、营养土到了，这都新年了多肉和文竹还没到，看来得等到春天才能发货了。</p><h1 id="展望2023"><a href="#展望2023" class="headerlink" title="展望2023"></a>展望2023</h1><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>适应自己身份的转变，提升自己的管理技能，做一名合格的管理者</li><li>继续做好本职可开发工作，做好工作内容的总结，推动新项目顺利上线</li><li>根据自己的技能树框架，查漏补缺，有针对性的学习和探索</li></ul><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul><li>继续博客总结，40篇是基础线，2023要超过这个值，尽量一周一篇，放假可休息</li><li>新的一年依旧很忙，刷题不强制要求，每周最好有贡献，每月必须有输出</li><li>在现有的技能树框架上继续丰富，做到枝繁叶茂，试试找点副业</li><li>开源代码还是以项目为驱动，选取经典实现，比如kafka</li><li>继续读书，今年书也买好了，数量不多，下半年应该还会买一批</li></ul><p><img src="https://img-blog.csdnimg.cn/bf7a7540f0e8452eb7ae89bea39fe9d5.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022读书"></p><h2 id="投资"><a href="#投资" class="headerlink" title="投资"></a>投资</h2><ul><li>定投和智能条件单保持现状，ETF追加1~2个新的行业赛道</li><li>股票池还有几个垃圾票要找机会清理掉，手里的价投股票适当做做趋势</li><li>保持对新年经济的乐观，目标收益10个点</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>疫情放开了，有事没事都趁着假期回家看看</li><li>身体很重要，锻炼的很费时，中和一下，可以跳跳绳</li><li>周末了陪娃耍一耍，工作尽量不占用周末的时间</li></ul><p><img src="https://img-blog.csdnimg.cn/3498339b668148a5a3b56452a64badc2.jpeg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9hbGJlcnRnaXRodWJob21lLmdpdGh1Yi5pby9ibG9nL2Fib3V0,size_14,color_FFFFFF,t_70#pic_center" alt="2022生活"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>旧的一年虽然看起来很拉跨，但我认为是人生中最美好的一站，因为照片人上的人都还在，而我也在成长</li><li>新的一年稳中向好，不盲目乐观，也不宜过分悲观，投资环境应该会转好</li><li>身体方面自己要多注意，有些情况并不是自己要熬夜，其实多为生活所迫，若衣食无忧，谁甘愿拼搏</li><li>珍惜周末时光，珍惜和家人在一起的日子，收起自己的坏脾气</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/128432753" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>往昔总是回忆情，未来光景亦可期。<br>若问此生弥珍贵，还看今朝不分离。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;有一种责任与压力，叫做上有老下有小，但有一种幸福也叫做上有老下有小，当你遭遇挫折与困难时，这些“老小”以及那个同龄的“她”是你坚实的后盾，同时也是你最后的港湾~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;2022年已经接近尾声，在经历了多次封控之后终于趁着元旦假期回到老家，和家人聚在了一起，这种平淡的幸福正是我想要的，作为普通平淡的人，我没有拯救世界的梦想，也没达到忧国忧民的高度，我就是芸芸众生中的一员，渴望过着普通而平淡的人生。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://AlbertGithubHome.github.io/blog/categories/Thinking/"/>
    
    
      <category term="总结" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="工作" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="学习" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活，投资" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%94%9F%E6%B4%BB%EF%BC%8C%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>圣诞平安夜了还要继续敲代码吗</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/12/25/%E5%9C%A3%E8%AF%9E%E5%B9%B3%E5%AE%89%E5%A4%9C%E4%BA%86%E8%BF%98%E8%A6%81%E7%BB%A7%E7%BB%AD%E6%95%B2%E4%BB%A3%E7%A0%81%E5%90%97/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/12/25/圣诞平安夜了还要继续敲代码吗/</id>
    <published>2022-12-24T16:26:13.000Z</published>
    <updated>2022-12-24T17:44:05.206Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此时不敲，更待何时~</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先不说圣诞节算不算我们的节日，单纯就节日还要不要敲代码这个问题来说，每个程序猿/媛都有自己的答案。如果说你把工作敲代码当做一种负担，那么节假日正好可以作为自己休息的理由，好好休息一下也是不错的选择；如果把敲代码作为一种乐趣，那么节假日难得清净，少了很多杂事的打扰，正好是敲代码的黄金时间段，想一下自己的状态很容易就应该明白了。</p><a id="more"></a><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="节日"><a href="#节日" class="headerlink" title="节日"></a>节日</h2><p>圣诞节很明显不是我们的传统节日，应该被归为“洋节”一类，有些人对这些外来节日特别喜欢，同时也有人对此特别排斥，每个人都有自己的理由，其实不止是对这些节日，人们对于其他任何事物都存在着截然相反的评价，这些评价通常是基于自身利益、过往经验而给出的，它代表了每个人的想法，这些想法不是一成不变的，随着时间的推移，人们对它的评价甚至会走到相反的对立面。</p><p>其实我觉得不必过分排斥这些节日，一些人推崇这些节日自然有他们的目的，比如一些商家为了销售业绩往往会推一些节日活动，如果我们也能在这些活动中获得优惠，那么何乐而不为呢？</p><p>无论是中国节还是“洋节”出现的原因基本都是用来纪念一些事件或者寄托某种情感的，但是节日的这些属性在如今这个快节奏的社会环境下渐渐淡化，人们更多的是希望在节日假期中能好好的放松一下。</p><h2 id="代码与技术"><a href="#代码与技术" class="headerlink" title="代码与技术"></a>代码与技术</h2><p>写代码对我来说算是一种爱好，没有达到痴迷的程度，但是有空了还是想随便写点东西，不过今天只写了一点点，毕竟今天周末，多花了点时间陪伴家人，最近一段时间太忙了，心中总是有所亏欠，暂时停下来歇一歇。</p><p>每次进入新的领域时总是一头雾水，当渐渐入门以后便会发现一些规律，最近发现linux中也有很多蹭热度的命令，比如 <code>ls</code> 这个命令实在太常用了，可以展示指定目录下的所有文件，<code>lscpu</code>、<code>lsgpu</code>、<code>lsmem</code>、<code>lspci</code>、<code>lsusb</code> 这些命令的出现我觉得就是在蹭 <code>ls</code> 的热度。</p><p>除了 <code>ls</code> 还有一个 <code>top</code> 命令用来展示正在运行的进程信息，<code>iftop</code>、<code>iotop</code>、<code>htop</code>、<code>atop</code> 这些命令自然是蹭了它的热度，起一个相似度很高的名字，然后便于自己推广。</p><p>上面 <code>ls</code> 和 <code>top</code> 两个被蹭热度的命令，与后续命令还有有相似的功能，比如 <code>ls</code> 展示目录下的所有文件，而 <code>lscpu</code> 是用来展示 cpu 信息的，那么 “ls” 变成了一个基础功能的代表，就是用来展示信息，类似于英语中的词根，以及汉字中的偏旁。</p><p>而编程语言的历史上，还有一对完全为了蹭热度没有任何关系的语言，那就是 java 和 javascript 语言，javascript 在当时为了推广自己蹭了流行语言 <code>java</code> 的热度，它俩实际的关系就像是周杰和周杰伦的关系，仅仅是名字长得像罢了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>ls</code> 家族有 <code>lscpu</code>、<code>lsgpu</code>、<code>lsmem</code>、<code>lspci</code>、<code>lsusb</code> 等命令</li><li><code>top</code> 家族有 <code>iftop</code>、<code>iotop</code>、<code>htop</code>、<code>atop</code> 等命令</li><li>把写代码当做一种兴趣爱好，其实没有什么节假日，想写就写咯</li></ul><center><a href="https://blog.csdn.net/albertsh/article/details/128367971" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>当下的今天就是最好的，我不想回退到之前人生中的任何一个时间点。我一直有这种感觉，今天是最好的，所以珍惜现在拥有的一切，我不想让自己产生回退到过去的想法，因为那样肯定是发生了痛苦的事情。恰好今天和她看了《想见你》这部穿越剧，更加深了我的这种想法，今天就是最好的。</p><p>2022-12-25 01:37:25</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此时不敲，更待何时~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先不说圣诞节算不算我们的节日，单纯就节日还要不要敲代码这个问题来说，每个程序猿/媛都有自己的答案。如果说你把工作敲代码当做一种负担，那么节假日正好可以作为自己休息的理由，好好休息一下也是不错的选择；如果把敲代码作为一种乐趣，那么节假日难得清净，少了很多杂事的打扰，正好是敲代码的黄金时间段，想一下自己的状态很容易就应该明白了。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://AlbertGithubHome.github.io/blog/categories/Thinking/"/>
    
    
      <category term="工作" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="学习" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="生活" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="节日" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%8A%82%E6%97%A5/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的安装与常用配置</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/12/19/Nginx%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/12/19/Nginx的安装与常用配置/</id>
    <published>2022-12-18T17:11:36.000Z</published>
    <updated>2022-12-18T18:19:44.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，出镜率很高，从2004年发布至今，凭借开源的力量，日趋完善。其占用内存少、并发能力强、并且Nginx 是免费的还可以商业化，配置使用也比较简单。</p><a id="more"></a><h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>Nginx 可以用作正向代理和反向代理，而在做反向代理时，能提供性能稳定，且配置灵活的转发功能</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>Nginx 对于负载均衡策略提供了内置策略和扩展策略。内置策略有轮询，加权轮询，IP哈希。而扩展策略，就可以随心所欲了，只要遵循规则就可以搞出各种花样。</p><h2 id="静态资源服务"><a href="#静态资源服务" class="headerlink" title="静态资源服务"></a>静态资源服务</h2><p>Nginx 可以通过本地文件系统提供服务</p><h2 id="web缓存服务器"><a href="#web缓存服务器" class="headerlink" title="web缓存服务器"></a>web缓存服务器</h2><p>Nginx 可以对不同的文件做缓存处理，配置灵活，支持FastCGI_Cache，可用于对 FastCGI 的动态程序进行缓存。配合着第三方的ngx_cache_purge可以对制定的URL缓存内容进行增删管理。</p><hr><h1 id="插播快讯"><a href="#插播快讯" class="headerlink" title="插播快讯"></a>插播快讯</h1><p>本来今天打算总结一下Nginx的安装和使用的，结果中午的几个未接电话打破了宁静，游戏居然进不去了，看到几个未接电话就觉得不妙了，了解完情况才知道居然是阿里云香港C区的服务器挂了，本来觉得很快就能恢复，但随着时间的推移和官方的不表态，渐渐发现事情没有这么简单，虽然在过去好几个小时以后更新了公告，但这反应速度也太慢了。</p><p>现在已经过去了10多个小时（2022-12-18 10:47:22开始），尽管最新的公告说机房已经恢复，产品功能还在陆续恢复，但我们的游戏现在（2022-12-19 02:10:06）依旧处于停服状态，目前的云服务器依旧不可用，我还在等实在是写不下去了，关于Nginx的使用后面再补充吧，现在只希望云服务器能快点恢复。</p><blockquote><p>【已恢复】阿里云香港地域电讯盈科机房制冷设备故障<br>尊敬的客户：<br>   您好！阿里云监控发现香港地域某机房设备异常，影响香港地域可用区C的云服务器ECS、云数据库PolarDB等云产品使用，阿里云工程师已在紧急处理中，非常抱歉给您的使用带来不便，若您有任何问题，请随时联系我们。<br>—进展更新—<br>尊敬的客户：<br>   您好！经排查，阿里云香港地域故障确认系香港PCCW机房制冷设备故障所致，影响香港地域可用区C的云服务器ECS、云数据库、存储产品（对象存储、表格存储等）、云网络产品（全球加速、NAT网关、VPN网关等）等云产品使用。这一故障也影响了香港地域控制台访问和API调用操作，目前阿里云工程师在配合PCCW机房工程师加速处理，部分制冷设备正在恢复中。非常抱歉给您的使用带来不便。若您有任何问题，请随时联系我们。<br>—进展更新—<br>尊敬的客户：</p><h2 id="您好！目前阿里云所租用的香港电讯盈科公司机房已修复制冷设备故障，阿里云香港地域所有可用区云产品功能正在陆续恢复正常。对于受本次故障影响的产品，阿里云将根据相关产品的SLA协议进行赔付。非常抱歉给您的使用带来的不便-，若您有任何问题，请随时联系我们。"><a href="#您好！目前阿里云所租用的香港电讯盈科公司机房已修复制冷设备故障，阿里云香港地域所有可用区云产品功能正在陆续恢复正常。对于受本次故障影响的产品，阿里云将根据相关产品的SLA协议进行赔付。非常抱歉给您的使用带来的不便-，若您有任何问题，请随时联系我们。" class="headerlink" title="   您好！目前阿里云所租用的香港电讯盈科公司机房已修复制冷设备故障，阿里云香港地域所有可用区云产品功能正在陆续恢复正常。对于受本次故障影响的产品，阿里云将根据相关产品的SLA协议进行赔付。非常抱歉给您的使用带来的不便 ，若您有任何问题，请随时联系我们。"></a>   您好！目前阿里云所租用的香港电讯盈科公司机房已修复制冷设备故障，阿里云香港地域所有可用区云产品功能正在陆续恢复正常。对于受本次故障影响的产品，阿里云将根据相关产品的SLA协议进行赔付。非常抱歉给您的使用带来的不便 ，若您有任何问题，请随时联系我们。</h2></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Nginx服务器配置方便、高效可靠，可以用作反向代理、负载均衡、静态资源服务、Web缓存服务等</li></ul><center><a href="https://blog.csdn.net/albertsh/article/details/127606837" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>生活是属于每个人自己的感受，不属于任何别人的看法~ 阿根廷夺冠了，虽然我从不看球，但这场比赛真的跌宕起伏，不到最后一秒永远不知道会发生什么~</p><p>2022-12-19 02:14:22</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，出镜率很高，从2004年发布至今，凭借开源的力量，日趋完善。其占用内存少、并发能力强、并且Nginx 是免费的还可以商业化，配置使用也比较简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://AlbertGithubHome.github.io/blog/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://AlbertGithubHome.github.io/blog/tags/Nginx/"/>
    
      <category term="安装" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="负载均衡" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
      <category term="反向代理" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>自动推送消息时附带图片的一种实现方式</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/12/03/%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%B6%88%E6%81%AF%E6%97%B6%E9%99%84%E5%B8%A6%E5%9B%BE%E7%89%87%E7%9A%84%E4%B8%80%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/12/03/自动推送消息时附带图片的一种实现方式/</id>
    <published>2022-12-03T15:24:40.000Z</published>
    <updated>2022-12-04T14:27:23.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文是之前总结 <code>pushplus</code> 使用的这篇文章 <a href="https://blog.csdn.net/albertsh/article/details/127947817" target="_blank" rel="noopener">《借助第三方工具网站完成消息自动推送》</a> 的后续，当时说使用pushplus的微信公众号渠道不允许直接发图片，但是可以将图片链接放到 image 标签中，这就要求我们必须要有一个图床，今天也是从这里开始。</p><a id="more"></a><h1 id="实现途径"><a href="#实现途径" class="headerlink" title="实现途径"></a>实现途径</h1><blockquote><p>注意：请勿使用base64编码的方式把本地图片放到内容中，您可以将本地的图片上传到七牛云等云存储空间上来获取图片的外链地址。</p></blockquote><p>这段内容来自pushplus官网，限制了直接发送图片的方法，并给出了使用图片外链的建议，实现代码非常简单，示例如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post_wechat_msg</span><span class="params">(token)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.pushplus.plus/send'</span></span><br><span class="line">    new_json = &#123;</span><br><span class="line">        <span class="string">"token"</span>: token,</span><br><span class="line">        <span class="string">"title"</span>: <span class="string">"图片示例"</span>,</span><br><span class="line">        <span class="string">"content"</span>: <span class="string">"content"</span>:<span class="string">"这是一张图片&lt;br/&gt;&lt;img src='http://www.pushplus.plus/doc/img/push.png' /&gt;"</span>,</span><br><span class="line">        <span class="string">"topic"</span>: <span class="string">"9caigroup"</span></span><br><span class="line">    &#125;</span><br><span class="line">    result = requests.post(url, json=new_json)</span><br></pre></td></tr></table></figure><p>代码量非常的少，想发别图片就直接修改img标签中的内容就可以了，问题是怎么获取我们图片的外链。</p><h1 id="图床与外链"><a href="#图床与外链" class="headerlink" title="图床与外链"></a>图床与外链</h1><p>如果你没听说过这两个词说明你对建站、发文等了解的比较少，不过也没有关系，这两个词很好理解</p><p>图床：就是放置图片的床，可以理解为图片的仓库，里面存储了很多图片<br>外链：就是访问图床里图片的一个链接，可以通过一个网址读取到想要的图片</p><p>以上面代码中的例子来看，<code>http://www.pushplus.plus/doc/img/push.png</code> 就是图片的外链，图片<code>push.png</code>被放在 <code>http://www.pushplus.plus/doc/img/</code> 这个“图床”下面。</p><p>如果没有自己创建网站或者跨平台转发博文的经历，可能不太理解图床有啥用，我举个例子试着说明一下，假如你在A平台发了一篇技术文章，在文章中需要一些图片来丰富文章内容，你可以把这些图片在A平台的文章中上传。同时你想在另一B平台上也同步这篇文章，此时把A平台上这篇文章完全复制过去是不行的，因为其中的图片是在A平台上传的，A平台作为这些图片的图床一般会给图片加防盗链，这些图片链接复制到B平台上是显示不出来的，这也是为什么之前的新浪博客图片加了防盗链以后，很多平台上的文章图片都挂了的原因。</p><p>现在有一种实现方式就是自己建一个图床，获取得到图片链接就是固定的，也可以限制可以在域名下显示，这样同一篇文章无论是A平台，还是B平台都引用自己图床里的图片，文章同步就方便了很多，但是因为建立自己的图床功能单一，没有cdn加速，维护成本较高，所以一般使用第三方的图床服务，我只用过七牛和Github这两个图床，不过Github有时不太稳定，有需求可以按自己的喜好来选择。</p><h1 id="七牛图床"><a href="#七牛图床" class="headerlink" title="七牛图床"></a>七牛图床</h1><p>说起七牛我用的还比较早，大概在2017年左右就用过了，当时建了一个静态的小破站，需要引用一些图片资源，就了解到了图床与七牛，免费提供10个G的空间，同时可以获取外链，使用比较方便，图片更新有一套方便的API，已经过去5年了，我前两天使用之前的脚本更新时发现还能用，说明还是比较稳定的。</p><p>后来出了一个事情导致我放弃了七牛，转身选择了Github图床。这件事就是七牛的规则调整，曾经使用的外链全都过期，要求必须绑定备案过的域名才能使用，当时替换了文章中所有的图片链接，同时兴冲冲的买了一个域名，结果只有域名是不能备案的，必须还要买服务器，各种要求晕晕乎乎的一直没太弄懂，申请了几次的公安备案也因为资料不全未审核未通过，最后无奈放弃了。</p><blockquote><p>1、测试域名有使用限制，在创建空间的时候自动分配，到期30天会自动回收，因此建议您绑定自己的已备案域名<br>2、根据工信部的有关规定，国内接入cdn服务，域名必须要完成备案</p></blockquote><p>这个是七牛官方给出的解释，起初我认为想要达到这个要求完全不用每个使用者绑定自己的域名，其实这些要求无非就是想让cdn使用者对自己上传和分享的资源负责，禁止传播非法内容，这个要求本身是好的，绑定了自己备案的域名如果出现非法内容，可以立马找到使用者，可是不仅仅只有绑定自己域名这一条实现方式。</p><p>要求七牛给每个使用者分配一个1级域名不太现实，但是可以做成主域名备案，然后给每个使用者分配二级、甚至三级域名，其实这就是一开始提供的测试域名，使用这些域名分享资源的用户要求必须在平台实名，这样再出现非法内容的时候可以定位到个人，也能达到监管的目的，可是为啥平台放弃了测试域名的长期使用，反而要求每个使用者绑定自己域名呢？</p><p>最近和七牛的工程师反复沟通了解到，其实分配给用户的测试域名是合规的，因为它的主域名肯定完成了备案，但是因为有些用户违规使用，这就对这个主域名造成了影响，一些产品可以和社交软件因为该域名分享的图片资源出现过非法内容，可能对这个域名的资源自动屏蔽，这就对正常用户的使用造成了影响，这也是一个平台发展壮大之后必须面临的问题，林子大了什么鸟都有。</p><p>所以七牛把原来提供的域名被定义为测试域名，给30天的使用期限，仅用于调通功能流程，到期自动回收，即使被一些平台限制了也没什么关系，只要确定后续要继续使用，绑定自己的域名就行了，违规使用的用户的不会影响到其他人。</p><p>所以我觉的这件事挺无奈的，如果可以一直使用测试域名，对于使用者无疑是很方便的，对于平台方也降低了用户门槛，便于产品的推广，但是这些美好的愿望总因为一些“极个别人”无法实现了，我们只能接受现实，采用目前这种方案。</p><h1 id="备案流程"><a href="#备案流程" class="headerlink" title="备案流程"></a>备案流程</h1><p>因为最近想要在发送通知消息中增加图片，所以不得不再次使用图床了，你问我为啥不用Github的图床，那是因为微信把它给屏蔽用不了了（捂脸），所以我不得不把目光又转回七牛，经过不懈努力，终于把绑定域名的事情搞定了，记录一下，希望能帮助到有同样需求的人。</p><h2 id="备案前的准备"><a href="#备案前的准备" class="headerlink" title="备案前的准备"></a>备案前的准备</h2><ul><li>购买一个域名</li><li>购买一台云服务器</li><li>搭建好个人网站</li><li>身份证正反照片</li><li>手持身份证的照片</li></ul><h2 id="开始备案"><a href="#开始备案" class="headerlink" title="开始备案"></a>开始备案</h2><p>购买域名推荐阿里云和腾讯云，因为后续备案的流程会有通知提醒，可以免去很多查找资料的麻烦，两个平台我都买过域名，但是只在腾讯云上完成过备案，所有后续的流程也是以腾讯云备案为基础的。</p><p>购买域名需要先实名，腾讯云上购买之前需要先提交实名模板，审核通过后才能买域名，域名的购买和网上购物没啥区别，挑选自己喜欢的加到购物车，然后付款就可以了，购买成功后会有站内信提醒，通知后续的备案流程，这也是比较方便的地方。</p><p>买完域名要买服务器，其实备案不仅仅是对一个域名的备案，而是对这个域名提供的服务内容进行备案，而要提供内容和服务就需要有一台带有外网IP的服务器，然后将域名和服务器进行绑定，统一写到备案内容中，这样你提供的服务和提供服务的这个域名就登记在册了。</p><p>腾讯云买服务器同样跟买菜一样，如果只是为了备案，买一台最低配的就可以了，然后再上面搭建一个简易网站，就可以后续的备案流程了，备案的第一步叫管局备案，也叫工信部备案，也是我们常听说的ICP备案。</p><p>在提交备案资料后，腾讯云会先进行审核，其中要注意规避游戏内容，提及游戏的网站很容易被退回，不同地区的管局对网站内容要求不一样，比如北京地区现在不允许提交个人博客类网站了，这个再提交前先看一下不同地区的限制，手机号和紧急电话必须时刻保持畅通，提交资料后3-4天会有电话确认，按要求修改好审核通过后就会被提交到管局审核。</p><p>提交管局审核之前，要关停域名解析，在审核通过前不允许域名到服务器的解析，提交之后提示20个工作日会收到结果，马上会收到一条短信验证通知，按要求回复后只要等着就可以了，我是在第7天收到的审核通过的通知，速度还是比较快的。</p><p>当ICP备案成功后会得到一个 【京/冀/沪 ICP 备 xxxxxxx 号 - 1】的网站身份证，之后腾讯云站内信会通知在30个工作日内完成公安备案，这是不同于ICP备案的另一种备案流程，这一步要求的内容会比较多，不过好在大平台这些基础信息都是提供好的，目前已经按照流程提交了申请，正在等待审核中，希望不要再出什么差错。</p><h2 id="图床绑定域名"><a href="#图床绑定域名" class="headerlink" title="图床绑定域名"></a>图床绑定域名</h2><p>这一步在完成ICP备案通过之后就可以进行了，参考 <a href="https://developer.qiniu.com/fusion/kb/1322/how-to-configure-cname-domain-name?category=kb" target="_blank" rel="noopener">官方文档 - 如何配置域名的 CNAME</a> 操作就可以了，注意二级域名的命名和使用，步骤并不复杂，我因为拼写错误还耽误了一些时间，绑定成功之后就可以愉快的使用了。</p><h1 id="pushplus发图片的实现"><a href="#pushplus发图片的实现" class="headerlink" title="pushplus发图片的实现"></a>pushplus发图片的实现</h1><ul><li>申请一个七牛图床账号</li><li>将图片上传到七牛平台</li><li>复制图片的外链<ul><li>临时使用可以使用测试域名</li><li>长期使用需要绑定备案域名<ul><li>实名购买一个域名</li><li>购买云服务器，搭建一个网站</li><li>提交资料，完成ICP备案</li><li>在七牛绑定备案好的域名</li></ul></li></ul></li><li>编写发送图片的代码，在img标签中引用图床中图片的外链</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>使用 <code>pushplus</code> 发送微信通知消息时可以使用img标签引用图床外链的方式发送包含图片的消息</li><li>图床可以选择 <code>pushplus</code> 官方推荐的七牛，可以暂时使用测试域名来提供外链，想长久使用可以绑定自己已经备案的域名</li><li>备案域名时需要先买一个域名和云服务器，推荐在阿里云和腾讯云上购买，大平台上购买后的续通知提醒和备案流程会非常顺畅</li><li>对于非盈利性的网站备案需要有ICP备案和公安备案，ICP备案购买域名后平台会帮助进行，而公安备案中需要的信息平台方也会提供</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/128141483" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>神州归家，腾飞中华，眼中所见都是大事，逐渐接受自身的平庸，一个普普通通的人，想要过一段平凡的生活，在柴米油盐中慢慢步入黄昏~</p></blockquote><!-- 神州14号飞船顺利返回- 陈冬、刘洋、蔡旭哲 --><blockquote><p>2022-12-4 21:57:22</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本文是之前总结 &lt;code&gt;pushplus&lt;/code&gt; 使用的这篇文章 &lt;a href=&quot;https://blog.csdn.net/albertsh/article/details/127947817&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《借助第三方工具网站完成消息自动推送》&lt;/a&gt; 的后续，当时说使用pushplus的微信公众号渠道不允许直接发图片，但是可以将图片链接放到 image 标签中，这就要求我们必须要有一个图床，今天也是从这里开始。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://AlbertGithubHome.github.io/blog/categories/Python/"/>
    
    
      <category term="Python" scheme="http://AlbertGithubHome.github.io/blog/tags/Python/"/>
    
      <category term="pushplus" scheme="http://AlbertGithubHome.github.io/blog/tags/pushplus/"/>
    
      <category term="自动推送" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/"/>
    
      <category term="图片" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下统计目录下所有文件的行数</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/11/30/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%BB%9F%E8%AE%A1%E7%9B%AE%E5%BD%95%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E7%9A%84%E8%A1%8C%E6%95%B0/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/11/30/linux环境下统计目录下所有文件的行数/</id>
    <published>2022-11-30T02:58:42.000Z</published>
    <updated>2022-12-01T16:12:08.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>工作中时常有统计数据行和代码行的需求，虽然能依次打开每个文件数一下，但是这样操作效率太低了，如果是在linux环境中，可以使用一个常用的命令 <code>wc</code>，一起记录一下常见的用法吧。</p><a id="more"></a><h1 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h1><p><code>wc</code>命令，<del>（全称water closet，洗手间，哦，错了）</del>，全称word count？我也没找到，作用就是输出每个文件包含的行数、单词数和字节数，这三项是基础信息也是最常用的信息，此外它还可以输出文件中字符数量、输出文件中最长行的长度。</p><p>使用方法非常简单，直接在命令末尾添加文件名就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc README.md</span><br><span class="line">  35   60 2460 README.md</span><br></pre></td></tr></table></figure><p>上面的信息显示，README.md文件中包含25行内容，存在60个单词，共有2460个字节，可能是因为该文件中包含中文，所以单词数统计不太准确。</p><h2 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h2><p>该命令各选项含义如下：</p><ul><li><code>- l</code>: 统计行数</li><li><code>- w</code>: 统计字数</li><li><code>- c</code>：统计字节数</li><li><code>- m</code>：统计字符数</li><li><code>- L</code>：统计最长行的长度</li></ul><p>其中 <code>- l</code> 使我们统计行数的利器</p><h1 id="统计文件行数"><a href="#统计文件行数" class="headerlink" title="统计文件行数"></a>统计文件行数</h1><p><code>wc</code> 命令搭配一些其他的命令能更方便的完成统计工作</p><h2 id="统计1个文件行数"><a href="#统计1个文件行数" class="headerlink" title="统计1个文件行数"></a>统计1个文件行数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l README.md</span><br><span class="line">35 README.md</span><br></pre></td></tr></table></figure><h2 id="统计2个文件行数"><a href="#统计2个文件行数" class="headerlink" title="统计2个文件行数"></a>统计2个文件行数</h2><p><code>wc</code> 命令后名跟多个文件名时会打印出每个文件的行数，并且在最后一行显示所有文件总行数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wc -l README.md test.txt</span><br><span class="line">  35 README.md</span><br><span class="line">   3 test.txt</span><br><span class="line">  38 total</span><br></pre></td></tr></table></figure><h2 id="统计当前目录下python代码文件数量"><a href="#统计当前目录下python代码文件数量" class="headerlink" title="统计当前目录下python代码文件数量"></a>统计当前目录下python代码文件数量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find ./ -name <span class="string">"*.py"</span> | wc -l</span><br><span class="line">317</span><br></pre></td></tr></table></figure><h2 id="统计当前目录下python代码文件行数"><a href="#统计当前目录下python代码文件行数" class="headerlink" title="统计当前目录下python代码文件行数"></a>统计当前目录下python代码文件行数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find ./ -name <span class="string">"*.py"</span> | xargs cat | wc -l</span><br><span class="line">38538</span><br></pre></td></tr></table></figure><h2 id="统计当前目录下python代码文件非空行数"><a href="#统计当前目录下python代码文件非空行数" class="headerlink" title="统计当前目录下python代码文件非空行数"></a>统计当前目录下python代码文件非空行数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find ./ -name <span class="string">"*.py"</span> | xargs cat | grep -v ^$ | wc -l</span><br><span class="line">35320</span><br></pre></td></tr></table></figure><p>实现的方式就是在输出文件内容的过程中过滤掉空行，但我认为统计代码行数时不应该过滤空行，适当的留白也是优秀代码的一部分</p><h2 id="统计当前目录下2种代码文件的总行数"><a href="#统计当前目录下2种代码文件的总行数" class="headerlink" title="统计当前目录下2种代码文件的总行数"></a>统计当前目录下2种代码文件的总行数</h2><p>一个项目中使用的代码往往不止一种，所以在统计代码行数时要考虑多种代码文件，可以写多个<code>-name</code>选项或者使用正则表达式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ find ./ -regex <span class="string">'.*\.\(py\|h\)'</span> | xargs cat | wc -l</span><br><span class="line">39795</span><br><span class="line">$ find ./ -regextype posix-extended -regex <span class="string">'.*\.(py|h)'</span> | xargs cat | wc -l</span><br><span class="line">39795</span><br><span class="line">$ find ./ -name <span class="string">"*.py"</span> -o -name <span class="string">"*.h"</span> | xargs cat | wc -l</span><br><span class="line">39795</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>wc</code> 命令是用来查询文件行数的核心命令，不加选项时默认输出文件行数、单词数、字节数</li><li><code>wc</code> 命令配合 <code>find</code>、<code>xargs</code>、<code>cat</code> 等命令可以统计出目录内指定类型文件的总行数</li><li><code>find</code> 查找多个文件的常用写法 <code>find ./ -regex &#39;.*\.\(py\|h\)&#39;</code> 或 <code>find ./ -name &quot;*.py&quot; -o -name &quot;*.h&quot;</code></li><li>查项目全部代码量终极大招：<code>find ./ -regex &#39;.*\.\(py\|lua\|go\|h\|hpp\|cpp\|c\|cc\)&#39; | xargs cat | wc -l</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/127947817" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>确实挺难的，再坚持一下~</p><p>2022-12-1 17:16:29</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;工作中时常有统计数据行和代码行的需求，虽然能依次打开每个文件数一下，但是这样操作效率太低了，如果是在linux环境中，可以使用一个常用的命令 &lt;code&gt;wc&lt;/code&gt;，一起记录一下常见的用法吧。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="grep" scheme="http://AlbertGithubHome.github.io/blog/tags/grep/"/>
    
      <category term="wc" scheme="http://AlbertGithubHome.github.io/blog/tags/wc/"/>
    
      <category term="统计函数" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%BB%9F%E8%AE%A1%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>借助第三方工具网站完成消息自动推送</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/11/19/%E5%80%9F%E5%8A%A9%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99%E5%AE%8C%E6%88%90%E6%B6%88%E6%81%AF%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/11/19/借助第三方工具网站完成消息自动推送/</id>
    <published>2022-11-19T14:31:42.000Z</published>
    <updated>2022-11-20T05:12:57.288Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>寻找消息推送的起因是之前买过一台云服务器，用于开发环境搭建和学习，最近想用它进行一些数据分析，而数据分析的结果如果每次都需要登录服务器来看就有点“太老土”了，所以想找一种使用方便的消息推送模式。提到之前的消息通知最常用的是短信和邮件，但是随着时代的发展，它们的弊端也逐渐暴露出来，短信的内容主要以文本为主，想要发送图片就比较困难，邮件查看起来不是太方便。而微信作为每天都用的社交软件，用它来接收消息就很方便了，所以朝着这个方向寻找，我发现了 <code>pushplus</code> 这个第三方工具。</p><a id="more"></a><h1 id="pushplus是什么"><a href="#pushplus是什么" class="headerlink" title="pushplus是什么"></a>pushplus是什么</h1><p>pushplus(推送加)是集成了微信、短信、邮件、企业微信、HiFlow连接器、钉钉、飞书等渠道的信息推送平台，只需要调用一个简单的API接口，即可帮助你迅速完成消息推送，使用简单方便。</p><p>我主要想用它的微信推送，一开始也想试试短信推送的，但是需要支付每条0.1元的费用所以放弃了（什么年代了，短信收费还这么贵），这里先简单说下它的微信推送的原理，利用的就是微信公众号的消息通道。</p><p>什么是消息通道，我的理解就是获取消息的途径，比如短信、邮件、微信、电话等等，这个pushplus本身并没有搭建新的消息通道，而是整合了已有消息通道的使用方式，让消息通知变得简单了，而微信消息推送利用的就是微信公众号这个途径。</p><p>我们知道微信公众号可以接收消息，并且微信公众平台也开放了后台接口，允许公众号运营方通过程序接口发送消息给关注者，这就是微信公众号的消息通道。pushplus就是使用了这个通道，他们把微信公众平台的接口进行了封装，开放给所有关注 <code>pushplus</code> 的人，而这些人就可以利用这个通道给自己发送消息，给群组发送消息，甚至给所有的关注者发送消息，当然这些消息都是显示在这个公众号里，要想接收消息必须先关注公众号，或者按照pushplus的规则加入群组。</p><p>既然是利用别人家的通道，必然要收到这个通道原有的限制，pushplus也不例外，首先当前微信公众号对模板消息推送有当日100万次的上限，超过这个上限有当日将无法发送模板消息，也就是所有pushplus的用户都将无法使用微信渠道的推送功能，所以pushplus在单日推送次数上做了部分限制。每人每日可用推送条数为200条，当大于200条的时候消息将不在推送。</p><p>目前这个每天200条是免费的，但随着用户量的增大，这个限制必然是会更加严格的，按现在计算没人推送200条也只能服务于5000人，不过大部分人是不会发这么多的，短时间应该没问题。另外该网站目前还推出了绑定自己公众号的服务，必须是经过认证的非个人公众号才可以哦，腾讯就是这么要求的，它也没办法，当前还提供了会员制度，可以适当放宽消息推送的次数。</p><p>我觉得大家不要反感会员制度，人总是要恰饭的，即使不是为了赚钱，也需要付出成本的，免费提供这项服务是需要服务器资源的，总不能一直永爱发电吧，收个合理的费用方便广大开发者我觉得无可厚非，就像我买的服务器1年一百多，续费成本每年要700多，如果对外提供服务器不收钱总不能靠西北风活着吧。</p><h1 id="pushplus测试使用"><a href="#pushplus测试使用" class="headerlink" title="pushplus测试使用"></a>pushplus测试使用</h1><p>pushplus 的官方网站是 <a href="http://www.pushplus.plus/" target="_blank" rel="noopener">www.pushplus.plus</a>，直接微信扫码就注册成功，同时会关注微信公众号用于接收消息，对于一对一消息和一对多消息都提供了消息发送界面，输入内容直接点击发送按钮就可以了，非常方便。</p><ul><li>官网介绍如下：</li></ul><p><img src="https://img-blog.csdnimg.cn/4d577c4c1c7a4cc6bbabaaa8c4fc32a8.png" alt="office-website"></p><ul><li>一对一消息发送</li></ul><p><img src="https://img-blog.csdnimg.cn/c4cbdf9d51ec474285094ea20d270506.png" alt="1to1msg"></p><ul><li>一对一消息发送</li></ul><p><img src="https://img-blog.csdnimg.cn/fae92b1f52f54abbb6b68c9374ddf3ef.png" alt="1tomany_msg"></p><ul><li>微信公众号里看到的消息通知</li></ul><p><img src="https://img-blog.csdnimg.cn/edfcd814c6a44e1fb328a9d0509c8db3.jpeg" alt="show_msg"></p><h1 id="代码发送"><a href="#代码发送" class="headerlink" title="代码发送"></a>代码发送</h1><p>一对一发送消息的代码非常简单，也就下面这几行，更复杂的格式还需要研究下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_wechat_msg</span><span class="params">(title, content)</span>:</span></span><br><span class="line">    token = <span class="string">'2c358fyearacb4581bc92f0c320c728fb'</span></span><br><span class="line">    url = <span class="string">'http://www.pushplus.plus/send?token='</span>+token+<span class="string">'&amp;title='</span>+title+<span class="string">'&amp;content='</span>+content</span><br><span class="line">    requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    send_wechat_msg(<span class="string">'python推送测试消息'</span>, <span class="string">'测试消息详细内容'</span>)</span><br></pre></td></tr></table></figure><h1 id="注意的问题"><a href="#注意的问题" class="headerlink" title="注意的问题"></a>注意的问题</h1><ul><li><p>限制问题。前面已经提到，使用pushplus公众号，所有用户共享100万条消息的限制，随着公司后期的发展这可能不够用</p></li><li><p>合规问题。因为是自定义推送内容，所以平台要注意合规问题，不仅公众号要进行内容审查，pushplus也需要进行内容审查，否则可能因为一个用户的违规导致所有用户都发不了消息。</p></li><li><p>消息格式。目前pushplus支持多种消息格式，包括 <code>text</code>、<code>html</code>、<code>json</code>、<code>markdown</code> 等格式，这能满足大部分用户的要求了</p></li><li><p>发送图片。pushplus不支持直接发送图片，具体方式通过html的 <code>&lt;img&gt;</code> 标签来实现，可以将本地的图片上传到七牛云等云存储空间上来获取图片的外链地址。</p></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>消息推送可以选择 <a href="http://www.pushplus.plus/" target="_blank" rel="noopener">pushplus</a> 官网扫码即可使用</li><li><code>pushplus</code> 的微信推送借用了微信公众号的消息通道，会受到的平台原有的100万条消息限制</li><li><code>pushplus</code> 提供给普通用户每天有200条消息的使用权限，仅通过http请求即可方便的使用api</li><li>注意后续的平台发展，很可能发展到一定程度后增加更严格的使用限制</li></ul><center><a href="https://blog.csdn.net/albertsh/article/details/127840091" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>一道残阳铺水中，半江瑟瑟半江红。可怜九月初三夜，露似真珠月似弓~</p><p>2022-11-20 13:01:16</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;寻找消息推送的起因是之前买过一台云服务器，用于开发环境搭建和学习，最近想用它进行一些数据分析，而数据分析的结果如果每次都需要登录服务器来看就有点“太老土”了，所以想找一种使用方便的消息推送模式。提到之前的消息通知最常用的是短信和邮件，但是随着时代的发展，它们的弊端也逐渐暴露出来，短信的内容主要以文本为主，想要发送图片就比较困难，邮件查看起来不是太方便。而微信作为每天都用的社交软件，用它来接收消息就很方便了，所以朝着这个方向寻找，我发现了 &lt;code&gt;pushplus&lt;/code&gt; 这个第三方工具。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://AlbertGithubHome.github.io/blog/categories/Python/"/>
    
    
      <category term="Python" scheme="http://AlbertGithubHome.github.io/blog/tags/Python/"/>
    
      <category term="消息推送" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
    
      <category term="微信" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="短信" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%9F%AD%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下使用rsync命令完成数据同步</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/11/13/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8rsync%E5%91%BD%E4%BB%A4%E5%AE%8C%E6%88%90%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/11/13/linux环境下使用rsync命令完成数据同步/</id>
    <published>2022-11-13T14:50:45.000Z</published>
    <updated>2022-11-13T16:36:57.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>linux 环境下说到数据复制第一个映入脑海的命令还是 <code>cp</code>，毕竟它用起来很方便，但是只能完成本地数据的拷贝，如果想实现本地和远程主机之间的数据拷贝可以使用 <code>scp</code>，有些文章会把它翻译成 “ssh copy”，但实际上它的全称是 “secure copy”，不过它确实利用了ssh协议，缺点就是只能全量拷贝，如果想完成增量拷贝可以选择 <code>rsync</code>命令，官网 <a href="https://rsync.samba.org/" target="_blank" rel="noopener">rsync.samba.org</a> 比较简陋，但很符合GNU的风格。</p><a id="more"></a><h1 id="rsync的特点"><a href="#rsync的特点" class="headerlink" title="rsync的特点"></a>rsync的特点</h1><ul><li>可实现增量同步，即只同步发生变化的数据</li><li>可保持原文件或目录的权限、时间、软硬连接、属主、组等所有属性均保持不变</li><li>支持拷贝特殊文件，如连接文件、设备等</li><li>排除指定文件或目录同步的功能，相当于打包命令tar的排除功能</li><li>rsync本身不对数据加密，可使用rcp/rsh/ssh等方式来配合传输文件</li><li>支持匿名的活认证的进程模式传输，可实现方便安全的数据备份和镜像</li></ul><h1 id="rsync-传输模式"><a href="#rsync-传输模式" class="headerlink" title="rsync 传输模式"></a>rsync 传输模式</h1><ul><li>本地方式，类似cp，可完成本机数据的拷贝复制</li><li>远程方式，类似scp，但可实现增量复制，可以将数据从本地推送至服务端，也可以将数据从服务端拉取到本地</li><li>守护进程方式，区分客户端和服务端，可以启动 <code>rsyncd</code> 服务（未使用过需研究）</li></ul><h1 id="rynsc-命令格式"><a href="#rynsc-命令格式" class="headerlink" title="rynsc 命令格式"></a>rynsc 命令格式</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Local:  rsync [OPTION...] SRC... [DEST]</span><br><span class="line"></span><br><span class="line">Access via remote shell:</span><br><span class="line">  Pull: rsync [OPTION...] [USER@]HOST:SRC... [DEST]</span><br><span class="line">  Push: rsync [OPTION...] SRC... [USER@]HOST:DEST</span><br><span class="line"></span><br><span class="line">Access via rsync daemon:</span><br><span class="line">  Pull: rsync [OPTION...] [USER@]HOST::SRC... [DEST]</span><br><span class="line">        rsync [OPTION...] rsync://[USER@]HOST[:PORT]/SRC... [DEST]</span><br><span class="line">  Push: rsync [OPTION...] SRC... [USER@]HOST::DEST</span><br><span class="line">        rsync [OPTION...] SRC... rsync://[USER@]HOST[:PORT]/DEST</span><br></pre></td></tr></table></figure><p>常用的还是第2种和第3种，第一种是本地复制，一般用<code>cp</code>代替就够了，<code>4~7</code>用于守护进程模式，至今我还没用过</p><h1 id="rsync-命令选项"><a href="#rsync-命令选项" class="headerlink" title="rsync 命令选项"></a>rsync 命令选项</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">-v, --verbose 详细模式输出。</span><br><span class="line">-q, --quiet 精简输出模式。</span><br><span class="line">-c, --checksum 打开校验开关，强制对文件传输进行校验。</span><br><span class="line">-a, --archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于-rlptgoD。</span><br><span class="line">-r, --recursive 对子目录以递归模式处理。</span><br><span class="line">-R, --relative 使用相对路径信息。</span><br><span class="line">-b, --backup 创建备份，也就是对于目的已经存在有同样的文件名时，将老的文件重新命名为~filename。可以使用--suffix选项来指定不同的备份文件前缀。</span><br><span class="line">--backup-dir 将备份文件(如~filename)存放在在目录下。</span><br><span class="line">-suffix=SUFFIX 定义备份文件前缀。</span><br><span class="line">-u, --update 仅仅进行更新，也就是跳过所有已经存在于DST，并且文件时间晚于要备份的文件，不覆盖更新的文件。</span><br><span class="line">-l, --links 保留软链结。</span><br><span class="line">-L, --copy-links 想对待常规文件一样处理软链结。</span><br><span class="line">--copy-unsafe-links 仅仅拷贝指向SRC路径目录树以外的链结。</span><br><span class="line">--safe-links 忽略指向SRC路径目录树以外的链结。</span><br><span class="line">-H, --hard-links 保留硬链结。</span><br><span class="line">-p, --perms 保持文件权限。</span><br><span class="line">-o, --owner 保持文件属主信息。</span><br><span class="line">-g, --group 保持文件属组信息。</span><br><span class="line">-D, --devices 保持设备文件信息。</span><br><span class="line">-t, --<span class="built_in">times</span> 保持文件时间信息。</span><br><span class="line">-S, --sparse 对稀疏文件进行特殊处理以节省DST的空间。</span><br><span class="line">-n, --dry-run现实哪些文件将被传输。</span><br><span class="line">-w, --whole-file 拷贝文件，不进行增量检测。</span><br><span class="line">-x, --one-file-system 不要跨越文件系统边界。</span><br><span class="line">-B, --block-size=SIZE 检验算法使用的块尺寸，默认是700字节。</span><br><span class="line">-e, --rsh=<span class="built_in">command</span> 指定使用rsh、ssh方式进行数据同步。</span><br><span class="line">--rsync-path=PATH 指定远程服务器上的rsync命令所在路径信息。</span><br><span class="line">-C, --cvs-exclude 使用和CVS一样的方法自动忽略文件，用来排除那些不希望传输的文件。</span><br><span class="line">--existing 仅仅更新那些已经存在于DST的文件，而不备份那些新创建的文件。</span><br><span class="line">--delete 删除那些DST中SRC没有的文件。</span><br><span class="line">--delete-excluded 同样删除接收端那些被该选项指定排除的文件。</span><br><span class="line">--delete-after 传输结束以后再删除。</span><br><span class="line">--ignore-errors 及时出现IO错误也进行删除。</span><br><span class="line">--max-delete=NUM 最多删除NUM个文件。</span><br><span class="line">--partial 保留那些因故没有完全传输的文件，以是加快随后的再次传输。</span><br><span class="line">--force 强制删除目录，即使不为空。</span><br><span class="line">--numeric-ids 不将数字的用户和组id匹配为用户名和组名。</span><br><span class="line">--timeout=time ip超时时间，单位为秒。</span><br><span class="line">-I, --ignore-times 不跳过那些有同样的时间和长度的文件。</span><br><span class="line">--size-only 当决定是否要备份文件时，仅仅察看文件大小而不考虑文件时间。</span><br><span class="line">--modify-window=NUM 决定文件是否时间相同时使用的时间戳窗口，默认为0。</span><br><span class="line">-T --temp-dir=DIR 在DIR中创建临时文件。</span><br><span class="line">--compare-dest=DIR 同样比较DIR中的文件来决定是否需要备份。</span><br><span class="line">-P 等同于 --partial。</span><br><span class="line">--progress 显示备份过程。</span><br><span class="line">-z, --compress 对备份的文件在传输时进行压缩处理。</span><br><span class="line">--exclude=PATTERN 指定排除不需要传输的文件模式。</span><br><span class="line">--include=PATTERN 指定不排除而需要传输的文件模式。</span><br><span class="line">--exclude-from=FILE 排除FILE中指定模式的文件。</span><br><span class="line">--include-from=FILE 不排除FILE指定模式匹配的文件。</span><br><span class="line">--version 打印版本信息。</span><br><span class="line">--address 绑定到特定的地址。</span><br><span class="line">--config=FILE 指定其他的配置文件，不使用默认的rsyncd.conf文件。</span><br><span class="line">--port=PORT 指定其他的rsync服务端口。</span><br><span class="line">--blocking-io 对远程shell使用阻塞IO。</span><br><span class="line">-stats 给出某些文件的传输状态。</span><br><span class="line">--progress 在传输时显示传输过程。</span><br><span class="line">--<span class="built_in">log</span>-format=formAT 指定日志文件格式。</span><br><span class="line">--password-file=FILE 从FILE中得到密码。</span><br><span class="line">--bwlimit=KBPS 限制I/O带宽，KBytes per second。</span><br><span class="line">-h, --<span class="built_in">help</span> 显示帮助信息。</span><br></pre></td></tr></table></figure><h1 id="常用组合"><a href="#常用组合" class="headerlink" title="常用组合"></a>常用组合</h1><p>从上面描述的选项可以看到，这个命令的参数特别多，但实际使用时只需要掌握一些常用组合即可：</p><h2 id="保留文件原属性拷贝"><a href="#保留文件原属性拷贝" class="headerlink" title="保留文件原属性拷贝"></a>保留文件原属性拷贝</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz jerry@82.156.125.169:/data/logs /data/backuplogs</span><br></pre></td></tr></table></figure><p>从远程主机将目录 <code>/data/logs</code> 拷贝到本地，对应目录为 <code>/data/backuplogs</code>，保留文件原有属性，包括权限、时间、软硬连接、属主、组等</p><h2 id="删除目标目录中S再原目录不存在的文件"><a href="#删除目标目录中S再原目录不存在的文件" class="headerlink" title="删除目标目录中S再原目录不存在的文件"></a>删除目标目录中S再原目录不存在的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --delete --progress /data/logs 82.156.125.169:/data/backuplogs</span><br></pre></td></tr></table></figure><p>将本地 <code>/data/logs</code> 目录推送到远程目录 <code>82.156.125.169:/data/backuplogs</code> 下，同时删除在原目录下不存在的文件，这个参数组合特别适合用来完全同步两个目录的内容</p><h2 id="限制网速传输"><a href="#限制网速传输" class="headerlink" title="限制网速传输"></a>限制网速传输</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --bwlimit=1024 /data/logs 82.156.125.169:/data/backuplogs/</span><br></pre></td></tr></table></figure><p>同步数据时限制传输速度为1024kBytes/s（就是1MB/s），防止占用过多带宽，可以根据需要调整数值，注意末尾加了一个斜杠 <code>/</code> 表示将原目录同步到目标目录下，而不是与目标目录完全同步，这一点在实践中要注意</p><h2 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz --partial /data/logs root@82.156.125.169:/data/backuplogs</span><br></pre></td></tr></table></figure><p>传输时保留那些因故没有完全传输的文件，来是加快随后的再次传输</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>本地拷贝数据用 <code>cp</code>，远程拷贝选 <code>scp</code>，如果想实现增量复制拷贝可以使用 <code>rsync</code></li><li><code>rsync</code> 可以将数据从本地推送至服务端，也可以将数据从服务端拉取到本地，也可以使用 <code>daemon</code> 模式</li><li><code>rsync</code> 最常用的命令组合就是 <code>avz</code>，可以保留文件原有属性进行递归拷贝</li><li>使用 <code>rsync</code> 命令传输数据时注意目录末尾的斜杠 <code>/</code>，加上它表示目录下的内容，使用时要注意不要覆盖错了</li></ul><center><a href="https://blog.csdn.net/albertsh/article/details/127723103" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>“人类一思考，上帝就发笑”。虽然我们已经总结了万物，终究还是渺小和无知的代表，但我们可以利用这些渺小的总结，在有限的生命内过的更好，一些看似无法到达和接触的领域，在被划分整理之后显得那么苍白，他想笑就让他去笑吧，毕竟我们只需要为自己的有限生命而负责~</p></blockquote><!-- 上管理课程之后有感 --><blockquote><p>2022-11-14 00:29:36</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;linux 环境下说到数据复制第一个映入脑海的命令还是 &lt;code&gt;cp&lt;/code&gt;，毕竟它用起来很方便，但是只能完成本地数据的拷贝，如果想实现本地和远程主机之间的数据拷贝可以使用 &lt;code&gt;scp&lt;/code&gt;，有些文章会把它翻译成 “ssh copy”，但实际上它的全称是 “secure copy”，不过它确实利用了ssh协议，缺点就是只能全量拷贝，如果想完成增量拷贝可以选择 &lt;code&gt;rsync&lt;/code&gt;命令，官网 &lt;a href=&quot;https://rsync.samba.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;rsync.samba.org&lt;/a&gt; 比较简陋，但很符合GNU的风格。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="rsync" scheme="http://AlbertGithubHome.github.io/blog/tags/rsync/"/>
    
      <category term="cp" scheme="http://AlbertGithubHome.github.io/blog/tags/cp/"/>
    
      <category term="数据同步" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>linux环境下查询主板、CPU、内存等硬件信息</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/11/06/linux%E7%8E%AF%E5%A2%83%E4%B8%8B%E6%9F%A5%E8%AF%A2%E4%B8%BB%E6%9D%BF%E3%80%81CPU%E3%80%81%E5%86%85%E5%AD%98%E7%AD%89%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/11/06/linux环境下查询主板、CPU、内存等硬件信息/</id>
    <published>2022-11-05T16:57:51.000Z</published>
    <updated>2022-11-13T16:23:37.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果是在windows系统下，查询电脑硬件会容易的多，可以通过电脑属性、计算机管理等多种图形化界面中查到，如果安装了各种电脑管家，那查询这类信息就更方便了，但如果在linux系统下通常要使用命令来解决，特别是查询服务器配置时，一般不会给服务器安装图形化界面，所以掌握必要的查询命令对于合理使用服务器资源很有必要。</p><a id="more"></a><h1 id="dmidecode"><a href="#dmidecode" class="headerlink" title="dmidecode"></a>dmidecode</h1><p>这个命令是偶然发现的，之前一般是查询电脑硬件资源的使用情况，比如 <code>top</code> 来看各个进程消耗的CPU和内存，使用 <code>free -h</code> 查询内存总体使用情况，最近电脑内存不太够了，想查询一下内存插槽状况，所以找到了这个命令 <code>dmidecode</code>，英文解释为 “DMI table decoder”，也就是DMI表解码器，可以理解为DMI信息的解释器。</p><p>在学习什么是<code>DMI</code>之前，先了解一下 <code>SMBIOS</code> 的概念，<code>BOIS</code> 是英文”Basic Input Output System”的缩略词，它是一组固化到计算机内主板上一个ROM芯片上的程序，它保存着计算机最重要的基本输入输出的程序、开机后自检程序和系统自启动程序，并可以从CMOS中读写系统设置的具体信息，为计算机提供最底层的、最直接的硬件设置和控制。</p><p><code>SMBIOS</code> 全称是”System Management Basic Input/Output System”，表示系统管理基本输入输出系统，是主板或系统制造者以标准格式显示产品管理信息所需遵循的统一规范。</p><p><code>DMI</code> 全称 “Desktop Management Interface”，用于帮助收集电脑系统信息的管理系统，DMI信息的收集必须在严格遵照SMBIOS规范的前提下进行，其设计适用于任何的平台和操作系统，充当了管理工具和系统层之间接口的角色。它建立了标准的可管理系统，更加方便了电脑厂商和用户对系统的了解，同时提供更为友好的用户工作环境。SMBIOS 和 DMI 都是由行业指导机构 “Desktop Management Task Force (DMTF)” 起草的开放性的技术标准。</p><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li><code>-q</code>：显示会简单点，一些未知的、不活动的和oem指定的条目不显示，元数据和句柄引用被隐藏。</li><li><code>-t</code>: 一个非常重要的参数，用于显示指定类型的条目，可以使用数字，也可以使用一些代表数字组合的单词</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">DMI TYPES</span><br><span class="line">    The SMBIOS specification defines the following DMI types:</span><br><span class="line"></span><br><span class="line">    Type   Information</span><br><span class="line">    ────────────────────────────────────────────</span><br><span class="line">       0   BIOS</span><br><span class="line">       1   System</span><br><span class="line">       2   Baseboard</span><br><span class="line">       3   Chassis</span><br><span class="line">       4   Processor</span><br><span class="line">       5   Memory Controller</span><br><span class="line">       6   Memory Module</span><br><span class="line">       7   Cache</span><br><span class="line">       8   Port Connector</span><br><span class="line">       9   System Slots</span><br><span class="line">      10   On Board Devices</span><br><span class="line">      11   OEM Strings</span><br><span class="line">      12   System Configuration Options</span><br><span class="line">      13   BIOS Language</span><br><span class="line">      14   Group Associations</span><br><span class="line">      15   System Event Log</span><br><span class="line">      16   Physical Memory Array</span><br><span class="line">      17   Memory Device</span><br><span class="line">      18   32-bit Memory Error</span><br><span class="line">      19   Memory Array Mapped Address</span><br><span class="line">      20   Memory Device Mapped Address</span><br><span class="line">      21   Built-in Pointing Device</span><br><span class="line">      22   Portable Battery</span><br><span class="line">      23   System Reset</span><br><span class="line">      24   Hardware Security</span><br><span class="line">      25   System Power Controls</span><br><span class="line">      26   Voltage Probe</span><br><span class="line">      27   Cooling Device</span><br><span class="line">      28   Temperature Probe</span><br><span class="line">      29   Electrical Current Probe</span><br><span class="line"></span><br><span class="line">      30   Out-of-band Remote Access</span><br><span class="line">      31   Boot Integrity Services</span><br><span class="line">      32   System Boot</span><br><span class="line">      33   64-bit Memory Error</span><br><span class="line">      34   Management Device</span><br><span class="line">      35   Management Device Component</span><br><span class="line">      36   Management Device Threshold Data</span><br><span class="line">      37   Memory Channel</span><br><span class="line">      38   IPMI Device</span><br><span class="line">      39   Power Supply</span><br><span class="line">      40   Additional Information</span><br><span class="line">      41   Onboard Devices Extended Information</span><br><span class="line">      42   Management Controller Host Interface</span><br></pre></td></tr></table></figure><p>数字组合的单词代表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Keyword     Types</span><br><span class="line">──────────────────────────────</span><br><span class="line">bios        0, 13</span><br><span class="line">system      1, 12, 15, 23, 32</span><br><span class="line">baseboard   2, 10, 41</span><br><span class="line">chassis     3</span><br><span class="line">processor   4</span><br><span class="line">memory      5, 6, 16, 17</span><br><span class="line">cache       7</span><br><span class="line">connector   8</span><br><span class="line">slot        9</span><br><span class="line"></span><br><span class="line">Keywords are matched <span class="keyword">case</span>-insensitively. The following <span class="built_in">command</span> lines are equivalent:</span><br><span class="line"></span><br><span class="line">· dmidecode --<span class="built_in">type</span> 0 --<span class="built_in">type</span> 13</span><br><span class="line">· dmidecode --<span class="built_in">type</span> 0,13</span><br><span class="line">· dmidecode --<span class="built_in">type</span> bios</span><br><span class="line">· dmidecode --<span class="built_in">type</span> BIOS</span><br></pre></td></tr></table></figure><ul><li><code>-s</code>：可以输出一些指定关键词相关信息，可用关键词如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Valid string keywords are:</span><br><span class="line">  bios-vendor</span><br><span class="line">  bios-version</span><br><span class="line">  bios-release-date</span><br><span class="line">  system-manufacturer</span><br><span class="line">  system-product-name</span><br><span class="line">  system-version</span><br><span class="line">  system-serial-number</span><br><span class="line">  system-uuid</span><br><span class="line">  system-family</span><br><span class="line">  baseboard-manufacturer</span><br><span class="line">  baseboard-product-name</span><br><span class="line">  baseboard-version</span><br><span class="line">  baseboard-serial-number</span><br><span class="line">  baseboard-asset-tag</span><br><span class="line">  chassis-manufacturer</span><br><span class="line">  chassis-type</span><br><span class="line">  chassis-version</span><br><span class="line">  chassis-serial-number</span><br><span class="line">  chassis-asset-tag</span><br><span class="line">  processor-family</span><br><span class="line">  processor-manufacturer</span><br><span class="line">  processor-version</span><br><span class="line">  processor-frequency</span><br></pre></td></tr></table></figure><h2 id="t参数测试"><a href="#t参数测试" class="headerlink" title="-t参数测试"></a>-t参数测试</h2><p>以查看内存信息为例，可以使用 <code>sudo dmidecode -t memory</code> 命令查看内存所有信息，根据man手册知道这个命令包括5、6、16、17四项内容，但实际上我查询到的5、6为空，这个命令在我的电脑上只包含16、17两项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -t memory</span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 3.2.0 present.</span><br><span class="line"></span><br><span class="line">Handle 0x0002, DMI <span class="built_in">type</span> 16, 23 bytes</span><br><span class="line">Physical Memory Array</span><br><span class="line">        Location: System Board Or Motherboard</span><br><span class="line">        Use: System Memory</span><br><span class="line">        Error Correction Type: None</span><br><span class="line">        Maximum Capacity: 32 GB</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Number Of Devices: 2</span><br><span class="line"></span><br><span class="line">Handle 0x0003, DMI <span class="built_in">type</span> 17, 84 bytes</span><br><span class="line">Memory Device</span><br><span class="line">        Array Handle: 0x0002</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Total Width: 64 bits</span><br><span class="line">        Data Width: 64 bits</span><br><span class="line">        Size: 4096 MB</span><br><span class="line">        Form Factor: SODIMM</span><br><span class="line">        Set: None</span><br><span class="line">        Locator: ChannelA-DIMM0</span><br><span class="line">        Bank Locator: BANK 0</span><br><span class="line">        Type: DDR4</span><br><span class="line">        Type Detail: Synchronous</span><br><span class="line">        Speed: 2667 MT/s</span><br><span class="line">        Manufacturer: Micron</span><br><span class="line">        Serial Number: 00000000</span><br><span class="line">        Asset Tag: None</span><br><span class="line">        Part Number: 4ATF51264HZ-2G6E1</span><br><span class="line">        Rank: 1</span><br><span class="line">        Configured Memory Speed: 2667 MT/s</span><br><span class="line">        Minimum Voltage: Unknown</span><br><span class="line">        Maximum Voltage: Unknown</span><br><span class="line">        Configured Voltage: 1.2 V</span><br><span class="line">        Memory Technology: DRAM</span><br><span class="line">        Memory Operating Mode Capability: Volatile memory</span><br><span class="line">        Firmware Version: Not Specified</span><br><span class="line">        Module Manufacturer ID: Bank 1, Hex 0x2C</span><br><span class="line">        Module Product ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Manufacturer ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Product ID: Unknown</span><br><span class="line">        Non-Volatile Size: None</span><br><span class="line">        Volatile Size: 4 GB</span><br><span class="line">        Cache Size: None</span><br><span class="line">        Logical Size: None</span><br><span class="line"></span><br><span class="line">Handle 0x0004, DMI <span class="built_in">type</span> 17, 84 bytes</span><br><span class="line">Memory Device</span><br><span class="line">        Array Handle: 0x0002</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Total Width: 64 bits</span><br><span class="line">        Data Width: 64 bits</span><br><span class="line">        Size: 4096 MB</span><br><span class="line">        Form Factor: SODIMM</span><br><span class="line">        Set: None</span><br><span class="line">        Locator: ChannelB-DIMM0</span><br><span class="line">        Bank Locator: BANK 2</span><br><span class="line">        Type: DDR4</span><br><span class="line">        Type Detail: Synchronous</span><br><span class="line">        Speed: 2667 MT/s</span><br><span class="line">        Manufacturer: Micron</span><br><span class="line">        Serial Number: 00000000</span><br><span class="line">        Asset Tag: None</span><br><span class="line">        Part Number: 4ATF51264HZ-2G6E1</span><br><span class="line">        Rank: 1</span><br><span class="line">        Configured Memory Speed: 2667 MT/s</span><br><span class="line">        Minimum Voltage: Unknown</span><br><span class="line">        Maximum Voltage: Unknown</span><br><span class="line">        Configured Voltage: 1.2 V</span><br><span class="line">        Memory Technology: DRAM</span><br><span class="line">        Memory Operating Mode Capability: Volatile memory</span><br><span class="line">        Firmware Version: Not Specified</span><br><span class="line">        Module Manufacturer ID: Bank 1, Hex 0x2C</span><br><span class="line">        Module Product ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Manufacturer ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Product ID: Unknown</span><br><span class="line">        Non-Volatile Size: None</span><br><span class="line">        Volatile Size: 4 GB</span><br><span class="line">        Cache Size: None</span><br><span class="line">        Logical Size: None</span><br></pre></td></tr></table></figure><p>可以直接指定单独的数字查询，比如查询内存阵列：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -t 16</span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 3.2.0 present.</span><br><span class="line"></span><br><span class="line">Handle 0x0002, DMI <span class="built_in">type</span> 16, 23 bytes</span><br><span class="line">Physical Memory Array</span><br><span class="line">        Location: System Board Or Motherboard</span><br><span class="line">        Use: System Memory</span><br><span class="line">        Error Correction Type: None</span><br><span class="line">        Maximum Capacity: 32 GB</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Number Of Devices: 2</span><br></pre></td></tr></table></figure><p>查询内存设备（内存条）信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -t 17</span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 3.2.0 present.</span><br><span class="line"></span><br><span class="line">Handle 0x0003, DMI <span class="built_in">type</span> 17, 84 bytes</span><br><span class="line">Memory Device</span><br><span class="line">        Array Handle: 0x0002</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Total Width: 64 bits</span><br><span class="line">        Data Width: 64 bits</span><br><span class="line">        Size: 4096 MB</span><br><span class="line">        Form Factor: SODIMM</span><br><span class="line">        Set: None</span><br><span class="line">        Locator: ChannelA-DIMM0</span><br><span class="line">        Bank Locator: BANK 0</span><br><span class="line">        Type: DDR4</span><br><span class="line">        Type Detail: Synchronous</span><br><span class="line">        Speed: 2667 MT/s</span><br><span class="line">        Manufacturer: Micron</span><br><span class="line">        Serial Number: 00000000</span><br><span class="line">        Asset Tag: None</span><br><span class="line">        Part Number: 4ATF51264HZ-2G6E1</span><br><span class="line">        Rank: 1</span><br><span class="line">        Configured Memory Speed: 2667 MT/s</span><br><span class="line">        Minimum Voltage: Unknown</span><br><span class="line">        Maximum Voltage: Unknown</span><br><span class="line">        Configured Voltage: 1.2 V</span><br><span class="line">        Memory Technology: DRAM</span><br><span class="line">        Memory Operating Mode Capability: Volatile memory</span><br><span class="line">        Firmware Version: Not Specified</span><br><span class="line">        Module Manufacturer ID: Bank 1, Hex 0x2C</span><br><span class="line">        Module Product ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Manufacturer ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Product ID: Unknown</span><br><span class="line">        Non-Volatile Size: None</span><br><span class="line">        Volatile Size: 4 GB</span><br><span class="line">        Cache Size: None</span><br><span class="line">        Logical Size: None</span><br><span class="line"></span><br><span class="line">Handle 0x0004, DMI <span class="built_in">type</span> 17, 84 bytes</span><br><span class="line">Memory Device</span><br><span class="line">        Array Handle: 0x0002</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Total Width: 64 bits</span><br><span class="line">        Data Width: 64 bits</span><br><span class="line">        Size: 4096 MB</span><br><span class="line">        Form Factor: SODIMM</span><br><span class="line">        Set: None</span><br><span class="line">        Locator: ChannelB-DIMM0</span><br><span class="line">        Bank Locator: BANK 2</span><br><span class="line">        Type: DDR4</span><br><span class="line">        Type Detail: Synchronous</span><br><span class="line">        Speed: 2667 MT/s</span><br><span class="line">        Manufacturer: Micron</span><br><span class="line">        Serial Number: 00000000</span><br><span class="line">        Asset Tag: None</span><br><span class="line">        Part Number: 4ATF51264HZ-2G6E1</span><br><span class="line">        Rank: 1</span><br><span class="line">        Configured Memory Speed: 2667 MT/s</span><br><span class="line">        Minimum Voltage: Unknown</span><br><span class="line">        Maximum Voltage: Unknown</span><br><span class="line">        Configured Voltage: 1.2 V</span><br><span class="line">        Memory Technology: DRAM</span><br><span class="line">        Memory Operating Mode Capability: Volatile memory</span><br><span class="line">        Firmware Version: Not Specified</span><br><span class="line">        Module Manufacturer ID: Bank 1, Hex 0x2C</span><br><span class="line">        Module Product ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Manufacturer ID: Unknown</span><br><span class="line">        Memory Subsystem Controller Product ID: Unknown</span><br><span class="line">        Non-Volatile Size: None</span><br><span class="line">        Volatile Size: 4 GB</span><br><span class="line">        Cache Size: None</span><br><span class="line">        Logical Size: None</span><br></pre></td></tr></table></figure><p>一共有2个存储插槽，每个插槽上装有一个4G的内存条，最大支持32G内存</p><h2 id="q参数测试"><a href="#q参数测试" class="headerlink" title="-q参数测试"></a>-q参数测试</h2><p>测试查询内存信息命令 <code>sudo dmidecode -t 16</code> 时可以看到开头有一些版本信息，查询其他类型时也包含这些信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 3.2.0 present.</span><br></pre></td></tr></table></figure><p>如果想屏蔽这些信息就可以使用 <code>-q</code> 参数，还可以屏蔽未知信息，可以对比一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -t 16 -q</span><br><span class="line">Physical Memory Array</span><br><span class="line">        Location: System Board Or Motherboard</span><br><span class="line">        Use: System Memory</span><br><span class="line">        Error Correction Type: None</span><br><span class="line">        Maximum Capacity: 32 GB</span><br><span class="line">        Number Of Devices: 2</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -t 16</span><br><span class="line"><span class="comment"># dmidecode 3.2</span></span><br><span class="line">Getting SMBIOS data from sysfs.</span><br><span class="line">SMBIOS 3.2.0 present.</span><br><span class="line"></span><br><span class="line">Handle 0x0002, DMI <span class="built_in">type</span> 16, 23 bytes</span><br><span class="line">Physical Memory Array</span><br><span class="line">        Location: System Board Or Motherboard</span><br><span class="line">        Use: System Memory</span><br><span class="line">        Error Correction Type: None</span><br><span class="line">        Maximum Capacity: 32 GB</span><br><span class="line">        Error Information Handle: Not Provided</span><br><span class="line">        Number Of Devices: 2</span><br></pre></td></tr></table></figure><h2 id="s参数测试"><a href="#s参数测试" class="headerlink" title="-s参数测试"></a>-s参数测试</h2><p>查询BOIS信息:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -s bios-vendor</span><br><span class="line">LENOVO</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s bios-version</span><br><span class="line">N2SET18P (1.12 )</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s bios-release-date</span><br><span class="line">04/01/2020</span><br></pre></td></tr></table></figure><p>查询系统信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -s system-uuid</span><br><span class="line">a2d29e4c-2f08-11b2-a85c-8252d66b70f9</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s system-family</span><br><span class="line">ThinkPad X390</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s system-manufacturer</span><br><span class="line">LENOVO</span><br></pre></td></tr></table></figure><p>查询机箱主板信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -s chassis-type</span><br><span class="line">Notebook</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s chassis-version</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s chassis-serial-number</span><br><span class="line">PC1JX6X4</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s baseboard-manufacturer</span><br><span class="line">LENOVO</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s baseboard-product-name</span><br><span class="line">20SDA01ACD</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s baseboard-version</span><br><span class="line">SDK0L77769 WIN</span><br></pre></td></tr></table></figure><p>查询处理器信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo dmidecode -s processor-family</span><br><span class="line">Core i5</span><br><span class="line"></span><br><span class="line">$ sudo dmidecode -s processor-version</span><br><span class="line">Intel(R) Core(TM) i5-10210U CPU @ 1.60GHz</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>DMI</code> 在遵守SMBIOS规范的前提下帮助收集电脑系统信息，适用于任何的平台和操作系统，可用 <code>dmidecode</code> 命令查询</li><li><code>dmidecode</code> 最重要的是 <code>-t</code> 参数，可以指定的特定数字类型0-42，可以使用具有组合命令的单词，</li><li>这些预定单词不区分大小写： <code>bios</code>、<code>system</code>、<code>baseboard</code>、<code>chassis</code>、<code>processor</code>、<code>memory</code>、<code>cache</code>、<code>connector</code>、<code>slot</code></li><li>还有查询硬件使用情况的 <code>top</code>、<code>htop</code>、<code>free</code> 命令，查询静态信息的 <code>lscpu</code>、<code>lsgpu</code>、<code>lsmem</code>、<code>lspci</code>、<code>lsusb</code>命令等待挖掘</li></ul><center><a href="https://blog.csdn.net/albertsh/article/details/127606837" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>管理的本质是管人理事。真诚待人，踏实做事，坚信自己的目标可以实现并全力以赴，用行动表明自己的态度，不要忘了沟通交流，了解每个人的核心诉求，不要大包大揽，学会做应该做的事而不是所有事~</p><p>2022-11-6 23:03:25</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;如果是在windows系统下，查询电脑硬件会容易的多，可以通过电脑属性、计算机管理等多种图形化界面中查到，如果安装了各种电脑管家，那查询这类信息就更方便了，但如果在linux系统下通常要使用命令来解决，特别是查询服务器配置时，一般不会给服务器安装图形化界面，所以掌握必要的查询命令对于合理使用服务器资源很有必要。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="dmidecode" scheme="http://AlbertGithubHome.github.io/blog/tags/dmidecode/"/>
    
      <category term="lscpu" scheme="http://AlbertGithubHome.github.io/blog/tags/lscpu/"/>
    
      <category term="硬件信息" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%A1%AC%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>awk处理/etc/passwd文件</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/10/30/awk%E5%A4%84%E7%90%86-etc-passwd%E6%96%87%E4%BB%B6/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/10/30/awk处理-etc-passwd文件/</id>
    <published>2022-10-30T09:55:36.000Z</published>
    <updated>2022-10-30T14:48:59.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>awk</code> 是 linux 环境下的一个强大的编程工具，用于对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的输出。同时它支持用户自定义函数和动态正则表达式等先进功能，可以被作为一种编程语言，可以很方便的在命令行中使用，但更多是在脚本来使用，为了熟悉这个命令，我们可以用它来尝试处理 <code>/etc/passwd</code> 文件学习一下常见用法。</p><a id="more"></a><h1 id="awk处理流程"><a href="#awk处理流程" class="headerlink" title="awk处理流程"></a>awk处理流程</h1><p><code>awk</code> 这个名字来源于它的三个作者姓氏的第一个字母，分别是<code>Alfred Aho</code>、<code>Brian Kernighan</code>、<code>Peter Weinberger</code>，常用的版本是 <code>gawk</code>， 它是awk的GNU版本，提供了Bell实验室和GNU的一些扩展。</p><p>awk 工作流程可分为三个部分：</p><ul><li>读输入文件之前执行的代码段（GEGIN块，由BEGIN关键字标识，可选）</li><li>主循环执行输入文件的代码段（BODY块，可选）</li><li>读输入文件之后的代码段（END块，由END关键字标识，可选）</li></ul><p>命令结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk &apos;BEGIN&#123; commands &#125; pattern&#123; commands &#125; END&#123; commands &#125;&apos;</span><br></pre></td></tr></table></figure><h2 id="开始块（BEGIN）"><a href="#开始块（BEGIN）" class="headerlink" title="开始块（BEGIN）"></a>开始块（BEGIN）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BEGIN &#123;awk-commands&#125;</span><br></pre></td></tr></table></figure><p>开始块部分是可选的，可以没有开始块部分，如果存在必须以 <code>BEGIN</code> 开头</p><p>开始块就是在程序启动的时候执行的代码部分，并且它在整个过程中只执行一次，我们可以在开始块中初始化一些变量。</p><h2 id="主体块（BODY）"><a href="#主体块（BODY）" class="headerlink" title="主体块（BODY）"></a>主体块（BODY）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern &#123;awk-commands&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，对于输入的每一行，awk 都会执行命令，我们可以通过 pattern 将其限定在指定的模式中，这部分也是可选的，不存在也是可以的，不过不存在主体的脚本用处不大。</p><h2 id="结束块（END）"><a href="#结束块（END）" class="headerlink" title="结束块（END）"></a>结束块（END）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">END &#123;awk-commands&#125;</span><br></pre></td></tr></table></figure><p>结束块部分是可选的，可以没有结束块部分，是在程序结束时执行的代码。 如果存在必须以 <code>END</code> 开头</p><h1 id="etc-passwd文件"><a href="#etc-passwd文件" class="headerlink" title="/etc/passwd文件"></a>/etc/passwd文件</h1><p>起初 /etc/passwd 文件包含了用户名和密码，但是由于该文件允许所有用户读取，易导致用户密码泄露，因此 Linux 系统将用户的密码信息从 /etc/passwd 文件中分离出来，并单独放到了/etc/shadow 文件中，此文件只有 root 用户拥有读权限，其他用户没有任何权限，这样就一定程度上保证了用户密码的安全性。</p><p><code>/etc/passwd</code> 配置文件的内容用冒号 <code>:</code> 隔开分为7段，分别为：</p><ol><li>用户名：账户名字</li><li>x：早期这个部分放的是用户登入密码，现在的密码是放入/etc/shadow中的</li><li>UID：用户ID，0表示系统管理员，1~999保留给系统使用的ID，1000以上给一般使用者</li><li>GID：组ID，0表示系统管理员，1~999保留给系统使用的ID，1000以上给一般使用者</li><li>使用者的信息说明</li><li>用户家目录：用户登入时所在的目录</li><li>默认shell：用户在登入的时候，默认使用的shell类型，如果不能使用shell，则会显示/sbin/nologin</li></ol><p><code>/etc/shadow</code> 配置文件的内容用冒号 <code>:</code> 隔开分为9段，分别为：</p><ol><li>用户名</li><li>经过加密的密码( * 表示用户被锁定，！表示无加密)</li><li>最近更改过密码的日期：Linux中的日期是经过1970年1月1号开始累计的日期</li><li>密码不能修改的天数，0表示随时可以修改</li><li>密码需要重新被修改的天数，通过修改该值可以强制修改密码</li><li>密码需要变更的告警天数，7表示系统会向用户发出警告的天数</li><li>密码到期后帐号可以使用的时间</li><li>帐号失效日期，通过1970年1月1号开始累加的日期，到了时间后无论密码是否过期，该账号就不能再使用了</li><li>保留的</li></ol><p>如果忘记自己的账户密码，该怎么处理呢？</p><ul><li><p>对于普通账户的密码遗失，可以通过 root 账户使用 passwd 命令重新设置密码解决，<code>passwd username</code>。</p></li><li><p>如果 root 账号的密码遗失，则需要重新启动进入单用户模式，系统会提供 root 权限的 bash 接口，此时可以用 passwd 命令修改账户密码。或者通过挂载根目录，修改 <code>/etc/shadow</code> 文件将 root 密码清空，无密码即登陆后再使用 passwd 命令配置 root 密码。</p></li></ul><h1 id="awk-常用处理"><a href="#awk-常用处理" class="headerlink" title="awk 常用处理"></a>awk 常用处理</h1><h2 id="字段分割及相关变量"><a href="#字段分割及相关变量" class="headerlink" title="字段分割及相关变量"></a>字段分割及相关变量</h2><ul><li>$1,$2,$3…$n：awk中用该顺序形式表示files中每行以间隔符号分割的各列的不同字段</li><li>$0：表示文本本身</li><li>NF：表示当前记录的字段数（列数）</li><li>$NF：最后一列</li><li>$(NF-1)：倒数第二列</li><li>FNR/NR：行号</li><li>FILENAME：文件名</li><li>“\t”：制表符</li><li>RS：换行符</li><li>“”： 打印字符串</li><li>FS：定义间隔符</li><li>~：匹配，与==相比不是精确比较</li><li>!~：不匹配，不精确比较</li><li>==：等于，必须全部相等，精确比较</li><li>/[0-9][0-9]+/：两个或两个以上数字</li><li>-F’[:#]’：定义两个分隔符</li></ul><h2 id="常用处理"><a href="#常用处理" class="headerlink" title="常用处理"></a>常用处理</h2><h3 id="添加表头"><a href="#添加表头" class="headerlink" title="添加表头"></a>添加表头</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: 'BEGIN&#123;print"用户名\t密码\tUID\tGID\t信息\t家目录\tshell"&#125;&#123;printf $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6"\t"$7"\n"&#125;' /etc/passwd</span></span><br><span class="line">用户名 密码  UID GID 信息  家目录 shell</span><br><span class="line">root    x   0   0   root    /root   /bin/bash</span><br><span class="line">bin     x   1   1   bin /bin    /sbin/nologin</span><br><span class="line">daemon  x   2   2   daemon  /sbin   /sbin/nologin</span><br><span class="line">adm     x   3   4   adm     /var/adm    /sbin/nologin</span><br><span class="line">lp      x   4   7   lp      /var/spool/lpd  /sbin/nologin</span><br><span class="line">sync    x   5   0   sync    /sbin   /bin/sync</span><br></pre></td></tr></table></figure><h3 id="添加行号"><a href="#添加行号" class="headerlink" title="添加行号"></a>添加行号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: '&#123;printf NR"\t"$0"\n"&#125;' /etc/passwd</span></span><br><span class="line">1   root:x:0:0:root:/root:/bin/bash</span><br><span class="line">2   bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">3   daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">4   adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">5   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">6   sync:x:5:0:sync:/sbin:/bin/sync</span><br></pre></td></tr></table></figure><h3 id="打印第三行第1列和第7列"><a href="#打印第三行第1列和第7列" class="headerlink" title="打印第三行第1列和第7列"></a>打印第三行第1列和第7列</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: 'NR==3&#123;print $1"\t"$7&#125;' /etc/passwd</span></span><br><span class="line">daemon  /sbin/nologin</span><br></pre></td></tr></table></figure><h3 id="打印文件总行数"><a href="#打印文件总行数" class="headerlink" title="打印文件总行数"></a>打印文件总行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: 'END&#123;print FILENAME"\t"NR&#125;' /etc/passwd</span></span><br><span class="line">/etc/passwd 28</span><br></pre></td></tr></table></figure><h3 id="查询不能登录的用户数"><a href="#查询不能登录的用户数" class="headerlink" title="查询不能登录的用户数"></a>查询不能登录的用户数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: 'BEGIN&#123;x=0&#125; &#123;if($7=="/sbin/nologin") x++&#125; END&#123;print FILENAME"\t"x&#125;' /etc/passwd</span></span><br><span class="line">/etc/passwd 21</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk '/nologin/' /etc/passwd | wc -l</span></span><br><span class="line">21</span><br></pre></td></tr></table></figure><h3 id="查询可以登录的用户"><a href="#查询可以登录的用户" class="headerlink" title="查询可以登录的用户"></a>查询可以登录的用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: '$NF !~ /nologin$/&#123;print $1&#125;'  /etc/passwd</span></span><br><span class="line">root</span><br><span class="line">sync</span><br></pre></td></tr></table></figure><h3 id="打印UID小于300的用户"><a href="#打印UID小于300的用户" class="headerlink" title="打印UID小于300的用户"></a>打印UID小于300的用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment">#  awk -F: '&#123; if($3&lt;300) print $1"\t"$3 &#125;' /etc/passwd</span></span><br><span class="line">root    0</span><br><span class="line">bin     1</span><br><span class="line">daemon  2</span><br><span class="line">adm     3</span><br><span class="line">lp      4</span><br><span class="line">sync    5</span><br></pre></td></tr></table></figure><h3 id="打印UID在2和6之间的用户"><a href="#打印UID在2和6之间的用户" class="headerlink" title="打印UID在2和6之间的用户"></a>打印UID在2和6之间的用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment">#  awk -F: '($3&gt;2&amp;&amp;$3&lt;6)&#123;print $1"\t"$3 &#125;' /etc/passwd</span></span><br><span class="line">adm     3</span><br><span class="line">lp      4</span><br><span class="line">sync    5</span><br></pre></td></tr></table></figure><h3 id="进行算术运算"><a href="#进行算术运算" class="headerlink" title="进行算术运算"></a>进行算术运算</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment">#  awk -F: '($3*2 &lt; 6)&#123;print $1"\t"$3 &#125;' /etc/passwd</span></span><br><span class="line">root    0</span><br><span class="line">bin     1</span><br><span class="line">daemon  2</span><br></pre></td></tr></table></figure><h3 id="利用条件判断统计各类用户数"><a href="#利用条件判断统计各类用户数" class="headerlink" title="利用条件判断统计各类用户数"></a>利用条件判断统计各类用户数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: '&#123;if($3==0)&#123;i++&#125; else if($3&gt;999)&#123;k++&#125; else&#123;j++&#125;&#125; END&#123;print "管理员个数: "i; print "普通用个数: "k; print "系统用户数: "j&#125;' /etc/passwd</span></span><br><span class="line">管理员个数: 1</span><br><span class="line">普通用个数: 1</span><br><span class="line">系统用户数: 26</span><br></pre></td></tr></table></figure><h3 id="每行数据打印3遍"><a href="#每行数据打印3遍" class="headerlink" title="每行数据打印3遍"></a>每行数据打印3遍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: '&#123;for(i=1;i&lt;=3;i++) print NR"\t"i"\t"$0&#125;' /etc/passwd</span></span><br><span class="line">1   1   root:x:0:0:root:/root:/bin/bash</span><br><span class="line">1   2   root:x:0:0:root:/root:/bin/bash</span><br><span class="line">1   3   root:x:0:0:root:/root:/bin/bash</span><br><span class="line">2   1   bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">2   2   bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">2   3   bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">3   1   daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">3   2   daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">3   3   daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">4   1   adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">4   2   adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">4   3   adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">5   1   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">5   2   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">5   3   lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br></pre></td></tr></table></figure><h3 id="统计-etc-passwd中各种类型shell的数量"><a href="#统计-etc-passwd中各种类型shell的数量" class="headerlink" title="统计/etc/passwd中各种类型shell的数量"></a>统计/etc/passwd中各种类型shell的数量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># awk -F: '&#123;shells[$NF]++&#125;END&#123; for(i in shells)&#123;print i,shells[i]&#125;&#125;' /etc/passwd</span></span><br><span class="line">/bin/sync 1</span><br><span class="line">/bin/bash 3</span><br><span class="line">/sbin/nologin 21</span><br><span class="line">/sbin/halt 1</span><br><span class="line">/bin/<span class="literal">false</span> 1</span><br><span class="line">/sbin/shutdown 1</span><br></pre></td></tr></table></figure><h3 id="网站访问状态统计"><a href="#网站访问状态统计" class="headerlink" title="网站访问状态统计"></a>网站访问状态统计</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># netstat -ant | grep :80 | awk '&#123;access_stat[$NF]++&#125;END&#123;for(i in access_stat)&#123;print i, access_stat[i]&#125;&#125;'</span></span><br><span class="line">LISTEN 3</span><br><span class="line">CLOSE_WAIT 1</span><br><span class="line">ESTABLISHED 1</span><br></pre></td></tr></table></figure><h3 id="生成清空arp命令的文本"><a href="#生成清空arp命令的文本" class="headerlink" title="生成清空arp命令的文本"></a>生成清空arp命令的文本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># arp | awk '!/Address/&#123;print "arp -d " $1&#125;'</span></span><br><span class="line">arp -d 169.254.0.2</span><br><span class="line">arp -d 169.254.0.3</span><br><span class="line">arp -d 169.254.0.79</span><br><span class="line">arp -d 172.18.0.3</span><br><span class="line">arp -d 169.254.128.8</span><br><span class="line">arp -d 169.254.128.9</span><br><span class="line">arp -d 10.10.0.17</span><br></pre></td></tr></table></figure><p>直接在末尾加管道 <code>bash</code> 就可以执行了，<code>arp | awk &#39;!/Address/{print &quot;arp -d &quot; $1}&#39;| bash</code> 这是一种通用的生成处理命令的方式，先生成命令文本，然后作为bash输入，执行即可。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>awk</code> 处理流程分为3个阶段，BEGIN块、BODY块、END块，其中BEGIN块和END块都执行一次，BODY块对每一行输入执行一次</li><li><code>awk</code> 的3个处理块都是可选的，对于待处理的文件，一般至少会包含BODY块</li><li><code>awk</code> 中BODY块的 pattern 用于行过滤，<code>/pattern/</code> 表示匹配，<code>/!pattern/</code> 表示不匹配</li><li><code>awk</code> 中BODY块的中也可对指定字段判断是否包含，<code>&#39;$1 ~ /root/&#39;</code> 表示第一列包含root，<code>&#39;$NF !~ /nologin$/&#39;</code> 表示最后一列不包含nologin</li><li><code>awk</code> 还可用于待处理命令文本的预处理，先将过滤文本拼装成命令文本，然后利用管道直接通过bash执行</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/127483805" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>最近有些急躁，虽知欲速则不达，但压力之下确实难以平静。之所以这么拼，并不是为了卷谁，也不是为了表现给别人看，只是想有所提升超越昨天的自己，目的也非常俗套，通过提升自身来给自己的小家一个更好的生活。“一室之不治，何以天下家国为？”如果每个人都能把自己的小日子过好，则天下太平!</p><p>2022-10-30 21:24:10</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;awk&lt;/code&gt; 是 linux 环境下的一个强大的编程工具，用于对文本和数据进行处理。数据可以来自标准输入、一个或多个文件，或其它命令的输出。同时它支持用户自定义函数和动态正则表达式等先进功能，可以被作为一种编程语言，可以很方便的在命令行中使用，但更多是在脚本来使用，为了熟悉这个命令，我们可以用它来尝试处理 &lt;code&gt;/etc/passwd&lt;/code&gt; 文件学习一下常见用法。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="awk" scheme="http://AlbertGithubHome.github.io/blog/tags/awk/"/>
    
      <category term="passwd" scheme="http://AlbertGithubHome.github.io/blog/tags/passwd/"/>
    
      <category term="工具" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>后台运行一个go程序</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/10/23/%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AAgo%E7%A8%8B%E5%BA%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/10/23/后台运行一个go程序/</id>
    <published>2022-10-23T15:13:33.000Z</published>
    <updated>2022-10-23T16:19:50.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>后台运行在日常开发中比较常用，特别是在部署服务器上，一般都是通过ssh连接到服务器，然后启动后台运行程序，如果程序不支持后台运行，那么当终端断开时程序也就退出了，所以掌握常用的后台运行方式还是比较有用的。</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>提到后台运行，通常会想到 <code>daemon</code> 模式，日常开发时也常常混着说，不过通过查询资料时发现，这两个概念还有些区别：</p><p>后台运行：是指进程在操作系统中非显示运行，未关联到任何命令行终端或程序界面，这种方式运行的进程则被称为后台进程。</p><p>daemon模式：也叫守护进程，它首先是后台运行，然后它还有守护的职责，若异常退出，可以自动重启服务程序。</p><p>所以说 daemon 不仅要时候后台运行，还有守护进程职责，像Windows 和 Linux 中的各种服务，比如MySQL、防火墙、SSH服务等都是后台运行的进程。</p><h1 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h1><p>很多产品会部署在linux服务器上，所以相比较而言，后台运行在linux上更常用，而 <code>nohup</code>、<code>&amp;</code>、<code>setsid</code> 等命令就基本上可以达到后台运行的目的，之前写过一篇总结 <a href="https://blog.csdn.net/albertsh/article/details/87924102" target="_blank" rel="noopener">《linux环境下运行程序常用的nohup和&amp;的区别》</a>，可以简单回忆下：</p><ul><li><code>nohup</code> 是no hang up的缩写，就是不挂断的意思，忽略SIGHUP信号，在关闭命令终端后程序依旧运行</li><li><code>&amp;</code> 是只后台运行，即忽略SIGINT信号，也就是按Ctrl+C不会终止程序，但是关闭命令行终端程序终止</li></ul><p>而 <code>setsid</code> 是新学到的命令，使用起来也非常的简单，只需要加在待执行命令的前面即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># setsid ping www.baidu.com &gt; out.log</span></span><br></pre></td></tr></table></figure><p>此时关闭当前终端，重新打开另一终端会发现 <code>ping</code> 的进程，同时文件 <code>out.log</code> 文件也一直在更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ps -ef | grep ping</span></span><br><span class="line">root      1692     1  0 23:36 ?        00:00:00 ping www.baidu.com</span><br><span class="line">root      1707  1279  0 23:36 pts/1    00:00:00 grep --color=auto ping</span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># tail -f out.log</span></span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=8 ttl=251 time=9.38 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=9 ttl=251 time=9.36 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=10 ttl=251 time=9.35 ms</span><br><span class="line">64 bytes from 110.242.68.3 (110.242.68.3): icmp_seq=11 ttl=251 time=9.37 ms</span><br></pre></td></tr></table></figure><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p><code>&amp;</code> 不能让进程永久在后台执行，但是如果在命令前后加上()括起来，一样可以实现nohup ..&amp;的功能，命令就能永久在后台执行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># (ping www.baidu.com &gt; t.log &amp;)</span></span><br><span class="line">[root@VM-0-3-centos ~]<span class="comment"># ps -ef | grep ping</span></span><br><span class="line">root      3410     1  0 23:44 pts/0    00:00:00 ping www.baidu.com</span><br><span class="line">root      3450  1279  0 23:44 pts/1    00:00:00 grep --color=auto ping</span><br></pre></td></tr></table></figure><h1 id="代码级别实现"><a href="#代码级别实现" class="headerlink" title="代码级别实现"></a>代码级别实现</h1><p>虽然上面的方式很方便，但毕竟只能在 linux 上使用，如果可以通过修改 go 代码在 windows 和 linux 上都实现后台运行那再好不过了，很幸运查到一个go的库 <code>github.com/codyguo/godaemon</code>，使用起来非常方便，只需要在代码中引入这个库，然后启动程序是加入 <code>-d</code> 参数就可以后台运行了</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    _ <span class="string">"github.com/codyguo/godaemon"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>不过我在使用的过程中发现两个问题，一个是传递的后续参数会莫名消失，另一个是好像关闭终端会导致程序退出，所以我打算看看源码，结果发现源码就只有几行：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> godaemon</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"flag"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"os/exec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    goDaemon := flag.Bool(<span class="string">"d"</span>, <span class="literal">false</span>, <span class="string">"run app as a daemon with -d=true."</span>)</span><br><span class="line">    flag.Parse()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> *goDaemon &#123;</span><br><span class="line">        cmd :=  (os.Args[<span class="number">0</span>], flag.Args()...)</span><br><span class="line">        <span class="keyword">if</span> err := cmd.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">            fmt.Printf(<span class="string">"start %s failed, error: %v\n"</span>, os.Args[<span class="number">0</span>], err)</span><br><span class="line">            os.Exit(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Printf(<span class="string">"%s [PID] %d running...\n"</span>, os.Args[<span class="number">0</span>], cmd.Process.Pid)</span><br><span class="line">        os.Exit(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些就是源码的全部了，是不是很吃惊，其实弄懂原理就很好明白了，其中利用了 <code>exec.Command</code> 函数，因为go 中没有 fork 的便利实现，所以可以利用 <code>exec.Command</code> 启动新的进程，这样新启动的进程在当前进程退出后就被系统进程接管了，只不过它处理的参数有点问题，<code>flag.Args()</code>会把所有 <code>-</code> 开头的参数都消耗掉，自己按需实现就可以了</p><p>另一个关闭终端会导致程序退出的问题，可以在传入 <code>-d</code> 参数的情况下调用 <code>signal.Ignore(syscall.SIGHUP)</code> 忽略掉 <code>SIGHUP</code> 信号即可</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>在操作系统中非显示运行，未关联到任何命令行终端或程序界面的进程则被称为后台进程</li><li>linux环境下常用来后台运行程序的命令有 <code>hohup</code>、<code>&amp;</code> 和 <code>setsid</code></li><li><code>github.com/codyguo/godaemon</code> 是一个极简的后台运行可用库，仅添加修改一行代码</li><li>若想更丰富的功能可以参考 <code>github.com/sevlyar/go-daemon</code> 和 <code>github.com/zh-five/xdaemon</code> 两个库</li></ul><center><a href="https://blog.csdn.net/albertsh/article/details/127168482" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>人生若只如初见，何事秋风悲画扇。等闲变却故人心，却道故人心易变~</p><p>2022-10-24 00:04:29</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;后台运行在日常开发中比较常用，特别是在部署服务器上，一般都是通过ssh连接到服务器，然后启动后台运行程序，如果程序不支持后台运行，那么当终端断开时程序也就退出了，所以掌握常用的后台运行方式还是比较有用的。&lt;/p&gt;
    
    </summary>
    
      <category term="Go" scheme="http://AlbertGithubHome.github.io/blog/categories/Go/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="nohup" scheme="http://AlbertGithubHome.github.io/blog/tags/nohup/"/>
    
      <category term="setsid" scheme="http://AlbertGithubHome.github.io/blog/tags/setsid/"/>
    
      <category term="后台" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%90%8E%E5%8F%B0/"/>
    
      <category term="daemon" scheme="http://AlbertGithubHome.github.io/blog/tags/daemon/"/>
    
  </entry>
  
  <entry>
    <title>由逆序对数引发的解题目录</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/10/04/%E7%94%B1%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0%E5%BC%95%E5%8F%91%E7%9A%84%E8%A7%A3%E9%A2%98%E7%9B%AE%E5%BD%95/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/10/04/由逆序对数引发的解题目录/</id>
    <published>2022-10-04T15:56:02.000Z</published>
    <updated>2022-10-04T16:53:24.697Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>如果你恰巧看到了我的上一篇总结<a href="https://blog.csdn.net/albertsh/article/details/127158301" target="_blank" rel="noopener">《排序算法系列之（七）——分分合合的归并排序》</a>会发现我把搁置了3年半的排序系列又续更了，起因是最近刷题时遇到了逆序对数求解，而解这类问题常用的方法之一就是归并排序，究竟是怎样的一道题呢？我们可以先试着解决一下。</p><a id="more"></a><h1 id="逆序对数"><a href="#逆序对数" class="headerlink" title="逆序对数"></a>逆序对数</h1><p>题目非常简短，描述内容如下：</p><p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p><p>示例 1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: [7,5,6,4]</span><br><span class="line">输出: 5</span><br></pre></td></tr></table></figure><p>限制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 &lt;= 数组长度 &lt;= 50000</span><br></pre></td></tr></table></figure><blockquote><p>作者：LeetCode-Solution<br>链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><h2 id="求解过程"><a href="#求解过程" class="headerlink" title="求解过程"></a>求解过程</h2><p>题目要求不难理解，即使你不知道什么是逆序对也能很容易的根据描述写出下面暴力的解法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; nums.size(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>不出意外的获得了 <code>TLE</code>，看看限制范围也能猜到这题暴力肯定不让过，如果数组长度小于 100 还可以考虑搏一搏，而这道题必须用更巧妙的方法才行，而归并排序就是解法之一：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mergeCnt</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; v, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt;= right) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> i = left, mid = (left+right) / <span class="number">2</span>, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        mergeCnt(v, left, mid, t);</span><br><span class="line">        mergeCnt(v, mid+<span class="number">1</span>, right, t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= right) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v[i] &lt;= v[j]) t[k++] = v[i++];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                t[k++] = v[j++];</span><br><span class="line">                ans += mid - i + <span class="number">1</span>; <span class="comment">// 相比归并排序只多了这一行</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) t[k++] = v[i++];</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= right) t[k++] = v[j++];</span><br><span class="line"></span><br><span class="line">        copy(t.begin(), t.begin() + right - left + <span class="number">1</span>, v.begin() + left);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reversePairs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t(n);</span><br><span class="line">        mergeCnt(nums, <span class="number">0</span>, n<span class="number">-1</span>, t);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相比原始的归并排序只增加了一行代码，就得到了一个优于暴力解法O(N^2)的O(NlogN)的解法，具体解释可以去看相关题解，本文的总结目的不是解一道题，而是想给自己保留一个有趣的解题目录。</p><h1 id="解题目录"><a href="#解题目录" class="headerlink" title="解题目录"></a>解题目录</h1><p>刷题大计最近两年断断续续的在进行着，题解也有写过一些，尝试过多种方式，内容比较零散，复习时比较头疼，没有一个完整的大纲和复习线路，所以打算单开一篇总结，持续收集一些有意思的题目，方便后续的复习和拿来即用。</p><p>题目的标签主要有两个方面，一是本身的题目知识点类型，另一种是解题用到的解法类型，比如上面提到的这道题，从题目看归为逆序对数，从解法看可以归为排序解法和离散化树状数组解法，所以后面可以会看到一个题目出现在多个目录中的情况，只是分类依据不同而已。</p><h2 id="题目分类"><a href="#题目分类" class="headerlink" title="题目分类"></a>题目分类</h2><h3 id="逆序对数-1"><a href="#逆序对数-1" class="headerlink" title="逆序对数"></a>逆序对数</h3><ul><li><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">51. 数组中的逆序对</a></li></ul><h2 id="解法分类"><a href="#解法分类" class="headerlink" title="解法分类"></a>解法分类</h2><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul><li><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">51. 数组中的逆序对</a></li></ul><h3 id="离散化树状数组"><a href="#离散化树状数组" class="headerlink" title="离散化树状数组"></a>离散化树状数组</h3><ul><li><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/" target="_blank" rel="noopener">51. 数组中的逆序对</a></li></ul><h3 id="差分数组"><a href="#差分数组" class="headerlink" title="差分数组"></a>差分数组</h3><ul><li><a href="https://leetcode.cn/problems/divide-intervals-into-minimum-number-of-groups/" target="_blank" rel="noopener">2406. 将区间分为最少组数</a></li></ul><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><ul><li><a href="https://leetcode.cn/problems/minimum-recolors-to-get-k-consecutive-black-blocks/" target="_blank" rel="noopener">2379. 得到 K 个黑块的最少涂色次数</a></li></ul><h3 id="Trie树"><a href="#Trie树" class="headerlink" title="Trie树"></a>Trie树</h3><ul><li><a href="https://leetcode.cn/problems/sum-of-prefix-scores-of-strings/" target="_blank" rel="noopener">2416. 字符串的前缀分数和</a></li><li><a href="https://leetcode.cn/problems/remove-sub-folders-from-the-filesystem/" target="_blank" rel="noopener">1233. 删除子文件夹</a></li></ul><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><ul><li><a href="https://leetcode.cn/problems/UlBDOe/" target="_blank" rel="noopener">19. 秋叶收藏集</a></li></ul><p>……持续补充</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>有时看似无关的两件事居然关系紧密，比如归并排序加一行代码就可以求解逆序对数</li><li>分类、总结、重新分类，在不断分类中重新认识这个世界</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/127158301" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>不积跬步，无以至千里；不积小流，无以成江海。放眼于未来，着眼于脚下，一味计划而不行动，最终醒来只会发现是梦一场~</p><p>2022-10-5 00:49:14</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;如果你恰巧看到了我的上一篇总结&lt;a href=&quot;https://blog.csdn.net/albertsh/article/details/127158301&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《排序算法系列之（七）——分分合合的归并排序》&lt;/a&gt;会发现我把搁置了3年半的排序系列又续更了，起因是最近刷题时遇到了逆序对数求解，而解这类问题常用的方法之一就是归并排序，究竟是怎样的一道题呢？我们可以先试着解决一下。&lt;/p&gt;
    
    </summary>
    
      <category term="OJ" scheme="http://AlbertGithubHome.github.io/blog/categories/OJ/"/>
    
    
      <category term="题解" scheme="http://AlbertGithubHome.github.io/blog/tags/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="OJ" scheme="http://AlbertGithubHome.github.io/blog/tags/OJ/"/>
    
      <category term="解题目录" scheme="http://AlbertGithubHome.github.io/blog/tags/%E8%A7%A3%E9%A2%98%E7%9B%AE%E5%BD%95/"/>
    
      <category term="逆序对数" scheme="http://AlbertGithubHome.github.io/blog/tags/%E9%80%86%E5%BA%8F%E5%AF%B9%E6%95%B0/"/>
    
      <category term="归并排序" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>排序算法系列之（七）——分分合合的归并排序</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/10/03/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%B3%BB%E5%88%97%E4%B9%8B%EF%BC%88%E4%B8%83%EF%BC%89%E2%80%94%E2%80%94%E5%88%86%E5%88%86%E5%90%88%E5%90%88%E7%9A%84%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/10/03/排序算法系列之（七）——分分合合的归并排序/</id>
    <published>2022-10-03T09:58:29.000Z</published>
    <updated>2022-10-04T16:48:40.696Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>再一次总结基础的排序算法，印象里距离上一次总结排序也没过多久，查询后才发现上一篇总结<a href="https://blog.csdn.net/albertsh/article/details/94229646" target="_blank" rel="noopener">《排序算法系列之（六）——逐步砍掉树杈的堆排序》</a>到现在已经过去了3年多的时间，真是时光荏苒，岁月如梭啊，这次想起总结排序起因并不是排序，而是查找逆序数对，而解决逆序数对通常使用的两种方式是归并排序和离散化树状数组，所以我又把归并排序捡起来了</p><a id="more"></a><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>温故而知新，知识有时候就是这么神奇，多年以后再次看到归并排序，才发现以前掌握的归并排序并不全面，之前理解的归并排序主要放在“并”这个操作，但是其实归并排序中还有很重要的一环，那就是“分”，先分后合才是完整的归并排序。</p><p>归并排序是建立在归并操作上的一种有效，稳定的排序算法，该算法是采用分治法的一个非常典型的应用，首先将整个序列一分为二得到两个序列，然后将分出的两个序列排好序后再合并，得到完全有序的序列。对于子序列如果元素大于1则继续进行一分为二，分别排序再合并的操作，直至有序，算法本身是通过一个递归的概念定义。当然反过来通过递推也可以实现，相邻区间两两合并，最终至全部有序也是可以的。</p><p>提到一分为二很容易联想到快速排序，在最优的情况下待排序的数组每次被一分为二，将小于中间值的元素全部移到数组前半段，将大于中间值的元素全部移到数组后半段，完成一趟快排，然后对每段分别采用相同的策略从而达到整理有序，这是快排的思想，听起来有些部分确实和归并排序很像，但是区别也是很大的，比如快排不需要合并的操作，另外快排是一种不稳定的排序。</p><p>为了简单一点，我们还是采用递归的版本来描述一下归并排序，先画一个图，直观的看下归并排序中二分天下是怎么操作的，先分裂：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A[2,3,9,4,7,12,6,1,11,5]--&gt;B[2,3,9,4,7];</span><br><span class="line">    A[2,3,9,4,7,12,6,1,11,5]--&gt;C[12,6,1,11,5];</span><br><span class="line">    B[2,3,9,4,7]--&gt;D[2,3,9];</span><br><span class="line">    B[2,3,9,4,7]--&gt;E[4,7];</span><br><span class="line">    C[12,6,1,11,5]--&gt;F[12,6,1];</span><br><span class="line">    C[12,6,1,11,5]--&gt;G[11,5];</span><br><span class="line">    D[2,3,9]--&gt;H[2,3];</span><br><span class="line">    D[2,3,9]--&gt;I[9];</span><br><span class="line">    E[4,7]--&gt;J[4];</span><br><span class="line">    E[4,7]--&gt;K[7];</span><br><span class="line">    F[12,6,1]--&gt;L[12,6];</span><br><span class="line">    F[12,6,1]--&gt;M[1];</span><br><span class="line">    G[11,5]--&gt;N[11];</span><br><span class="line">    G[11,5]--&gt;O[5];</span><br><span class="line">    H[2,3]--&gt;P[2];</span><br><span class="line">    H[2,3]--&gt;Q[3];</span><br><span class="line">    L[12,6]--&gt;R[12];</span><br><span class="line">    L[12,6]--&gt;S[6];</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">idx_0</th><th style="text-align:center">idx_1</th><th style="text-align:center">idx_2</th><th style="text-align:center">idx_3</th><th style="text-align:center">idx_4</th><th style="text-align:center">idx_5</th><th style="text-align:center">idx_6</th><th style="text-align:center">idx_7</th><th style="text-align:center">idx_8</th><th style="text-align:center">idx_9</th></tr></thead><tbody><tr><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">9</td><td style="text-align:center">4</td><td style="text-align:center">7</td><td style="text-align:center">12</td><td style="text-align:center">6</td><td style="text-align:center">1</td><td style="text-align:center">11</td><td style="text-align:center">5</td></tr></tbody></table><p>排序后再合并：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">graph BT</span><br><span class="line">    A[1,2,3,4,5,6,7,9,11,12]--&gt;B[2,3,4,7,9];</span><br><span class="line">    A[1,2,3,4,5,6,7,9,11,12]--&gt;C[1,5,6,11,12];</span><br><span class="line">    B[2,3,4,7,9]--&gt;D[2,3,9];</span><br><span class="line">    B[2,3,4,7,9]--&gt;E[4,7];</span><br><span class="line">    C[1,5,6,11,12]--&gt;F[1,6,12];</span><br><span class="line">    C[1,5,6,11,12]--&gt;G[5,11];</span><br><span class="line">    D[2,3,9]--&gt;H[2,3];</span><br><span class="line">    D[2,3,9]--&gt;I[9];</span><br><span class="line">    E[4,7]--&gt;J[4];</span><br><span class="line">    E[4,7]--&gt;K[7];</span><br><span class="line">    F[1,6,12]--&gt;L[6,12];</span><br><span class="line">    F[1,6,12]--&gt;M[1];</span><br><span class="line">    G[11,5]--&gt;N[11];</span><br><span class="line">    G[11,5]--&gt;O[5];</span><br><span class="line">    H[2,3]--&gt;P[2];</span><br><span class="line">    H[2,3]--&gt;Q[3];</span><br><span class="line">    L[6,12]--&gt;R[12];</span><br><span class="line">    L[6,12]--&gt;S[6];</span><br></pre></td></tr></table></figure><h1 id="排序过程"><a href="#排序过程" class="headerlink" title="排序过程"></a>排序过程</h1><p>上面的图可以很清楚的看出怎样划分以及合并的结果，但是对于描述怎样每个子数组怎样从无序变成有序不太明显，同时也忽略了合并的算法，所以下面用语言简单描述下，其实每个子数组怎样从无序变成有序这个并不需要关心，因为数组是一个元素是必定有序，当数组包含两个元素时，说明它是由两个单元素数组“归并”而成，所以我们需要掌握的是归并的算法。同理，4个元素的数组是由两个双元素有序数组归并而成，同样说明需要掌握的只有归并的逻辑。</p><p>下面我们具体操作一下，以 <code>[2,3,4,7,9]</code> 和 <code>[1,5,6,11,12]</code> 两个子数组归并成最终有序数组为例，模拟一次从小到大排序。</p><p>首先我们假设有两个指针<code>L</code> 和 <code>R</code> 分别指向两个数组的首个元素，另有一个数组 <code>M</code> 为结果数组，初始为空 <code>M = []</code>，下面开始操作，初始数据如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>(L),<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>(R),<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><ol><li>比较两个指针元素，找出两个指针所指的更小的元素，放入结果数组后指针加一，<code>R</code> 指针元素更小，元素1放入结果数组，指针向后加一</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>(L),<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>(R),<span class="number">6</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><ol><li>继续步骤1，这次 <code>L</code> 指针元素更小，元素2放入结果数组，指针向后加一</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>(L),<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>(R),<span class="number">6</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><ol><li>继续比较，还是 <code>L</code> 指针元素更小，元素3放入结果数组，指针向后移动</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>(L),<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>(R),<span class="number">6</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><ol><li>继续比较，仍然是 <code>L</code> 指针元素更小，元素4放入结果数组，指针向后移动</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>(L),<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>(R),<span class="number">6</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><ol><li>继续比较，这次变成 <code>R</code> 指针元素更小，元素5放入结果数组，指针向后移动</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>(L),<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>(R),<span class="number">11</span>,<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><ol><li>继续比较，仍然是 <code>R</code> 指针元素更小，元素6放入结果数组，指针向后移动</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>(L),<span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>(R),<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><ol><li>继续比较，现在是 <code>L</code> 指针元素更小，元素7放入结果数组，指针向后移动</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>(L)]</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>(R),<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure><ol><li>继续比较，仍是 <code>L</code> 指针元素更小，元素9放入结果数组，指针向后移动</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>](L)</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>(R),<span class="number">12</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><ol><li>现在 <code>L</code> 指针已经走到了数组的最后，而 <code>R</code> 所在的数组还有元素，说明 <code>R</code> 中剩余的元素肯定都比 <code>L</code> 最后一个元素都大，所以直接把 <code>R</code> 中剩余元素11和12放到结果数组就完成了排序</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">9</span>](L)</span><br><span class="line">[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">11</span>,<span class="number">12</span>](R)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>,<span class="number">12</span>]</span><br></pre></td></tr></table></figure><p>从排序过程也可以看出，使用归并排序需要一个额外的结果数组来完成合并操作，下面我们用代码来实现一下这个算法。</p><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：  交换两个变量</span></span><br><span class="line"><span class="comment">参数：  element1--被交换的第一个元素的地址</span></span><br><span class="line"><span class="comment">       element2--被交换的第二个元素的地址</span></span><br><span class="line"><span class="comment">返回值：无</span></span><br><span class="line"><span class="comment">注意： 只用来表示思路，不考虑指针为空等特殊情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_data</span><span class="params">(<span class="keyword">int</span>* element1, <span class="keyword">int</span>* element2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> middle_value = *element1;</span><br><span class="line">    *element1 = *element2;</span><br><span class="line">    *element2 = middle_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：  将数组的两个有序段[left,mid]和[mid+1,right]合并成[left,right]区间完整有序</span></span><br><span class="line"><span class="comment">参数：  array--表示待排序的数组，此处会退化成指针</span></span><br><span class="line"><span class="comment">        left--数组第一段开始的索引</span></span><br><span class="line"><span class="comment">        mid--数组第一段结束的索引</span></span><br><span class="line"><span class="comment">        right--数组第二段结束的索引</span></span><br><span class="line"><span class="comment">返回值：无</span></span><br><span class="line"><span class="comment">注意： 只用来表示思路，不考虑指针为空等特殊情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* temp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((right-left+<span class="number">1</span>)*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, l = left, r = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid &amp;&amp; r &lt;= right)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">array</span>[l] &lt;= <span class="built_in">array</span>[r])</span><br><span class="line">            temp[i++] = <span class="built_in">array</span>[l++];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            temp[i++] = <span class="built_in">array</span>[r++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一段仍有元素没加到结果</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt;= mid) temp[i++] = <span class="built_in">array</span>[l++];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二段仍有元素没加到结果</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt;= right) temp[i++] = <span class="built_in">array</span>[r++];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果赋值回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= right - left; j++) <span class="built_in">array</span>[left+j] = temp[j];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能：  归并排序，实现数组元素从小到大排列</span></span><br><span class="line"><span class="comment">参数：  array--表示待排序的数组，此处会退化成指针</span></span><br><span class="line"><span class="comment">        left--数组第一个待排序元素索引</span></span><br><span class="line"><span class="comment">        right--数组最后一个待排序元素索引</span></span><br><span class="line"><span class="comment">返回值：无</span></span><br><span class="line"><span class="comment">注意： 只用来表示思路，不考虑指针为空等特殊情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> <span class="built_in">array</span>[], <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (right &gt; left)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (right + left) / <span class="number">2</span>;</span><br><span class="line">        merge_sort(<span class="built_in">array</span>, left, mid);</span><br><span class="line">        merge_sort(<span class="built_in">array</span>, mid+<span class="number">1</span>, right);</span><br><span class="line">        merge(<span class="built_in">array</span>, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>归并排序的核心的是分割和归并，分割时采取递归一分为二就可以，然后归并才是体现算法精髓的地方，合并时通常使用两个指针来分别指向数组的两段，通过不断比较元素大小将两段有序数组合并成一段，在排序过程中使用了额外的空间，这也是归并排序的劣势，例子中为了方便每次合并时都申请了新数组，其实可以优化一下，在排序开始申请一个临时数组就可以，中间合并时使用同一个临时数组就可以。</p><h1 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h1><p><a href="https://tool.lu/coderunner/" target="_blank" rel="noopener">在线编辑器</a>是一个很方便的测试代码的环境，如果想本地调试一下，也可以直接下载<a href="https://github.com/AlbertGithubHome/Bella/blob/master/c%2B%2B/sort_algorithm/merge_sort.cpp" target="_blank" rel="noopener">归并排序–源码</a>，在本地编译后进行调试，其实边看代码边调试是理解算法思路很有效的方式。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>归并排序的核心思想是不断二分后合并两段有序子数组达到最终有序</li><li>归并排序因为是优先比较相邻的元素，所以是稳定的排序算法</li><li>归并排序使用了临时空间，最大与原数组等长，优化时可以在排序前申请一个就可以服务于整个排序过程</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/127148647" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>生活的点点滴滴随时间流淌，它们不是逝去，恰恰是它们组成了我们的生活，我们可以选择躺平，可以选择奋斗，可以选择全力以赴，当我们还可以选择的时候，请感恩你所拥有的一切吧，特别是对已经攥在手里的东西，深深地表达一下感激，勿等失去徒伤悲。</p><p>2022-10-4 02:20:05</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;再一次总结基础的排序算法，印象里距离上一次总结排序也没过多久，查询后才发现上一篇总结&lt;a href=&quot;https://blog.csdn.net/albertsh/article/details/94229646&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《排序算法系列之（六）——逐步砍掉树杈的堆排序》&lt;/a&gt;到现在已经过去了3年多的时间，真是时光荏苒，岁月如梭啊，这次想起总结排序起因并不是排序，而是查找逆序数对，而解决逆序数对通常使用的两种方式是归并排序和离散化树状数组，所以我又把归并排序捡起来了&lt;/p&gt;
    
    </summary>
    
      <category term="Sort" scheme="http://AlbertGithubHome.github.io/blog/categories/Sort/"/>
    
    
      <category term="算法" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="概念" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%A6%82%E5%BF%B5/"/>
    
      <category term="Sort" scheme="http://AlbertGithubHome.github.io/blog/tags/Sort/"/>
    
      <category term="归并" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>本来打算完整安装一次redmine最终还是放弃了</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/10/01/%E6%9C%AC%E6%9D%A5%E6%89%93%E7%AE%97%E5%AE%8C%E6%95%B4%E5%AE%89%E8%A3%85%E4%B8%80%E6%AC%A1redmine%E6%9C%80%E7%BB%88%E8%BF%98%E6%98%AF%E6%94%BE%E5%BC%83%E4%BA%86/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/10/01/本来打算完整安装一次redmine最终还是放弃了/</id>
    <published>2022-10-01T15:59:11.000Z</published>
    <updated>2022-11-20T13:13:58.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>redmine</code> 是最近工作中经常使用的项目管理软件，因为平时主要使用跟踪一些开发进度和bug修复情况，平时使用并不算重度，体验还不错，最近因为需要停电重启，所以想借着这个机会学习一下怎么安装，看了不少教程，各种安装方法，因为依赖项确实有点多，至今也没按照官网wiki安装成功（战术捂脸），不过从中发现了很多新的知识点，还是记录一下。</p><a id="more"></a><h1 id="安装参考"><a href="#安装参考" class="headerlink" title="安装参考"></a>安装参考</h1><p>其实官方的wiki写的就不错，但是有关依赖项的部分提及的很少，还有就是没有说怎么安装 <code>ruby</code>，先把写的比较好的文档列举在此，有时间再试试，其实也快安装成功了，就是云主机内存太低，有一步安装需要编译，总是内存不足…</p><ul><li><a href="https://www.redmine.org/projects/redmine/wiki/redmineinstall" target="_blank" rel="noopener">redmine/wiki/redmineinstall</a></li><li><a href="https://qizhanming.com/blog/2020/04/16/how-to-install-and-config-redmine-4-on-centos-7" target="_blank" rel="noopener">CentOS 7 安装 Redmine 4.1</a></li><li><a href="https://www.361way.com/redmine/6154.html" target="_blank" rel="noopener">Linux下redmine安装使用</a></li><li><a href="https://www.cnblogs.com/kaishirenshi/p/12559138.html" target="_blank" rel="noopener">centos安装ruby及更换gem的源</a></li><li><a href="https://www.361way.com/bitnami-redmine/6256.html" target="_blank" rel="noopener">bitnami redmine一键式安装</a></li><li><a href="http://blog.51yip.com/server/1883.html" target="_blank" rel="noopener">centos 安装 redmine mysql ruby on rails</a></li><li><a href="https://gist.github.com/brunojppb/bb5dbfacdbcb06ce6bd6303329ff2d72" target="_blank" rel="noopener">How to setup Redmine 4 on Ubuntu 18.04</a></li><li><a href="https://developer.aliyun.com/article/670150" target="_blank" rel="noopener">Linux 下安装 Redmine</a></li><li><a href="https://blog.csdn.net/yang1393214887/article/details/108488754" target="_blank" rel="noopener">linux搭建redmine：bitnami-redmine-4.1.1-4-linux-x64-installer.run</a></li><li><a href="https://blog.csdn.net/yunyin_link/article/details/101100351" target="_blank" rel="noopener">Redmine安装神器：Bitnami redmine 的安装指导（Linux的安装方法）</a></li><li><a href="https://hub.docker.com/r/bitnami/redmine/" target="_blank" rel="noopener">Redmine packaged by Bitnami</a></li></ul><p>以上列举的教程前几个还不错，虽然没安装完整，但是接触了ruby、nginx、mysql这些依赖项，也了解了不少新东西，大概知道运行 redmine 需要哪些东西了，完成安装只是时间和硬件问题，咳咳~</p><p>其中有几篇文章建议利用 bitnami 来简化 redmine 的安装，看步骤确实方便了很多，但是不幸的是 Bitnami 在2021年6月30日之前停止对大多数Linux本地安装程序的支持，我已经找不到安装程序 <code>bitnami-redmine-4.0.5-0-linux-x64-installer.run</code>了</p><blockquote><p>Bitnami plans on discontinuing the support for the majority of Native Installers for Linux by June 30th 2021. Please read this <a href="https://blog.bitnami.com/2021/04/amplifying-our-focus-on-cloud-native.html" target="_blank" rel="noopener">blog post</a> for more information.</p></blockquote><h1 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h1><p>已经多次接触到 <code>Ruby</code> 了，上次是升级gitlab服务器的时候，新版本的gitlab需要安装ruby依赖项，这次安装redmine同样需要安装Ruby，对于Ruby的安装省事的方法可以通过Linux对应包管理工具直接安装，但是版本通常达不到要求，所以我们总是需要采用复杂的方式才可以安装Ruby，先了解下Ruby是什么。</p><p>Ruby 是一种跨平台、面向对象的动态类型编程语言。Ruby 体现了表达的一致性和简单性，它不仅是一门编程语言，更是表达想法的一种简练方式。</p><p>Ruby 的作者于 1993 年 2 月 24 日开始编辑 Ruby，直至 1995 年 12 月才正式公开发布。之所以称为 Ruby，是因为 Perl 的发音与 6 月的诞生石 pearl（珍珠）相同，因此 Ruby 以 7 月的诞生石 ruby（红宝石）命名。</p><p>Ruby 的特性与 Smalltalk、Perl 和 Python 类似。Perl、Python 和 Smalltalk 是脚本语言。Smalltalk 是一个真正的面向对象语言。Ruby，与 Smalltalk 一样，是一个完美的面向对象语言。使用 Ruby 的语法比使用 Smalltalk 的语法要容易得多。</p><h2 id="Rails"><a href="#Rails" class="headerlink" title="Rails"></a>Rails</h2><p><code>Ruby on Rails</code>（官方简称为 Rails，亦被简称为 RoR），是一个使用 Ruby 语言写的开源 Web 应用框架，它是严格按照 MVC 结构开发的。它努力使自身保持简单，来使实际的应用开发时的代码更少，使用最少的配置。 Rails 的设计原则包括“不做重复的事”和“惯例优于设置” 。</p><p><code>Ruby on Rails</code> 是一种结合 Ruby 语言与 Rails 平台的一种网页程序框架，Ruby 语言以自然、简洁、快速著称，全面支持面向对象程序设计，而 Rails 则是 Ruby 广泛应用方式之一，在 Rails 平台上设计出一套独特的 MVC 开发架构，采取模型（Model）、视图（View）、控制器（Controller）分离的开发方式，不但减少了开发中的问题，更简化了许多繁复的动作。</p><h2 id="RubyGems"><a href="#RubyGems" class="headerlink" title="RubyGems"></a>RubyGems</h2><p><code>RubyGems</code> 是 Ruby 的一个包管理器，它提供一个分发 Ruby 程序和库的标准格式，还提供了一个管理程序包安装的工具，它将一个 Ruby 应用程序打包到一个 gem 里，作为一个安装单元，旨在方便地管理 gem 安装的工具，以及用于分发 gem 的服务器，这类似于 Ubuntu 下的apt-get，Centos 的 yum，Python 的 pip，大约创建于2003年11月，从Ruby 1.9版起成为Ruby标准库的一部分。</p><h2 id="RVM"><a href="#RVM" class="headerlink" title="RVM"></a>RVM</h2><p>在linux上安装Ruby在之前提到了，可以通过对应系统的包管理软件来直接安装，比如在CentOS上可以直接运行 <code>sudo yum install ruby</code> 命令来安装，但是这种方式通常安装的版本比较低，无法满足需要，所以你也可以采用源码编译的方式安装。</p><p>如果从源码级别安装已经超出了你的能力范围还可以使用 RVM 来安装，它是 Ruby 的版本管理工具，类似 nodejs的 nvm 工具，可以方便的安装和配置当前系统使用的Ruby版本，安装RVM的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB</span><br><span class="line">$ curl -sSL https://get.rvm.io | bash -s stable</span><br></pre></td></tr></table></figure><p>若安装报错先输入以下命令再继续：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">command</span> curl -sSL https://rvm.io/mpapis.asc | gpg2 --import -</span><br><span class="line">$ <span class="built_in">command</span> curl -sSL https://rvm.io/pkuczynski.asc | gpg2 --import -</span><br></pre></td></tr></table></figure><p>之后就可以利用 rvm 命令来安装 Ruby 了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rvm install 2.6</span><br><span class="line">$ ruby -v</span><br></pre></td></tr></table></figure><h1 id="另辟蹊径"><a href="#另辟蹊径" class="headerlink" title="另辟蹊径"></a>另辟蹊径</h1><p>安装 redmine 很困难，难道我们就没办法了吗？不！我们还有 <code>docker</code>，一条命令 <code>docker run -d --name some-redmine -p 8080:3000 redmine</code> 搞定，首先会下载所需要的镜像，之后直接启动，通过 <code>http://IP:8080/</code> 直接就可以访问了，真香~</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/redmine/redmine.png" alt="redmine"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>redmine 是一个项目管理web软件，依赖Rails、MySQL、Nginx等组件或服务</li><li>Ruby on Rails 是一个使用 Ruby 语言写的开源 Web 应用框架，严格按照 MVC 结构开发</li><li>可以通过RVM安装Ruby， RVM 是 Ruby 的版本管理工具，可以方便的安装和配置当前系统使用的Ruby版本</li><li>如果参照官方的wiki实在安装不上redmine，可以通过 docker 来安装，虽然看起来像个玩具，但是真的能用啊</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/126910878" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>黄河远上白云间，一片孤城万仞山。羌笛何须怨杨柳，春风不度玉门关。</p><p>2022-10-3 02:33:26</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;redmine&lt;/code&gt; 是最近工作中经常使用的项目管理软件，因为平时主要使用跟踪一些开发进度和bug修复情况，平时使用并不算重度，体验还不错，最近因为需要停电重启，所以想借着这个机会学习一下怎么安装，看了不少教程，各种安装方法，因为依赖项确实有点多，至今也没按照官网wiki安装成功（战术捂脸），不过从中发现了很多新的知识点，还是记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://AlbertGithubHome.github.io/blog/categories/tools/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="docker" scheme="http://AlbertGithubHome.github.io/blog/tags/docker/"/>
    
      <category term="redmine" scheme="http://AlbertGithubHome.github.io/blog/tags/redmine/"/>
    
      <category term="ruby" scheme="http://AlbertGithubHome.github.io/blog/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>如期而至的SVN服务器迁移引来一个大瓜XAMPP</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/09/13/%E5%A6%82%E6%9C%9F%E8%80%8C%E8%87%B3%E7%9A%84SVN%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB%E5%BC%95%E6%9D%A5%E4%B8%80%E4%B8%AA%E5%A4%A7%E7%93%9CXAMPP/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/09/13/如期而至的SVN服务器迁移引来一个大瓜XAMPP/</id>
    <published>2022-09-13T15:40:39.000Z</published>
    <updated>2022-10-02T18:39:19.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前对于版本控制工具 <code>svn</code> 和 <code>git</code> 更多的是操作命令的使用，而最近逐步开始接触使用环境的搭建了，对于一些私有项目还是需要在内部服务器上搭建一个 svn 或者 git 服务器的，前段时间因为 SVN 服务器硬盘空间告急，所以 SVN 数据迁移被提上了日程，经过几个月的准备，终于要动手了，期间也讨论了几个方案，结果最终迁移完发现，和我想的完全不一样啊，看来还是我太年轻了，世界真大~</p><a id="more"></a><h1 id="方案评估"><a href="#方案评估" class="headerlink" title="方案评估"></a>方案评估</h1><p>进行重大行动前总要有个可行性分析，虽然这不算特别重大，但终归会影响一个项目组的工作，所以要尽可能考虑周全，避免造成数据损失，影响开发进度，所以一开始基于目前数据仓库的现状提出了几种迁移的方案：</p><ol><li><p>原机器增加硬盘：经运维同学确认机器太老，不支持扩展了，此路不通</p></li><li><p>采用 <code>svnadmin dump</code> 这种官方推荐的备份方式：这种方式采用 <code>svnadmin dump</code>、<code>svndumpfilter</code>、<code>svnadmin load</code> 等命令可以实现仓库备份、还原、甚至定向过滤等目的，但这种方式适合数据少短历史的仓库，如果版本比较大，如版本数增长数十万，那么dump的过程将非常慢，恢复过程更耗时，另外还有一个难点，这种方式要求磁盘空间足够，但是目前仓库占用90%，剩余的10%用来备份绝对不够的，所以此种方法也基本行不通</p></li><li><p>丢弃提交历史，本地客户端更新最新数据，然后提交到新配的服务器上，做0版提交：此种方法可以绕过磁盘不足的问题，但这种方式丢掉了历史记录，并且改变了仓库的uuid，测试时发现无论是 <code>switch</code> 还是 <code>relocate</code> 命令都无法直接切换，基本上要重新下载一份数据了。</p></li><li><p>把整个系统连同数据直接镜像到新配置的服务器上：这种方式可以保留完整的提交记录，同时不需要老硬盘提供太大的空间，但操作难度上还需运维同学评估。</p></li><li><p>其他：使用 <code>svnadmin hotcopy</code> 进行全量拷贝，备份过程较快，灾难恢复也很快；使用 <code>svnsync</code> 制作2个镜像库，须在 svn1.4 版本以上使用。这些基本都是备份的方式，是保证数据安全应该采取的策略，可以作为参考。</p></li></ol><p>所以综上优先选择全盘镜像，其次选择用最新的数据做0版的方式，除此之外如果用 <code>svnadmin</code> 因硬盘受限就只能划分成一个个子目录来迁移了。</p><h1 id="前奏"><a href="#前奏" class="headerlink" title="前奏"></a>前奏</h1><p>之前我接触到的svn服务器基本就是安装svnserve就好，修改用户的访问权限可以直接在服务器上编辑access配置文件，后来了解到了 <code>svnmanager</code> 才知道原来有个可以修改这些配置文件的网页啊，用起来方便了许多，这次迁移之前我还是停留在这个层面上，结果运维同学搭建好环境后，我用 <code>ps</code> 命令找了半天也没找到 <code>svnserve</code> 进程，然后在历史记录里发现了 <code>xampp</code> 这货</p><p>接着便查找了很多关于 <code>xampp</code> 的知识，才发现之前还是弱了，这些基本都没了解过，经过这一次迁移，接触到了几十个命令、相关工具和配置文件，特此记录一下整个过程，方便今后复习和拿来就用。</p><p>最终迁移的方案选择的是数据整体拷贝，通过网络从旧机器发送到新机器上，然后在新机器上搭建svn服务器环境，这种方式好处很多：不依赖原机器剩余的硬盘空间、传输方便、可以完整保留历史记录、不用重新配置权限文件、修改域名绑定后对所有使用者几乎无感，即使需要重新认证，输入自己的svn用户名密码就搞定了，非常方便。</p><p>svn客户端访问服务端时可以通过svnserve、svnserver+ssh、Apache等多种方式访问。svnserve是一个小巧、轻便的服务器程序，设置简单，可以使用 subversion 专有的协议进行访问；但因为本身不提供加密通讯的功能，安全性低，可以通过ssh建立在安全隧道后调用svnserve程序；当然也可以通过http访问，利用Apache通过mod_dav_svn访问版本库，进而进行svn的操作。</p><p>我平时用的较多的也是通过 http 协议来访问和更新 svn 仓库的，可以直接搭建 Apache 来实现，也可以使用很方便的 xammp 来实现，本质上访问svn数据和使用svnmanager管理用户和权限都是网页服务，所以这两项都可以利用xammp，那么接下来简单了解下什么是 xammp</p><h1 id="XAMMP"><a href="#XAMMP" class="headerlink" title="XAMMP"></a>XAMMP</h1><p>XAMPP（Apache+MariaDB+PHP+PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是 LAMPP（Linux+Apache+MySQL+PHP+PERL），但是为了避免误解，最新的几个版本就改名为 XAMPP 了。</p><p>XAMMP 的出现源于人们对安装网页服务时的挫败感，许多人通过他们自己的经验认识到安装 Apache 服务器是件不容易的事儿，如果您想添加 MySQL、PHP 和 Perl等环境那就更困难了。XAMPP 是一个易于安装且包含 MySQL、PHP 和 Perl 的 Apache 发行版，非常容易安装和使用：只需下载，解压缩，启动即可，最近的版本把解压缩这一步替换成了运行脚本安装，其实和解压缩一样。</p><p>因为软件包非常全，一下就解决了访问、数据存储、数据管理、插件安装管理等多个方面，我查看了其中一些软件的配置文件，比如MySQL，无论是配置路径还是数据存储路径都是在 XAMPP 安装路径下，如果想在新的机器上部署一套完全一样的服务，只需要拷贝整个安装目录到新机器上就行了（前提是一些安装时创建的新用户要有），保险的做法是在新机器上安装一次，再用旧机器数据覆盖上去就行了。</p><p>前面夸了 <code>XAMPP</code> 这么久，那么它有没有缺点呢？当然有！缺点就是不安全，XAMPP仅用于开发目的，它具有某些配置设置（比如MySQL没有密码），使本地开发变得容易，如果你想让你搭建的XAMPP可以从互联网访问，这样并不是一个好的做法，可以使用WAMP, MAMP或LAMP等替换方案，这些是类似的软件包，更适合生产环境。</p><p>不知道是不是因为仅用于开发环境，网络上很难找到在Linux 环境下安装 XAMPP + subversion + svnmanager 的完整教程，在 windows 下安装倒是有几篇，所以我追随运维同学使用历史命令列表，尝试完整搭建一次 svn 服务，这可是从几百个命令列表中不断尝试出来的。</p><h1 id="搭建svn服务"><a href="#搭建svn服务" class="headerlink" title="搭建svn服务"></a>搭建svn服务</h1><p>系统环境如下：</p><blockquote><p>[root@VM-0-3-centos /]# hostnamectl<br>  Static hostname: VM-0-3-centos<br>        Icon name: computer-vm<br>          Chassis: vm<br>       Machine ID: 5467bde017714ffcad6d449b4a1fbbbc<br>          Boot ID: 8aa2f3bd14104190bc11e39bf2831052<br>   Virtualization: kvm<br> Operating System: CentOS Linux 7 (Core)<br>      CPE OS Name: cpe:/o:centos:centos:7<br>           Kernel: Linux 3.10.0-1127.19.1.el7.x86_64<br>     Architecture: x86-64</p></blockquote><h2 id="准备软件包"><a href="#准备软件包" class="headerlink" title="准备软件包"></a>准备软件包</h2><p>可以自行去官网下载：</p><ul><li>xampp-linux-x64-5.6.40-1-installer.run</li><li>subversion-1.10.8-bin.tar.gz</li><li>svnmanager-1.10.tar.gz</li></ul><h2 id="安装必要环境和工具"><a href="#安装必要环境和工具" class="headerlink" title="安装必要环境和工具"></a>安装必要环境和工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install vim net-tools telnet wget <span class="built_in">bind</span>-utils ipmitool ntp rsync</span><br><span class="line">yum install libserf</span><br></pre></td></tr></table></figure><h2 id="安装xampp"><a href="#安装xampp" class="headerlink" title="安装xampp"></a>安装xampp</h2><p>给脚本添加可执行命令后，直接运行即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x xampp-linux-x64-5.6.40-1-installer.run</span><br><span class="line">./xampp-linux-x64-5.6.40-1-installer.run</span><br></pre></td></tr></table></figure><p>安装过程还真是挺容易的，一直输入 <code>Y</code> 就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos software]<span class="comment"># ./xampp-linux-x64-5.6.40-1-installer.run</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Welcome to the XAMPP Setup Wizard.</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Select the components you want to install; clear the components you <span class="keyword">do</span> not want</span><br><span class="line">to install. Click Next when you are ready to <span class="built_in">continue</span>.</span><br><span class="line"></span><br><span class="line">XAMPP Core Files : Y (Cannot be edited)</span><br><span class="line"></span><br><span class="line">XAMPP Developer Files [Y/n] :Y</span><br><span class="line"></span><br><span class="line">Is the selection above correct? [Y/n]: Y</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Installation Directory</span><br><span class="line"></span><br><span class="line">XAMPP will be installed to /opt/lampp</span><br><span class="line">Press [Enter] to <span class="built_in">continue</span>:</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Setup is now ready to begin installing XAMPP on your computer.</span><br><span class="line"></span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n]: Y</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Please <span class="built_in">wait</span> <span class="keyword">while</span> Setup installs XAMPP on your computer.</span><br><span class="line"></span><br><span class="line"> Installing</span><br><span class="line"> 0% ______________ 50% ______________ 100%</span><br><span class="line"> <span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">Setup has finished installing XAMPP on your computer.</span><br></pre></td></tr></table></figure><h3 id="运行xampp"><a href="#运行xampp" class="headerlink" title="运行xampp"></a>运行xampp</h3><p>进入到目录下启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lampp</span><br><span class="line">./xampp start</span><br></pre></td></tr></table></figure><p>报下面的错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./xampp start</span></span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/bash: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line">id: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/share/xampp/xampplib: line 11: <span class="built_in">test</span>: -ne: unary operator expected</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">XAMPP: netstat: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">netstat: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/httpd: error <span class="keyword">while</span> loading shared libraries: librt.so.1: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">XAMPP: hostname: error <span class="keyword">while</span> loading shared libraries: libnsl.so.1: cannot open shared object file: No such file or directory</span><br><span class="line">netstat: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">XAMPP: netstat: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/bin/sh: error <span class="keyword">while</span> loading shared libraries: libdl.so.2: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line">/opt/lampp/bin/gettext: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br><span class="line"></span><br><span class="line">cat: error <span class="keyword">while</span> loading shared libraries: libc.so.6: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><h3 id="编辑xampp"><a href="#编辑xampp" class="headerlink" title="编辑xampp"></a>编辑xampp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim xammp</span><br></pre></td></tr></table></figure><p>将文件中 <code>export LD_ASSUME_KERNEL=2.2.5</code> 内容改成 <code>export LD_ASSUME_KERNEL=2.8.0</code>，再次启动时正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos lampp]<span class="comment"># ./xampp start</span></span><br><span class="line">Starting XAMPP <span class="keyword">for</span> Linux 5.6.40-1...</span><br><span class="line">XAMPP: Starting Apache...ok.</span><br><span class="line">XAMPP: Starting MySQL...ok.</span><br><span class="line">XAMPP: Starting ProFTPD...ok.</span><br></pre></td></tr></table></figure><h3 id="访问xampp"><a href="#访问xampp" class="headerlink" title="访问xampp"></a>访问xampp</h3><p>浏览器输入IP后回车，显示页面如下，XAMPP 就安装好了，是不是很方便</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/svn/xampppage.png" alt="xampp"></p><h2 id="安装subversion"><a href="#安装subversion" class="headerlink" title="安装subversion"></a>安装subversion</h2><p>直接解压，移动到指定的位置即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf subversion-1.10.8-bin.tar.gz</span><br><span class="line">mv subversion /usr/<span class="built_in">local</span>/</span><br><span class="line">cp /usr/<span class="built_in">local</span>/subversion/*.so /opt/lampp/modules/</span><br></pre></td></tr></table></figure><h2 id="安装svnmanager"><a href="#安装svnmanager" class="headerlink" title="安装svnmanager"></a>安装svnmanager</h2><p>svnmanager 依赖 <code>VersionControl_SVN-0.5.1</code>，所以需要先安装这个组件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lampp/bin</span><br><span class="line">./pear install VersionControl_SVN-0.5.1</span><br></pre></td></tr></table></figure><p>输出信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos bin]<span class="comment"># ./pear install VersionControl_SVN-0.5.1</span></span><br><span class="line">WARNING: channel <span class="string">"pear.php.net"</span> has updated its protocols, use <span class="string">"pear channel-update pear.php.net"</span> to update</span><br><span class="line">downloading VersionControl_SVN-0.5.1.tgz ...</span><br><span class="line">Starting to download VersionControl_SVN-0.5.1.tgz (31,559 bytes)</span><br><span class="line">.........<span class="keyword">done</span>: 31,559 bytes</span><br><span class="line">install ok: channel://pear.php.net/VersionControl_SVN-0.5.1</span><br></pre></td></tr></table></figure><p>解压 <code>svnmanager-1.10.tar.gz</code> 移动到指定位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf svnmanager-1.10.tar.gz</span><br><span class="line">mv svnmanager-1.10 /opt/lampp/htdocs/svnmanager</span><br></pre></td></tr></table></figure><h2 id="创建svn仓库目录"><a href="#创建svn仓库目录" class="headerlink" title="创建svn仓库目录"></a>创建svn仓库目录</h2><p>新建svn必要的目录，并调整目录权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /export/svnrepos/config</span><br><span class="line">mkdir -p /export/svnrepos/repos</span><br><span class="line">mkdir -p /export/svnrepos/trash</span><br><span class="line">chown -R daemon:daemon /export/svnrepos/</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>首先修改Apache的主配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/lampp/etc/httpd.conf /opt/lampp/etc/httpd.conf.bak</span><br><span class="line">vim /opt/lampp/etc/httpd.conf</span><br></pre></td></tr></table></figure><p>搜索 <code>LoadModule</code> 在后面添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add for svn</span></span><br><span class="line">LoadModule dav_svn_module modules/mod_dav_svn.so</span><br><span class="line">LoadModule authz_svn_module modules/mod_authz_svn.so</span><br><span class="line"></span><br><span class="line">&lt;Location /svn&gt;</span><br><span class="line">    DAV svn</span><br><span class="line">    SVNParentPath /<span class="built_in">export</span>/svnrepos/repos</span><br><span class="line">    <span class="comment"># Allow the index page to list all the repositories it contains</span></span><br><span class="line">    SVNListParentPath On</span><br><span class="line">    <span class="comment"># Require SSL connection for password protection.</span></span><br><span class="line">    <span class="comment"># SSLRequireSSL</span></span><br><span class="line">    AuthType Basic</span><br><span class="line">    <span class="comment"># Message to give to the committer</span></span><br><span class="line">    AuthName <span class="string">"AW SVN"</span></span><br><span class="line">    <span class="comment"># File listing users with write (commit) access</span></span><br><span class="line">    AuthzSVNAccessFile /<span class="built_in">export</span>/svnrepos/config/svn_access_file</span><br><span class="line">    AuthUserFile       /<span class="built_in">export</span>/svnrepos/config/svn_passwd_file</span><br><span class="line">    Require valid-user</span><br><span class="line">&lt;/Location&gt;</span><br></pre></td></tr></table></figure><p>修改svnmanger配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/lampp/htdocs/svnmanager/config.php.linux /opt/lampp/htdocs/svnmanager/config.php</span><br><span class="line">vim /opt/lampp/htdocs/svnmanager/config.php</span><br></pre></td></tr></table></figure><p>按照自己的本地目录修改成以下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">//Shell <span class="built_in">command</span><span class="string">'s</span></span><br><span class="line"><span class="string">$htpassword_cmd                         = "/opt/lampp/bin/htpasswd";</span></span><br><span class="line"><span class="string">$svn_cmd                                = "/usr/local/subversion/bin/svn";</span></span><br><span class="line"><span class="string">$svnadmin_cmd                           = "/usr/local/subversion/bin/svnadmin";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Subversion locations</span></span><br><span class="line"><span class="string">$svn_config_dir                         = "/export/svnrepos/config/";</span></span><br><span class="line"><span class="string">$svn_repos_loc                          = "/export/svnrepos/repos/";</span></span><br><span class="line"><span class="string">$svn_passwd_file                        = "/export/svnrepos/config/svn_passwd_file";</span></span><br><span class="line"><span class="string">$svn_access_file                        = "/export/svnrepos/config/svn_access_file";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//If the following is set, removing a repository will cause it to be</span></span><br><span class="line"><span class="string">//moved to this location rather than being deleted.</span></span><br><span class="line"><span class="string">$svn_trash_loc                          = "/export/svnrepos/trash/";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//Data Source Name (only tested with mysql and sqlite!!)</span></span><br><span class="line"><span class="string">//</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$dsn                            = "mysqli://svnmanageruser:xxxpass@localhost/svnmanager";</span></span><br></pre></td></tr></table></figure><p>基本上看注释和变量名都能明白各个配置的作用，简单解释几个：</p><ul><li><code>$htpassword_cmd</code>：用于加密svn用户密码的，svn支持明文密码，使用加密后密码更安全一些</li><li><code>$svn_passwd_file</code>：保存SVN仓库所有用户的密码文件，svnmanager增删改用户时不仅修改自己的数据库，也会同步修改此文件</li><li><code>$svn_access_file</code>：保存SVN仓库所有权限访问规则，svnmanager增删改用户和组的权限时不仅修改自己的数据库，也会同步修改此文件</li><li><code>$dsn</code>：svnmanager自己访问MySQL的用户名、密码、及数据库名字</li></ul><h2 id="为svnmanager创建MySQL用户"><a href="#为svnmanager创建MySQL用户" class="headerlink" title="为svnmanager创建MySQL用户"></a>为svnmanager创建MySQL用户</h2><p>直接在命令行用mysql命令就可以登录MySQL，无需密码，这也是前面提到的XAMPP不安全的地方，好在设置的是只允许本地访问</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/lammp/bin</span><br><span class="line">./mysql</span><br></pre></td></tr></table></figure><p>展示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos bin]<span class="comment"># ./mysql</span></span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 13</span><br><span class="line">Server version: 10.1.38-MariaDB Source distribution</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br></pre></td></tr></table></figure><p>为svnmanager创建MySQL用户，并授予权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE svnmanager;</span><br><span class="line">CREATE USER <span class="string">'svnmanageruser'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'xxxpass'</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON db . * TO <span class="string">'svnmanageruser'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; CREATE DATABASE svnmanager;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; CREATE USER <span class="string">'svnmanageruser'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'xxxpass'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; GRANT ALL PRIVILEGES ON svnmanager . * TO <span class="string">'svnmanageruser'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| phpmyadmin         |</span><br><span class="line">| svnmanager         |</span><br><span class="line">| <span class="built_in">test</span>               |</span><br><span class="line">+--------------------+</span><br><span class="line">6 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt; use svnmanager</span><br><span class="line">Database changed</span><br><span class="line">MariaDB [svnmanager]&gt; show tables;</span><br><span class="line">Empty <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">MariaDB [svnmanager]&gt;</span><br></pre></td></tr></table></figure><h2 id="重启xammp服务"><a href="#重启xammp服务" class="headerlink" title="重启xammp服务"></a>重启xammp服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/lampp/xammp restart</span><br></pre></td></tr></table></figure><p>展示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos ~]<span class="comment"># /opt/lampp/xampp restart</span></span><br><span class="line">Restarting XAMPP <span class="keyword">for</span> Linux 5.6.40-1...</span><br><span class="line">XAMPP: Stopping Apache...ok.</span><br><span class="line">XAMPP: Stopping MySQL...ok.</span><br><span class="line">XAMPP: Stopping ProFTPD...ok.</span><br><span class="line">XAMPP: Starting Apache...ok.</span><br><span class="line">XAMPP: Starting MySQL...ok.</span><br><span class="line">XAMPP: Starting ProFTPD...ok.</span><br></pre></td></tr></table></figure><h2 id="访问svnmanager"><a href="#访问svnmanager" class="headerlink" title="访问svnmanager"></a>访问svnmanager</h2><p>在浏览器输入<code>IP地址/svnmanager/</code> 访问如下：</p><p><img src="https://cdn.jsdelivr.net/gh/albertgithubhome/cdn/img/svn/svnmanager.png" alt="svnmanager"></p><h3 id="登录svnmanager"><a href="#登录svnmanager" class="headerlink" title="登录svnmanager"></a>登录svnmanager</h3><p>svnmanager安装后默认使用admin用户登录，密码也是admin，这个可以在 <code>/opt/lampp/htdocs/svnmanager/config.php</code> 文件中配置，当我们添加新用户后，admin这个自动废弃。</p><p>添加新用户的步骤：『admin登录』-&gt; 『User Admin』 -&gt; 『Add a new user to the repository system』 -&gt; 『输入新用户信息和自己的密码』 -&gt; 『Confirm』</p><p>添加完新用户就可以使用新用户登录了，还可以创建新的仓库并给用户授予权限</p><p>创建新仓库的步骤：『Repository Admin』 -&gt; 『Create a new Repository』 -&gt; 『输入新库名和描述』 -&gt; 『Confirm』</p><p>给用户授予访问仓库的读写权限步骤：『Repository Admin』 -&gt; 『Change User Privileges of a Repository』 -&gt; 『Repository Name select』 -&gt; 『选择用户、路径，勾选读写权限』 -&gt; 『Confirm』</p><p>此外还有一些svnmanager操作可以查询官方文档，一般会把所有用户分成组管理，并把各个库的权限授予不同的组，这个实践一下就清楚了。</p><h3 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h3><p>如果你遇到了以下错误，一定是配置访问MySQL服务的用户或权限不匹配了，检查纠正过来就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Fatal Error</span><br><span class="line"></span><br><span class="line">[2] mysqli_real_connect(): (HY000/1044): Access denied for user &apos;svnmanageruser&apos;@&apos;localhost&apos; to database &apos;svnmanager&apos; (@line 86 in file /opt/lampp/htdocs/svnmanager/prado-2.0.3/framework/Data/adodb/drivers/adodb-mysqli.inc.php).</span><br><span class="line">Debug Backtrace</span><br><span class="line"></span><br><span class="line">#1  -- pradoErrorHandler(...)</span><br><span class="line">#2 adodb-mysqli.inc.php:86 -- mysqli_real_connect(...)</span><br><span class="line">#3 adodb.inc.php:416 -- ADODB_mysqli-&gt;_connect(...)</span><br><span class="line">#4 adodb.inc.php:3713 -- ADOConnection-&gt;Connect(...)</span><br><span class="line">#5 TAdodb.php:318 -- ADONewConnection(...)</span><br><span class="line">#6 TAdodb.php:113 -- TAdodb-&gt;open()</span><br><span class="line">#7 DataModule.php:31 -- TAdodb-&gt;__call(...)</span><br><span class="line">#8 DataModule.php:31 -- TAdodb-&gt;MetaTables()</span><br><span class="line">#9 TApplication.php:584 -- DataModule-&gt;onLoad(...)</span><br><span class="line">#10 TApplication.php:629 -- TApplication-&gt;loadModule(...)</span><br><span class="line">#11 TApplication.php:482 -- TApplication-&gt;loadPage(...)</span><br><span class="line">#12 index.php:5 -- TApplication-&gt;run()</span><br></pre></td></tr></table></figure><h3 id="查看服务器目录信息"><a href="#查看服务器目录信息" class="headerlink" title="查看服务器目录信息"></a>查看服务器目录信息</h3><p>查看一下服务器目录下信息，之前我们建立了三个空文件夹 <code>config</code>、<code>repos</code>、<code>trash</code>，现在已经有很多数据了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@VM-0-3-centos <span class="built_in">export</span>]<span class="comment"># tree svnrepos</span></span><br><span class="line">svnrepos</span><br><span class="line">|-- config</span><br><span class="line">|   |-- auth</span><br><span class="line">|   |   |-- svn.simple</span><br><span class="line">|   |   |-- svn.ssl.client-passphrase</span><br><span class="line">|   |   |-- svn.ssl.server</span><br><span class="line">|   |   `-- svn.username</span><br><span class="line">|   |-- config</span><br><span class="line">|   |-- README.txt</span><br><span class="line">|   |-- servers</span><br><span class="line">|   |-- svn_access_file</span><br><span class="line">|   `-- svn_passwd_file</span><br><span class="line">|-- repos</span><br><span class="line">|   `-- firstrepos</span><br><span class="line">|       |-- conf</span><br><span class="line">|       |   |-- authz</span><br><span class="line">|       |   |-- hooks-env.tmpl</span><br><span class="line">|       |   |-- passwd</span><br><span class="line">|       |   `-- svnserve.conf</span><br><span class="line">|       |-- db</span><br><span class="line">|       |   |-- current</span><br><span class="line">|       |   |-- format</span><br><span class="line">|       |   |-- fsfs.conf</span><br><span class="line">|       |   |-- fs-type</span><br><span class="line">|       |   |-- min-unpacked-rev</span><br><span class="line">|       |   |-- revprops</span><br><span class="line">|       |   |-- revs</span><br><span class="line">|       |   |-- transactions</span><br><span class="line">|       |   |-- txn-current</span><br><span class="line">|       |   |-- txn-current-lock</span><br><span class="line">|       |   |-- txn-protorevs</span><br><span class="line">|       |   |-- uuid</span><br><span class="line">|       |   `-- write-lock</span><br><span class="line">|       |-- format</span><br><span class="line">|       |-- hooks</span><br><span class="line">|       |   |-- post-commit.tmpl</span><br><span class="line">|       |   |-- post-lock.tmpl</span><br><span class="line">|       |   |-- post-revprop-change.tmpl</span><br><span class="line">|       |   |-- post-unlock.tmpl</span><br><span class="line">|       |   |-- pre-commit.tmpl</span><br><span class="line">|       |   |-- pre-lock.tmpl</span><br><span class="line">|       |   |-- pre-revprop-change.tmpl</span><br><span class="line">|       |   |-- pre-unlock.tmpl</span><br><span class="line">|       |   `-- start-commit.tmpl</span><br><span class="line">|       |-- locks</span><br><span class="line">|       |   |-- db.lock</span><br><span class="line">|       |   `-- db-logs.lock</span><br><span class="line">|       `-- README.txt</span><br><span class="line">`-- trash</span><br><span class="line">    |-- testrepos1-2022-09-17T10:51:04+02:00</span><br><span class="line">    |   |-- conf</span><br><span class="line">    |   |   |-- authz</span><br><span class="line">    |   |   |-- hooks-env.tmpl</span><br><span class="line">    |   |   |-- passwd</span><br><span class="line">    |   |   `-- svnserve.conf</span><br><span class="line">    |   |-- db</span><br><span class="line">    |   |   |-- current</span><br><span class="line">    |   |   |-- format</span><br><span class="line">    |   |   |-- fsfs.conf</span><br><span class="line">    |   |   |-- fs-type</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>config 目录下增加了管理权限的文件 <code>svn_access_file</code> 和用户密码的文件 <code>svn_passwd_file</code>，repos目录下新增了刚刚新增加的库 <code>firstrepos</code>，trash 目录下是我刚刚删除的无用的仓库。</p><h2 id="检出新增加的svn库"><a href="#检出新增加的svn库" class="headerlink" title="检出新增加的svn库"></a>检出新增加的svn库</h2><p>使用subversion客户端填写 <code>https://IP/svn/firstrepos</code> 地址可以下载我们最新的库 <code>firstrepos</code>，需要输入刚刚授予了权限的用户和密码。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="各个组件的配置文件"><a href="#各个组件的配置文件" class="headerlink" title="各个组件的配置文件"></a>各个组件的配置文件</h2><blockquote><p>The main XAMPP configuration files are located as follows:<br>Apache configuration file: \xampp\apache\conf\httpd.conf, \xampp\apache\conf\extra\httpd-xampp.conf<br>PHP configuration file: \xampp\php\php.ini<br>MySQL configuration file: \xampp\mysql\bin\my.ini<br>FileZilla Server configuration file: \xampp\FileZillaFTP\FileZilla Server.xml<br>Apache Tomcat configuration file: \xampp\tomcat\conf\server.xml<br>Apache Tomcat configuration file: \xampp\sendmail\sendmail.ini<br>Mercury Mail configuration file: \xampp\MercuryMail\MERCURY.INI</p></blockquote><h2 id="配置svn服务过程可能修改的文件"><a href="#配置svn服务过程可能修改的文件" class="headerlink" title="配置svn服务过程可能修改的文件"></a>配置svn服务过程可能修改的文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/opt/lampp/etc/httpd.conf</span><br><span class="line">/opt/lampp/htdocs/svnmanager/config.php</span><br><span class="line">/opt/lampp/etc/extra/httpd-ssl.conf</span><br></pre></td></tr></table></figure><p>这配置文件 <code>/opt/lampp/etc/httpd.conf</code> 中还可以通过 <code>LimitRequestBody</code>、<code>LimitXMLRequestBody</code> 等参数限制访问和提交的数据量</p><h2 id="配置服务器时间"><a href="#配置服务器时间" class="headerlink" title="配置服务器时间"></a>配置服务器时间</h2><p>如果发现svn提交记录时间不匹配，一般是因为svn服务器时间错误导致的，可以使用 <code>date</code> 命令修改，也可以配置一个 <code>ntp</code> 服务器来解决</p><p><code>ntp update -s xxx.xxx.xxx.xx</code> 指定ntp服务的IP或域名，默认使用UDP 123端口<br><code>ntpq -p</code> 或 <code>ntpstat</code> 可以查看ntp同步状态</p><h2 id="备份svn库"><a href="#备份svn库" class="headerlink" title="备份svn库"></a>备份svn库</h2><p>在迁移之前我们讨论了很多种方案，其中也包括一些备份方式，其实最简单的备份就是拷贝，所以我们可以使用 <code>rsync</code> 命令通过网络备份，把 svn 库的主目录 <code>svnrepos</code> 和 <code>/opt/lampp</code> 同步到备份机器，如果svn服务器出现了问题，可以立即用备份机提供服务。</p><h2 id="主动生成密码文件"><a href="#主动生成密码文件" class="headerlink" title="主动生成密码文件"></a>主动生成密码文件</h2><p><code>/opt/lampp/bin/htpasswd -c /export/svnrepos/config/svn_passwd_file test</code> 命令可以创建svn_passwd_file文件，并添加第一个用户<code>test</code>，执行命令后会提示输入两次新密码，切记不要在已经存在用户的svn仓库中使用，否则会被覆盖</p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p>如果搭建好的svnmanager可以创建用户和仓库，但是无法授予权限，网页错误中包含 <code>libserf</code>，可以通过 <code>yum install libserf</code> 命令解决。</p><p>如果添加好用户授予权限后，无法通过svn客户端更新，可以用检查 <code>/export/svnrepos/config/svn_passwd_file</code> 和 <code>/export/svnrepos/config/svn_access_file</code> 文件归属是否正确为 <code>daemon</code>，如果为文件归属 <code>root</code>，<code>svnmanager</code> 无法修改文件内容，也就会导致用户权限分配不正确</p><p>如果想限制访问svn的IP，可以启用 firewalld 服务或者安装使用 iptables 服务</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>XMAPP</code> 可以方便的提供WEB服务，可以把网站放到 <code>/opt/lampp/htdocs</code> 目录下</li><li>可以利用 XAMPP + subversion + svnmanager 的组合提供SVN服务，方便的创建仓库和管理各目录权限</li><li>CentOS 安装具体的环境前，可以安装一些通用的软件，<code>yum install -y epel-release</code>，</li><li>EPEL全称Extra Packages for Enterprise Linux，由 Fedora 社区打造，为 RHEL 及衍生发行版 CentOS 等提供高质量软件包的项目</li><li>systemctl 是一个常用的服务命令，比如关闭 firewalld 服务 <code>systemctl stop firewalld</code>，查询状态 <code>systemctl status iptables</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/126684985" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>岁月没有在某些人的脸上留下痕迹，但却对我特别照顾，好像在我这里过的特别匆忙，认真想想自己确实对保留青春阳光付出甚少，甚至连洗脸的时间都一再压缩，也难怪它还给我这些沧桑，今后多花点时间注意一些吧，你认真的注视着它，它便不会轻易溜走~</p><p>2022-9-17 20:47:42</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前对于版本控制工具 &lt;code&gt;svn&lt;/code&gt; 和 &lt;code&gt;git&lt;/code&gt; 更多的是操作命令的使用，而最近逐步开始接触使用环境的搭建了，对于一些私有项目还是需要在内部服务器上搭建一个 svn 或者 git 服务器的，前段时间因为 SVN 服务器硬盘空间告急，所以 SVN 数据迁移被提上了日程，经过几个月的准备，终于要动手了，期间也讨论了几个方案，结果最终迁移完发现，和我想的完全不一样啊，看来还是我太年轻了，世界真大~&lt;/p&gt;
    
    </summary>
    
      <category term="SVN" scheme="http://AlbertGithubHome.github.io/blog/categories/SVN/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="SVN" scheme="http://AlbertGithubHome.github.io/blog/tags/SVN/"/>
    
      <category term="XAMPP" scheme="http://AlbertGithubHome.github.io/blog/tags/XAMPP/"/>
    
      <category term="svnmanager" scheme="http://AlbertGithubHome.github.io/blog/tags/svnmanager/"/>
    
      <category term="ntp" scheme="http://AlbertGithubHome.github.io/blog/tags/ntp/"/>
    
  </entry>
  
  <entry>
    <title>关于竞赛，CSDN还有很长的路要走</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/09/09/%E5%85%B3%E4%BA%8E%E7%AB%9E%E8%B5%9B%EF%BC%8CCSDN%E8%BF%98%E6%9C%89%E5%BE%88%E9%95%BF%E7%9A%84%E8%B7%AF%E8%A6%81%E8%B5%B0/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/09/09/关于竞赛，CSDN还有很长的路要走/</id>
    <published>2022-09-09T15:42:00.000Z</published>
    <updated>2022-09-10T04:05:19.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>CSDN 编程竞赛·第五期总结<br>AlbertS    41  52.5    52m36s  竞赛勋章</p></blockquote><p>虽说这篇总结写在第五期之后，但是我却是从第三期就开始参加了的，前两期没有注意到就错过了，好在最近这几期比赛成绩很喜人，第三期6分，第四期67.5，第五期52.5，我承认我有点水，可是我也是能在力扣竞赛里常年水两题的选手啊，这个6分（满分100）真的惊到我了，从最近几期的参赛体验来看，CSDN在竞赛这个方向上还有很长的路要走。</p><a id="more"></a><h1 id="第三期"><a href="#第三期" class="headerlink" title="第三期"></a>第三期</h1><p>其实我也不算竞赛小白啦，毕竟之前在力扣参加过很多次了，因为平时总在CSDN上写总结，所以看到这里也有竞赛就想来试试，结果第一次有点手足无措，开头居然是4道Java和前端的选择题，我可是C++后端搬运工，嗯，我承认确实不会，根据经验选一选总能对一道题吧，既然选择题是特定语言的，那我直接写大题吧，一段操作猛如虎，一看分数2.5，当然分数不是立马出来的，我感觉答得还可以，结果过了几天出成绩是6分~</p><p><strong>吐槽开始：</strong></p><ul><li>要求关闭聊天软件，应该是防止作弊，关就关吧，这倒也无所谓</li><li>不能切屏，必须一直保持在答题状态，这有点严格了吧，万一这会我有事要处理呢，其实通常就是处理一些聊天信息</li><li>不能复制粘贴，你说不能从其他地方复制答案我可以理解，但是复制自己的代码也不行是要闹哪样</li><li>我知道为啥不能粘贴自己刚写的代码了，因为判断不出来是从哪里复制的，可是已经限制切屏了呀</li><li>测试用例简陋，有时看不太懂题全靠用例，好嘛，这里看不懂题就算了，用例可有可无</li><li>验证流程麻烦，好几个关闭按钮切来切去的</li><li>主函数不用给我提供，我又不能改，写在那有啥用</li><li>头文件要自己加，这是考算法来还是考背诵呢？（我确实被惯得不想写包含头文件了）</li></ul><h1 id="第四期"><a href="#第四期" class="headerlink" title="第四期"></a>第四期</h1><p>这期已经取消了选择题，直接是4道编程题，还是这样答起来顺利一点，各种语言都行，哪个顺手就用哪个了</p><p><strong>吐槽开始：</strong></p><p>因为取消了选择题，一时间竟找不到槽点了(#^.^#)，必须编一条</p><ul><li>测试用例依旧简单的可怜</li></ul><h1 id="第五期"><a href="#第五期" class="headerlink" title="第五期"></a>第五期</h1><p>我知道为啥第四期表现好了，因为在憋大招对付第五期，因为早饭吃的迟了，晚来了半小时参赛，结果发现进不去，正想报个bug发现帖子里都说进不去，这可有意思了，总共就一两千人参加，应该不是服务器性能不行吧，肯定是页面bug了</p><p>虽然大部分人都进不去，但还是有个别人进去比赛了的，已经出了成绩，20分暂居第一名，如果能保持到比赛结束就开心了，官方一直在回帖说解决问题，反正到比赛结束我也没进去。</p><p>一直到下午的1点之后，距离开始已经过去了5个小时，我终于进去了，告诉我比赛结束，分数是0，居然不能答题了，赶紧发帖找客服处理，好在工作人员及时赶到，帮我重置了一下，可以正常进入了。</p><p><strong>吐槽开始：</strong></p><ul><li>千人左右的比赛服务器就炸了</li><li>出现问题后修复过程缓慢</li><li>发帖提示我违规，但是不说哪里有问题，我也不知道哪句话说错了</li><li>通过BUG交流，沟通效率低下</li></ul><h1 id="优势与不足"><a href="#优势与不足" class="headerlink" title="优势与不足"></a>优势与不足</h1><p>前面吐槽了那么多，接下来说说优点吧：</p><ul><li>答题参与时间相对自由，仅限制了答题时长2小时候，不严格限制开始时间</li><li>分数按照通过的用例比例来给，没有采用非1即0的赋分方式，照顾了很多缺乏竞赛经验的选手，但是这样做未必是正确的</li><li>参加基本上都有奖品可以拿，调动了选手们的积极性，礼不在重，有就行</li><li>出现问题后尽力解决，虽然解决的慢了点，但是让人看到了负责人的一面</li></ul><p>缺点前面已经说了那么多，就不再赘述了，重点说一下答题环境需要改进，给出一些建议吧，其实编程竞赛已经不是新鲜事物了，有那么多好的平台可以学，比如力扣，每次的比赛都很多人参加的，把好的地方学过来就行：</p><ul><li>删除无关代码，只保留必要的输入参数就行了，把main函数给我也没用，又不允许本地调试</li><li>限制切屏这条尽力优化，限制复制自己代码这条必须去掉，我调整一下逻辑还要重新敲一遍体验未免太差了</li><li>比赛之后可以查看别人提交的代码，用于学习提升</li><li>赛后有针对这些题的讨论渠道，可以了解到自己有哪些不足，知道什么样的用例通不过</li><li>写包含头文件的这件事不太重要，重点放在逻辑实现上，现在谁还不是面向搜索引擎编程了，只要找到方法，头文件算什么难事</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>继续参加这个比赛，督促自己进步，同时也促进平台进步</li><li>如果自己不知道怎么做，就照着表现好的学，前面有那么多优秀的产品可以借鉴</li><li>产品上线还是要充分测试，像服务器炸了这种事最好不要出现了</li></ul><hr><center><a href="https://bbs.csdn.net/topics/608117734" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>『雄关漫道真如铁 而今迈步从头越』豪气如虹，真的很有才~</p><p>2022-9-10 11:50:37</p></blockquote><!--【CSDN】第五期编程竞赛获奖名单已经公布，恭喜您取得优异成绩并获奖，获奖用户需在CSDN发布一篇竞赛相关博客才可领取奖品哦，具体请查看详情：t.csdn.cn/HSLp5g-->]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;CSDN 编程竞赛·第五期总结&lt;br&gt;AlbertS    41  52.5    52m36s  竞赛勋章&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽说这篇总结写在第五期之后，但是我却是从第三期就开始参加了的，前两期没有注意到就错过了，好在最近这几期比赛成绩很喜人，第三期6分，第四期67.5，第五期52.5，我承认我有点水，可是我也是能在力扣竞赛里常年水两题的选手啊，这个6分（满分100）真的惊到我了，从最近几期的参赛体验来看，CSDN在竞赛这个方向上还有很长的路要走。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://AlbertGithubHome.github.io/blog/categories/Thinking/"/>
    
    
      <category term="竞赛" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%AB%9E%E8%B5%9B/"/>
    
      <category term="CNDN" scheme="http://AlbertGithubHome.github.io/blog/tags/CNDN/"/>
    
      <category term="活动" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%B4%BB%E5%8A%A8/"/>
    
      <category term="编程" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>简单总结下近期遇到的网络概念gcp、anycast IP、vlan</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/09/04/%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93%E4%B8%8B%E8%BF%91%E6%9C%9F%E9%81%87%E5%88%B0%E7%9A%84%E7%BD%91%E7%BB%9C%E6%A6%82%E5%BF%B5gcp%E3%80%81anycast-IP%E3%80%81vlan/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/09/04/简单总结下近期遇到的网络概念gcp、anycast-IP、vlan/</id>
    <published>2022-09-03T16:35:37.000Z</published>
    <updated>2022-09-03T17:57:38.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>你知道得越多，就越会意识到自己知道得多么少</p></blockquote><p>知识这个东西总是越学越越多，特别是你去接触一个新领域的时候，会忽然发现之前的自己是多么的狂妄，多么的无知，最近有一些网络相关的需求，这沟通过程中接触到了一些新的概念，比如gcp、anycast IP、vlan等等，初听这些词确实不太理解，所以查了一些资料，对了解到的内容进行一个简单的总结。</p><a id="more"></a><h1 id="gcp"><a href="#gcp" class="headerlink" title="gcp"></a>gcp</h1><p>GCP 全称 Google Cloud Platform，即谷歌云平台，再这样一个万物皆可云的发展趋势下，云服务发展突飞猛进，作为海外乃至全球的科技巨头，谷歌在云服务领域有着极强的优势，特别是在海外环境下被广泛使用，为计算、存储、网络、大数据、机器学习和物联网（IoT）以及云管理、安全和开发人员工具提供服务，云计算产品包括：</p><ul><li><p>Google Compute Engine，这是一种基础架构即服务 (IaaS) 产品，可为用户提供用于工作负载托管的虚拟机实例。</p></li><li><p>Google App Engine，这是一种平台即服务 (PaaS) 产品，可让软件开发人员访问 Google 的可扩展托管。开发人员还可以使用软件开发工具包 (SDK) 来开发在 App Engine 上运行的软件产品</p></li><li><p>Google Cloud Storage，这是一个云存储平台，旨在存储大型非结构化数据集。Google 还提供数据库存储选项，包括用于NoSQL 非关系存储的Cloud Datastore 、用于MySQL 完全关系存储的Cloud SQL 和 Google 的原生 Cloud Bigtable 数据库。</p></li><li><p>Google Container Engine，它是运行在 Google 公共云中的Docker容器的管理和编排系统，是基于 Google Kubernetes 容器编排引擎。</p></li><li><p>Google Cloud Pub/Sub 是一种托管的实时消息传递服务，允许在应用程序之间交换消息，是一种应用程序开发和集成服务。</p></li><li><p>Google Cloud Endpoints 允许开发人员创建基于RESTful API 的服务，然后让 Apple iOS、Android 和 JavaScript 客户端可以访问这些服务。</p></li><li><p>其他产品包括任播 DNS 服务器、直接网络互连、 负载平衡、监控和日志服务。</p></li></ul><h1 id="Anycast"><a href="#Anycast" class="headerlink" title="Anycast"></a>Anycast</h1><p>任播(Anycast)，又称为选播、泛播或任意播，是IPv6中定义的一种新型通信服务，是IPv6中三大通信方式之一，该定义最早由C Partridge在RFC 1546中首次提出，但是RFC1546对任播的描述仅仅是一个实验性的服务。</p><p>Anycast指IPV6协议中一个发送方同最近的一组接收方之间的通信，当一个单播地址被分配到多于一个的接口上时，发到该接口的报文被网络路由到由路由协议度量的“最近”的目标接口上。</p><p>与Unicast和Multicast类似，Anycast也是IP网络的一种通信模式。</p><p>Multicast指多播，它是指网络中一个节点发出的信息被多个节点收到。与此相对的有单播Unicast和广播Broadcast，前者是指一个节点发出的信息只被一个节点收到，后者是指一个节点发出的信息被子网内所有节点收到</p><p>Anycast 允许源结点向一组目标结点中的一个结点发送数据报，而这个结点由路由系统选择，对源结点透明；同时，路由系统就近选择结点为源结点提供服务，从而在一定程度上为源结点提供了更好的服务也减轻了网络负载。</p><p>实现上分布的服务共享相同的IP地址，同时在IP层进行透明的服务定位，这使得各种网络服务特别是应用层服务具有更强的透明性，而路由系统选择了“最近”的服务，缩短了服务响应的时间，同时减轻了网络负载，同时在网络上冗余分布相同的服务，路由系统可以提供机制选择负载相对轻的带宽相对高的路径来转发报文，这样就给用户带来了两个方面的好处：</p><ul><li>减弱了分布式拒绝服务攻击（DDOS）</li><li>减弱了网络拥塞给用户带来的影响</li></ul><h2 id="Anycast-IP"><a href="#Anycast-IP" class="headerlink" title="Anycast IP"></a>Anycast IP</h2><p>Anycast IP 是集Multicast（多播IP）和Unicast（单播IP）特性于一身的特殊IP地址类型，在Anycast 这种通信模式下，同时存在多个有效的数据包接收端，但是就某一个特定IP数据包而言，仅有一个接收端主机收到了此数据包。</p><p>客户分散在多地又需要就近接入的服务，需要IP不同的多个地域部署机器、配置 DNS 实现负载均衡，十分繁琐。使用 Anycast 的 IP 后，无需每个地域都配置 IP，后端维护一套逻辑即可，各地域请求直接用专线加速到后端机器。</p><p>Anycast 的 IP 能起到游戏加速器的作用，游戏请求就近进入云服务，走云服务的内网专线到达游戏服务器，极大缩短经过的公网路径，减少了延时、抖动、丢包。此外跟传统加速比，IP 入口无需额外部署流量接收设备，且IP无需区分地域，简化了 DNS 部署。</p><h1 id="vlan"><a href="#vlan" class="headerlink" title="vlan"></a>vlan</h1><p>VLAN 全称 Virtual Local Area Network，即虚拟局域网。</p><p>VALN 是一组逻辑上的设备和用户，这些设备和用户并不受物理位置的限制，可以根据功能、部门及应用等因素将它们组织起来，相互之间的通信就好像它们在同一个网段中一样，由此得名虚拟局域网。</p><p>VLAN可以为信息业务和子业务、以及信息业务间提供一个相符合业务结构的虚拟网络拓扑架构并实现访问控制功能。与传统的局域网技术相比较，VLAN技术更加灵活，它具有以下优点： 网络设备的移动、添加和修改的管理开销减少；可以控制广播活动；可提高网络的安全性。</p><p>当一个交换机上的所有端口中有至少一个端口属于不同网段的时候，当路由器的一个物理端口要连接2个或者以上的网段的时候，就是VLAN发挥作用的时候，这就是VLAN的目的。</p><p>VLAN限制网络上的广播，将网络划分为多个VLAN可减少参与广播风暴的设备数量。VLAN分段可以防止广播风暴波及整个网络。VLAN可以提供建立防火墙的机制，防止交换网络的过量广播。</p><ul><li>WAN：Wide Area Network，广域网</li><li>LAN：Local Area Network，局域网</li><li>WLAN：Wireless  Local Area Network，无线局域网</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>GCP 全称 Google Cloud Platform，指的是谷歌云平台</li><li>Anycast IP 可以实现多地用户就近接入服务，提升用户体验</li><li>VLAN 指虚拟局域网，可以更合理划分网络资源，控制广播活动，提高安全性</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/126552069" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>飞鸟尽，良弓藏；狡兔死，走狗烹。缘何众人都执着登顶？恐被藏与烹而已~</p><p>2022-9-4 01:49:39</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;你知道得越多，就越会意识到自己知道得多么少&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;知识这个东西总是越学越越多，特别是你去接触一个新领域的时候，会忽然发现之前的自己是多么的狂妄，多么的无知，最近有一些网络相关的需求，这沟通过程中接触到了一些新的概念，比如gcp、anycast IP、vlan等等，初听这些词确实不太理解，所以查了一些资料，对了解到的内容进行一个简单的总结。&lt;/p&gt;
    
    </summary>
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/categories/Network/"/>
    
    
      <category term="Network" scheme="http://AlbertGithubHome.github.io/blog/tags/Network/"/>
    
      <category term="gcp" scheme="http://AlbertGithubHome.github.io/blog/tags/gcp/"/>
    
      <category term="anycast" scheme="http://AlbertGithubHome.github.io/blog/tags/anycast/"/>
    
      <category term="vlan" scheme="http://AlbertGithubHome.github.io/blog/tags/vlan/"/>
    
  </entry>
  
  <entry>
    <title>rm -rf 真是删库跑路的一把好手</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/08/26/rm-rf-%E7%9C%9F%E6%98%AF%E5%88%A0%E5%BA%93%E8%B7%91%E8%B7%AF%E7%9A%84%E4%B8%80%E6%8A%8A%E5%A5%BD%E6%89%8B/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/08/26/rm-rf-真是删库跑路的一把好手/</id>
    <published>2022-08-26T14:52:15.000Z</published>
    <updated>2022-08-28T10:10:43.086Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上回书说到<a href="https://blog.csdn.net/albertsh/article/details/126075098" target="_blank" rel="noopener">《一个月黑风高的夜晚紧急完成gitlab服务器数据迁移》</a>，因为数据迁移后原数据还是存在的，该分区硬盘快满了，进而影响了原目录下的日志存储，既然数据已经迁移到新的路径了，那原来的库直接删掉就好了，往往就是这么不经意间做了一个令人十分后怕的决定。</p><a id="more"></a><h1 id="删库"><a href="#删库" class="headerlink" title="删库"></a>删库</h1><p>说干就干，连上服务器就开始操作了，为了避免搞错了，我还打开了另一个ssh窗口，对照着正在使用的git库，来一步步查找原来路径下已经废弃的仓库，嗯，终于找到了，对比各种信息没啥问题，两个窗口相互对照，十分“保险”。</p><p><code>rm -rf xxx</code> 走你，一切都安静了，好了退出当前路径检查一下空间大小，咦？路径怎么不对，好像删的是正在使用的那个库哎！服了，还真是受到了惊吓啊！背后发凉啊！gitlab网站访问一下，嗯，果然找不到了，拜拜！</p><h1 id="跑路"><a href="#跑路" class="headerlink" title="跑路"></a>跑路</h1><p>既然库都删完了，要不跑路吧？</p><blockquote><p>算了，能跑到哪呢？先回去看看能不能找回来吧~</p></blockquote><h1 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h1><p><code>rm -rf</code> 恢复硬盘数据是别想了，一般会让你卸载硬盘，断网，防止擦除，用第三方工具等，这我之前都演练过，几乎没什么用，这个时候需要冷静，先理智的分析一下：</p><p>既然是git库，我本地也是有的，要不我把我的库推上去试试？虽然没有那么新，但也差不了几个提交了，不过远程库都被我删了，我如果推上去一个新库，别人是不是直接访问不了，或者引发冲突呢？</p><p>想起之前迁移的时候我还备份了数据目录呢，那这样，先把备份的数据恢复到误删除的目录下，然后我再找一个本地的拉取到了最新状态git库推上去，既然想清楚了，那就动手吧。</p><ol><li><p>通知相关人员先不要拉取和推送数据</p></li><li><p>把一月前备份的git-data目录中对应数据通过 <code>rsync</code> 命令拷贝到误删除目录，这时通过gitlab网站已经能看到数据了，只是数据是一个月前的</p></li><li><p>跳到版本发布机，上面的Git库数据是最新的，按照分支把版本发布机上的git数据逐个推送到gitlab服务器</p></li><li><p>再次打开gitlab网站发现一切恢复如初，真是……</p></li></ol><h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p><code>rm -rf</code> 命令真是删库跑路的一把好手，一点也不拖泥带水，更无回收站这个后悔药可以吃，所以在服务器上对文件使用了这个命令，基本上等于判了死刑，但是git库真是一个好东西，分布式的存储可以保证每个人那都有完整的仓库，只要能找到一个最新的就行。</p><p>为了保证我能有最新的库可以用，我赶紧在 jenkins 上新建了两个定时任务，每天定时把仓库拉取到最新，防止类似意外的发生。</p><h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>其实这个后续和删库这件事没有任何关系，如果非得说有什么关系，就是它们都属于“灾难”，删库刚刚处理完，紧接着游戏玩家出现登录不上的问题，一开始以为是网络波动，因为我登录过程也不太顺畅，直到玩家发来了录屏，我才发现这个问题又有的查了。</p><p>玩家所说的无法登录并不是真的登不进去，而是登录之后加载完读条刚要进场景，直接退到登录界面，查询网络消息发现每次登录后几秒钟，网络连接自动断开，但是断开前的通讯流程日志显示的延迟信息，又说明网络状况良好，一头雾水。</p><p>最后耗时两天，在收集了各种线索以后，发现是升级Unity版本后，在法语、俄语、乌克兰语作为系统语言时，对c#的字符串处理逻辑要求更加严格，如果不做处理沿用之前的写法，很容易出现崩溃错误，因为有try-catch处理，表现出来就是直接断网会登录界面，统一设置语言处理函数时修复了此问题。</p><p>身心俱疲~</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>使用 <code>rm -rf</code> 命令还是要谨慎，谨慎，再谨慎</li><li>如果真的删库了，也不一定非得跑路，先冷静想想有没有补救的措施</li><li>语言、字符集、编码真的是相互纠结，至此我的bug库里又收录了系统语言运行时，神奇</li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/126455725" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>北风卷地白草折，胡天八月即飞雪~</p><p>2022-8-26 23:41:18</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上回书说到&lt;a href=&quot;https://blog.csdn.net/albertsh/article/details/126075098&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《一个月黑风高的夜晚紧急完成gitlab服务器数据迁移》&lt;/a&gt;，因为数据迁移后原数据还是存在的，该分区硬盘快满了，进而影响了原目录下的日志存储，既然数据已经迁移到新的路径了，那原来的库直接删掉就好了，往往就是这么不经意间做了一个令人十分后怕的决定。&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/categories/linux/"/>
    
    
      <category term="linux" scheme="http://AlbertGithubHome.github.io/blog/tags/linux/"/>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/tags/Git/"/>
    
      <category term="rm" scheme="http://AlbertGithubHome.github.io/blog/tags/rm/"/>
    
      <category term="删除" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%88%A0%E9%99%A4/"/>
    
      <category term="恢复" scheme="http://AlbertGithubHome.github.io/blog/tags/%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>git查看历史记录及修改内容</title>
    <link href="http://AlbertGithubHome.github.io/blog/2022/08/21/git%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E5%8F%8A%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9/"/>
    <id>http://AlbertGithubHome.github.io/blog/2022/08/21/git查看历史记录及修改内容/</id>
    <published>2022-08-21T00:04:41.000Z</published>
    <updated>2022-08-21T13:39:44.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在 <code>Git</code> 中没有真正的方法来做任何事情，这就是它的妙处！比如查看修改内容这件事，有些人会想到 <code>git log</code>，有些人会想到 <code>git show</code>，最近我又学到一个 <code>git whatchanged</code>，实现目的方法多种多样，各种途径任君挑选。</p><p>刚开始步入软件开发行业时喜欢捣鼓各种软件，进行各种个性化配置，任意修改快捷键，这样在开发过程中确实会舒服一些，但是换了一个环境时（电脑重装或在别人的机器），就好像一个什么也不会的傻子一样，所以慢慢的我开始强迫自己熟悉软件自己的快捷键和各种命令，这样在重装系统时会免去很多麻烦，并且因为一些命令用习惯了，在编写部署脚本时也不会总是写出不能识别的简写命令了。</p><a id="more"></a><h1 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h1><p>为了测试各种的查找修改记录的命令，我先进行一次包含增加、修改、删除的提交，然后对比来看各个命令的作用，实际修改如下：</p><ol><li>在文件address.txt中增加两行数据</li><li>清空文件age.txt中4行数据</li><li>修改文件name.txt中一行数据</li><li>增加带有3行数据的phone.txt文件</li><li>删除带有2行数据的story.txt文件</li></ol><p>在执行了 <code>git add .</code> 命令后，可以用 <code>git diff --staged</code> 查看即将提交的文件修改，展示如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">$ git diff --staged</span><br><span class="line">diff --git a/address.txt b/address.txt</span><br><span class="line">index e69de29..8f9d6e6 100644</span><br><span class="line">--- a/address.txt</span><br><span class="line">+++ b/address.txt</span><br><span class="line">@@ -0,0 +1,2 @@</span><br><span class="line">+beijing</span><br><span class="line">+shanghai</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/age.txt b/age.txt</span><br><span class="line">index 58f78c9..e69de29 100644</span><br><span class="line">--- a/age.txt</span><br><span class="line">+++ b/age.txt</span><br><span class="line">@@ -1,4 +0,0 @@</span><br><span class="line">-12</span><br><span class="line">-16</span><br><span class="line">-17</span><br><span class="line">-15</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/name.txt b/name.txt</span><br><span class="line">index ac37a53..0ed306a 100644</span><br><span class="line">--- a/name.txt</span><br><span class="line">+++ b/name.txt</span><br><span class="line">@@ -1,4 +1,4 @@</span><br><span class="line"> tom</span><br><span class="line">-alice</span><br><span class="line">+jerry</span><br><span class="line"> bily</span><br><span class="line"> andy</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/phone.txt b/phone.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..241bcdb</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/phone.txt</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+110</span><br><span class="line">+120</span><br><span class="line">+119</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/story.txt b/story.txt</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 0d89902..0000000</span><br><span class="line">--- a/story.txt</span><br><span class="line">+++ /dev/null</span><br><span class="line">@@ -1,2 +0,0 @@</span><br><span class="line">-King</span><br><span class="line">-Wolf</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p>关于 <code>git diff</code> 对于很多使用 <code>git</code> 管理代码的小伙伴再熟悉不过了，但是其中有些细节还是需要学习的：</p><ol><li><p><code>diff --git a/name.txt b/name.txt</code> 这一行是说以下展示 <code>name.txt</code> 文件修改前后的信息，<code>a/name.txt</code> 和 <code>b/name.txt</code> 分别表示修改前后的文件名</p></li><li><p><code>index ac37a53..0ed306a 100644</code> 这一行表示文件修改前后的 <code>object</code>，<code>100644</code> 表示这是一个常规文件，文件权限为 <code>644</code>，使用 <code>git cat-file -p</code>可以查看文件内容：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git cat-file -p ac37a53</span><br><span class="line">tom</span><br><span class="line">alice</span><br><span class="line">bily</span><br><span class="line">andy</span><br><span class="line"></span><br><span class="line">$ git cat-file -p 0ed306a</span><br><span class="line">tom</span><br><span class="line">jerry</span><br><span class="line">bily</span><br><span class="line">andy</span><br></pre></td></tr></table></figure></li><li><figure class="highlight plain"><figcaption><span>a/name.txt``` 表示修改前的文件，```+++ b/name.txt``` 表示修改后的文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. `@@ -1,4 +1,4 @@` 这一句应该是最有意思的，也是不用一看懂的一行，其中开头和结尾的 `@@` 为固定格式，`-1,4` 表示修改前的 `1~4`行，`+1~4`表示修改后的`1~4`行，这句话的意思就是，以下内容展示了修改前 `1~4`行到修改后 `1~4`行的文件变化，因为我们只修改了一行，所以修改前后行数不变，如果新增行数和删除行数不同，那么这个位置展示的行数也是不同的，例如 `phone.txt` 文件的变化 `@@ -0,0 +1,3 @@`</span><br><span class="line"></span><br><span class="line">5. 最后就是文件具体的变化了，新增内容前面是加号 `+`，删除内容前面是减号 `-`：</span><br><span class="line"></span><br><span class="line">    ```bash</span><br><span class="line">     tom</span><br><span class="line">    -alice</span><br><span class="line">    +jerry</span><br><span class="line">     bily</span><br><span class="line">     andy</span><br></pre></td></tr></table></figure></li></ol><h1 id="查询文件修改"><a href="#查询文件修改" class="headerlink" title="查询文件修改"></a>查询文件修改</h1><p>当我们把修改的内容提交以后，这条修改属于存入了仓库的历史之中，<code>git diff</code> 就无法再查看文件的变化了，而需要使用 <code>git log</code> 或 <code>git show</code> 来查看文件修改的内容，接下来我们来看看这些命令都能用来干嘛。</p><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><p><code>git show</code> 默认展示最近一次提交的修改，与执行 <code>git commit</code> 命令之前的 <code>git diff --staged</code> 查看得到的绝大部分内容相同，只是在开头位置包含最新提交的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$ git show</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line">diff --git a/address.txt b/address.txt</span><br><span class="line">index e69de29..8f9d6e6 100644</span><br><span class="line">--- a/address.txt</span><br><span class="line">+++ b/address.txt</span><br><span class="line">@@ -0,0 +1,2 @@</span><br><span class="line">+beijing</span><br><span class="line">+shanghai</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/age.txt b/age.txt</span><br><span class="line">index 58f78c9..e69de29 100644</span><br><span class="line">--- a/age.txt</span><br><span class="line">+++ b/age.txt</span><br><span class="line">@@ -1,4 +0,0 @@</span><br><span class="line">-12</span><br><span class="line">-16</span><br><span class="line">-17</span><br><span class="line">-15</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/name.txt b/name.txt</span><br><span class="line">index ac37a53..0ed306a 100644</span><br><span class="line">--- a/name.txt</span><br><span class="line">+++ b/name.txt</span><br><span class="line">@@ -1,4 +1,4 @@</span><br><span class="line"> tom</span><br><span class="line">-alice</span><br><span class="line">+jerry</span><br><span class="line"> bily</span><br><span class="line"> andy</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/phone.txt b/phone.txt</span><br><span class="line">new file mode 100644</span><br><span class="line">index 0000000..241bcdb</span><br><span class="line">--- /dev/null</span><br><span class="line">+++ b/phone.txt</span><br><span class="line">@@ -0,0 +1,3 @@</span><br><span class="line">+110</span><br><span class="line">+120</span><br><span class="line">+119</span><br><span class="line">\ No newline at end of file</span><br><span class="line">diff --git a/story.txt b/story.txt</span><br><span class="line">deleted file mode 100644</span><br><span class="line">index 0d89902..0000000</span><br><span class="line">--- a/story.txt</span><br><span class="line">+++ /dev/null</span><br><span class="line">@@ -1,2 +0,0 @@</span><br><span class="line">-King</span><br><span class="line">-Wolf</span><br><span class="line">\ No newline at end of file</span><br></pre></td></tr></table></figure><p><code>git show</code> 还可以加数字，比如 <code>git show -3</code> 就是展示最近3次提交修改信息。</p><p><code>git show --stat</code> 可以查看最新提交的修改文件，如果想查看指定提交的修改文件信息，可以在后面跟上<code>commit-id</code>，例如 <code>git show --stat 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git show --<span class="built_in">stat</span></span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line"> address.txt | 2 ++</span><br><span class="line"> age.txt     | 4 ----</span><br><span class="line"> name.txt    | 2 +-</span><br><span class="line"> phone.txt   | 3 +++</span><br><span class="line"> story.txt   | 2 --</span><br><span class="line"> 5 files changed, 6 insertions(+), 7 deletions(-)</span><br></pre></td></tr></table></figure><p>这个展示信息可以清楚的看出哪些文件新增了内容，哪些文件删除了内容，并且展示了文件增伤行数的比例，但是有一点它不够清晰，那就是无法看出哪些是新增的文件，哪些是删除的文件，比如 <code>age.txt</code> 和 <code>story.txt</code> 都显示删除了数据，但实际上 <code>story.txt</code> 整个文件都从仓库中删除了，要想看出文件增删状态可以使用接下来展示的这个命令 <code>git whatchanged</code></p><h2 id="git-whatchanged"><a href="#git-whatchanged" class="headerlink" title="git whatchanged"></a>git whatchanged</h2><p><code>git whatchanged</code> 可以展示出文件的增删状态和权限修改，默认分页展示所有提交记录，可以后面加数字来展示最近几次的文件增删状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git whatchanged -1</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line">:100644 100644 e69de29 8f9d6e6 M        address.txt</span><br><span class="line">:100644 100644 58f78c9 e69de29 M        age.txt</span><br><span class="line">:100644 100644 ac37a53 0ed306a M        name.txt</span><br><span class="line">:000000 100644 0000000 241bcdb A        phone.txt</span><br><span class="line">:100644 000000 0d89902 0000000 D        story.txt</span><br></pre></td></tr></table></figure><p>从这个文件中就可以看出 address.txt、age.txt、name.txt 三个文件被修改了，phone.txt 是新增加的，story.txt 文件被删除了，如果在命令后面加上选项 <code>--stat</code> 作用就和 <code>git show</code> 一样了，兜兜转转回到原点~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git whatchanged -1 --<span class="built_in">stat</span></span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line"> address.txt | 2 ++</span><br><span class="line"> age.txt     | 4 ----</span><br><span class="line"> name.txt    | 2 +-</span><br><span class="line"> phone.txt   | 3 +++</span><br><span class="line"> story.txt   | 2 --</span><br><span class="line"> 5 files changed, 6 insertions(+), 7 deletions(-)</span><br></pre></td></tr></table></figure><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><p>根据我个人的理解，<code>git show</code> 注重查看一次提交中修改的内容，而 <code>git log</code> 主要用于查找历史提交的脉络，但这不是绝对的，因为git做一件事，没有绝对的一种方式，你也可以用 <code>git log</code> 来实现 <code>git show</code>。</p><ul><li><p>展示最近一次提交</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br></pre></td></tr></table></figure></li><li><p>展示其他分支最近一次提交</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1 dev</span><br><span class="line">commit 62cc52cbc7f9581fa825b443aba3481083459656 (dev)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 12:02:11 2022 +0800</span><br><span class="line"></span><br><span class="line">    init git repository</span><br></pre></td></tr></table></figure></li><li><p>展示修改的文件列表及文件修改的统计</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1 --<span class="built_in">stat</span></span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line"> address.txt | 2 ++</span><br><span class="line"> age.txt     | 4 ----</span><br><span class="line"> name.txt    | 2 +-</span><br><span class="line"> phone.txt   | 3 +++</span><br><span class="line"> story.txt   | 2 --</span><br><span class="line"> 5 files changed, 6 insertions(+), 7 deletions(-)</span><br></pre></td></tr></table></figure></li><li><p>展示每次修改的文件列表</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1 --name-only</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line">address.txt</span><br><span class="line">age.txt</span><br><span class="line">name.txt</span><br><span class="line">phone.txt</span><br><span class="line">story.txt</span><br></pre></td></tr></table></figure></li><li><p>展示修改的文件列表和显示状态</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1 --name-status</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line">M       address.txt</span><br><span class="line">M       age.txt</span><br><span class="line">M       name.txt</span><br><span class="line">A       phone.txt</span><br><span class="line">D       story.txt</span><br></pre></td></tr></table></figure></li><li><p>展示指定作者提交的记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -1 --author=<span class="string">"albert"</span></span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br></pre></td></tr></table></figure></li><li><p>单行展示提交的记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --oneline</span><br><span class="line">2447e2b (HEAD -&gt; master) update example data</span><br><span class="line">62cc52c (dev) init git repository</span><br></pre></td></tr></table></figure></li><li><p>展示指定日期之前的提交记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --before=<span class="string">'2022-08-22'</span></span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line">commit 62cc52cbc7f9581fa825b443aba3481083459656 (dev)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 12:02:11 2022 +0800</span><br><span class="line"></span><br><span class="line">    init git repository</span><br></pre></td></tr></table></figure></li><li><p>展示一天之内的提交记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --since=1.day.ago</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br><span class="line"></span><br><span class="line">commit 62cc52cbc7f9581fa825b443aba3481083459656 (dev)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 12:02:11 2022 +0800</span><br><span class="line"></span><br><span class="line">    init git repository</span><br></pre></td></tr></table></figure></li><li><p>展示指定包含指定内容的提交记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --grep=update</span><br><span class="line">commit 2447e2b9c15472f2ead7bf451aa5fc9c3f34f5ee (HEAD -&gt; master)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 15:22:08 2022 +0800</span><br><span class="line"></span><br><span class="line">    update example data</span><br></pre></td></tr></table></figure></li><li><p>展示指定不包含指定内容的提交记录</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --grep=update --invert-grep</span><br><span class="line">commit 62cc52cbc7f9581fa825b443aba3481083459656 (dev)</span><br><span class="line">Author: albert &lt;albert101@163.com&gt;</span><br><span class="line">Date:   Sun Aug 21 12:02:11 2022 +0800</span><br><span class="line"></span><br><span class="line">    init git repository</span><br></pre></td></tr></table></figure></li><li><p>终极大招，图形化展示，其实用的并不多</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=format:<span class="string">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> --abbrev-commit --date=relative --all</span><br><span class="line">* 2447e2b - (HEAD -&gt; master) update example data (77 minutes ago) &lt;albert&gt;</span><br><span class="line">* 62cc52c - (dev) init git repository (2 hours ago) &lt;albert&gt;</span><br><span class="line">*   719ec7a - (refs/stash) WIP on master: 83f00c5 init git repository (2 hours ago) &lt;albert&gt;</span><br><span class="line">|\</span><br><span class="line">| * 9c87e06 - index on master: 83f00c5 init git repository (2 hours ago) &lt;albert&gt;</span><br><span class="line">|/</span><br><span class="line">* 83f00c5 - init git repository (5 hours ago) &lt;albert&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>查看最近一次修改的内容使用 <code>git show</code></li><li>查看最近一次修改的文件使用 <code>git show --stat</code> 或 <code>git log -1 --name-only</code></li><li>查看最近一次修改的文件状态使用 <code>git whatchanged -1</code> 或 <code>git log -1 --name-status</code></li><li>图形化显示git提交记录使用 <code>git log --graph</code></li></ul><hr><center><a href="https://blog.csdn.net/albertsh/article/details/126214355" target="_blank" rel="noopener"> ==&gt;&gt; 反爬链接，请勿点击，原地爆炸，概不负责！&lt;&lt;== </a></center><hr><blockquote><p>轻生的人到底是勇敢还是懦弱呢？虽说我未经历过他的人生不该轻易评判，但就我主观来思考这类事，大抵是因为对生活失去了信心。人固有一死，或重于泰山，或轻于鸿毛。而遇到困难就选择轻生的人是自私且不负责任的，若你无牵无挂走了也就走了，倘若还有家人岂不是还要拿出额外一笔钱给你办个葬礼？连死都不怕了，还有什么是过不去的呢？</p><p>2022-8-21 21:19:13</p></blockquote><p>&lt;!–<br>我曾走过山，走过水，其实只是借助它们走过我的生命；<br>我看着天，看着地，其实只是借助它们确定我的位置；<br>我爱着他，爱着你，其实只是借助别人实现了我的爱欲。</p><p>——史铁生《务虚笔记》<br>– &gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在 &lt;code&gt;Git&lt;/code&gt; 中没有真正的方法来做任何事情，这就是它的妙处！比如查看修改内容这件事，有些人会想到 &lt;code&gt;git log&lt;/code&gt;，有些人会想到 &lt;code&gt;git show&lt;/code&gt;，最近我又学到一个 &lt;code&gt;git whatchanged&lt;/code&gt;，实现目的方法多种多样，各种途径任君挑选。&lt;/p&gt;
&lt;p&gt;刚开始步入软件开发行业时喜欢捣鼓各种软件，进行各种个性化配置，任意修改快捷键，这样在开发过程中确实会舒服一些，但是换了一个环境时（电脑重装或在别人的机器），就好像一个什么也不会的傻子一样，所以慢慢的我开始强迫自己熟悉软件自己的快捷键和各种命令，这样在重装系统时会免去很多麻烦，并且因为一些命令用习惯了，在编写部署脚本时也不会总是写出不能识别的简写命令了。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/categories/Git/"/>
    
    
      <category term="log" scheme="http://AlbertGithubHome.github.io/blog/tags/log/"/>
    
      <category term="版本控制" scheme="http://AlbertGithubHome.github.io/blog/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
      <category term="Git" scheme="http://AlbertGithubHome.github.io/blog/tags/Git/"/>
    
      <category term="历史记录" scheme="http://AlbertGithubHome.github.io/blog/tags/%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
